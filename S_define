/************************TRICK HEADER*************************
PURPOSE:
    (Lists out the other object files that are not included from C++ headers)
LIBRARY DEPENDENCIES:
(
)
*************************************************************/

#include "sim_objects/default_trick_sys.sm"
##include "Rocket/include/Earth.hh"
##include "Rocket/include/GPS_satellites.hh"
##include "Rocket/include/GPS_receiver.hh"
##include "Rocket/include/Newton.hh"
##include "Rocket/include/Euler.hh"
##include "Rocket/include/Ins.hh"
##include "Rocket/include/Tvc.hh"
##include "Rocket/include/Rcs.hh"
##include "Rocket/include/Actuator.hh"
##include "Rocket/include/Control.hh"
##include "Rocket/include/Guidance.hh"
##include "Rocket/include/Force.hh"
##include "Rocket/include/Propulsion.hh"
##include "Rocket/include/Aerodynamics.hh"

class GPS_SAT_SimObject : public Trick::SimObject {
    public:
        GPS_Satellites sats;

        GPS_SAT_SimObject() {
            ("default_data") sats.default_data();
            ("initialization") sats.initialize();
            (0.001, "scheduled") sats.propagate_sv();
        }
};

class Rocket_SimObject : public Trick::SimObject {
    public:
        GPS_Satellites* gps_sats;

        Environment env;
        Newton newton;
        _Euler_ euler;

        Kinematics kinematics;
        Forces force;

        AeroDynamics aerodynamics;
        Propulsion propulsion;

        GPS_Receiver gpsr;
        INS ins;

        Control control;
        Guidance guidance;

        TVC tvc;
        RCS rcs;
        Actuator actuator;

        Rocket_SimObject() {
            ("default_data") gpsr.default_data();
            ("default_data") guidance.default_data();
            ("initialization") kinematics.initialize(&newton, &env, &euler);
            ("initialization") env.initialize(&newton, &aerodynamics, &kinematics);
            ("initialization") aerodynamics.initialize(&kinematics, &env, &propulsion, &euler, &newton, &tvc);
            ("initialization") newton.initialize(&kinematics, &euler, &env, &propulsion, &force);
            ("initialization") euler.initialization(&kinematics, &propulsion, &force);
            ("initialization") gpsr.initialize(&newton, &euler, gps_sats, &ins, 0.001);
            ("initialization") guidance.initialize(&ins, &newton, &propulsion);
            ("initialization") control.initialize(&ins, &newton, &env, &propulsion, &aerodynamics);
            ("initialization") ins.initialize(&newton, &euler, &env, &kinematics, &gpsr);
            ("initialization") tvc.initialize(&env, &kinematics, &control, &propulsion);
            ("initialization") rcs.initialize(&ins, &guidance, &propulsion);
            ("initialization") actuator.initialize(&control);
            ("initialization") propulsion.initialize(&env);
            ("initialization") force.init_force(&env, &propulsion, &rcs, &aerodynamics, &tvc);

            (0.001, "scheduled") kinematics.calculate_kinematics(0.001);
	    (0.001, "scheduled") env.calculate_env(0.001,env.weathertable);
            (0.001, "scheduled") propulsion.calculate_propulsion(0.001);
            (0.001, "scheduled") aerodynamics.calculate_aero(0.001,aerodynamics.aerotable);
            // (0.1, "scheduled") gpsr.get_quadriga();
            // (0.1, "scheduled") gpsr.filter_extrapolation(0.1);
            // (0.1, "scheduled") gpsr.measure();
            (0.001, "scheduled") ins.ins_gyro(0.001);
            (0.001, "scheduled") ins.ins_accl();
            (0.001, "scheduled") ins.ins_grav();
            (0.05, "scheduled") ins.update(0.05);

            // (0.001, "scheduled") guidance.guidance(0.001);
            // (0.05, "scheduled") control.control(0.05);

            // (0.001, "scheduled") tvc.actuate(0.001);
            (0.05, "scheduled") rcs.actuate();
            (0.001, "scheduled") rcs.rcs_schmitt_thrust();
            // (0.001, "scheduled") actuator.actuate(0.001);
            (0.001, "scheduled") force.forces();
            (0.001, "scheduled") newton.calculate_newton(0.001);
            (0.001, "scheduled") euler.euler(0.001);

        }
};

GPS_SAT_SimObject gps_sats;
Rocket_SimObject rkt;

void create_connections() {
    rkt.gps_sats = &gps_sats.sats;
}
