/************************TRICK HEADER*************************
PURPOSE:
    (Lists out the other object files that are not included from C++ headers)
LIBRARY DEPENDENCIES:
(
)
*************************************************************/

#include "sim_objects/default_trick_sys.sm"
##include "rocket/Earth.hh"
##include "rocket/GPS_satellites.hh"
##include "rocket/GPS_receiver.hh"
##include "rocket/Newton.hh"
##include "rocket/Euler.hh"
##include "rocket/Ins.hh"
##include "rocket/Tvc.hh"
##include "rocket/Rcs.hh"
##include "rocket/Actuator.hh"
##include "rocket/Control.hh"
##include "rocket/Guidance.hh"
##include "rocket/Force.hh"
##include "rocket/Propulsion.hh"
##include "rocket/Aerodynamics.hh"
##include "rocket/Time_management.hh"

##include "cad/env/atmosphere.hh"
##include "cad/env/atmosphere_nasa2002.hh"
##include "cad/env/atmosphere76.hh"
##include "cad/env/atmosphere_weatherdeck.hh"

##include "cad/env/wind.hh"
##include "cad/env/wind_no.hh"
##include "cad/env/wind_tabular.hh"
##include "cad/env/wind_constant.hh"

##include "sensor/gyro/gyro.hh"
##include "sensor/gyro/gyro_ideal.hh"
##include "sensor/gyro/gyro_rocket6g.hh"

##include "sensor/accel/accelerometer.hh"
##include "sensor/accel/accelerometer_ideal.hh"
##include "sensor/accel/accelerometer_rocket6g.hh"

##include "cad/schmitt_trigger.hh"

class GPS_SAT_SimObject : public Trick::SimObject {
    public:
        GPS_Satellites sats;

        GPS_SAT_SimObject() {
            ("default_data") sats.default_data();
            ("initialization") sats.initialize();
            (0.001, "scheduled") sats.propagate_sv();
        }
};

class Rocket_SimObject : public Trick::SimObject {
    public:
        GPS_Satellites* gps_sats;

        Environment env;
        Newton newton;
        _Euler_ euler;

        Kinematics kinematics;
        Forces force;

        AeroDynamics aerodynamics;
        Propulsion propulsion;

        GPS_Receiver gpsr;
        INS ins;

        Control control;
        Guidance guidance;

        TVC tvc;
        RCS rcs;
        Actuator actuator;
        time_management time;

        Rocket_SimObject() 
            :   newton      ( kinematics , euler        , env          , propulsion   , force ) ,
                kinematics  ( newton     , env          , euler )      ,
                euler       ( kinematics , propulsion   , force )      ,
                env         ( newton     , aerodynamics , kinematics ) ,
                propulsion  ( env )      ,
                aerodynamics( kinematics , env          , propulsion   , euler        , newton  , tvc ) ,
                ins         ( newton     , euler        , env          , kinematics   , gpsr )  ,
                tvc         ( env        , kinematics   , control      , propulsion ) ,
                rcs         ( ins        , guidance     , propulsion )
            {
            ("default_data") gpsr.default_data();
            ("default_data") guidance.default_data();
            ("initialization") kinematics.initialize();
            ("initialization") env.initialize();
            ("initialization") aerodynamics.initialize();
            ("initialization") newton.initialize();
            ("initialization") euler.initialize();
            ("initialization") gpsr.initialize(&newton, &euler, gps_sats, &ins, 0.001);
            ("initialization") guidance.initialize(&ins, &newton, &propulsion);
            ("initialization") control.initialize(&ins, &newton, &env, &propulsion, &aerodynamics);
            ("initialization") ins.initialize();
            ("initialization") tvc.initialize();
            ("initialization") rcs.initialize();
            ("initialization") actuator.initialize(&control);
            ("initialization") propulsion.initialize();
            ("initialization") force.init_force(&env, &propulsion, &rcs, &aerodynamics, &tvc);

            (0.001, "scheduled") gpsr.update_markov(0.001);
            (0.001, "scheduled") kinematics.propagate(0.001);
	        (0.001, "scheduled") env.propagate(0.001);
            (0.001, "scheduled") propulsion.propagate(0.001);
            (0.001, "scheduled") aerodynamics.calculate_aero(0.001);
            // (0.1, "scheduled") gpsr.get_quadriga();
            // (0.1, "scheduled") gpsr.filter_extrapolation(0.1);
            // (0.1, "scheduled") gpsr.measure();
            (0.05, "scheduled") ins.update(0.05);
            // (0.001, "scheduled") guidance.guidance(0.001);
            (0.05, "scheduled") control.control(0.05);
            (0.001, "scheduled") tvc.actuate(0.001);
            (0.05, "scheduled") rcs.actuate();
            (0.001, "scheduled") rcs.rcs_schmitt_thrust();
            (0.001, "scheduled") force.forces();
            (0.001, "scheduled") newton.propagate(0.001);
            (0.001, "scheduled") euler.propagate(0.001);

            (0.001, "logging") kinematics.update_diagnostic_attributes(0.001);
            (0.001, "logging") env.update_diagnostic_attributes(0.001);
            (0.001, "logging") newton.update_diagnostic_attributes(0.001);
            (0.001, "logging") euler.update_diagnostic_attributes(0.001);

        }
};

GPS_SAT_SimObject gps_sats;
Rocket_SimObject rkt;

void create_connections() {
    rkt.gps_sats = &gps_sats.sats;
}
