/************************TRICK HEADER*************************
PURPOSE:
    (Lists out the other object files that are not included from C++ headers)
LIBRARY DEPENDENCIES:
(
)
*************************************************************/

#include "sim_objects/default_trick_sys.sm"
##include "rocket/Earth.hh"
##include "rocket/GPS_satellites.hh"
##include "rocket/GPS_receiver.hh"
##include "rocket/Newton.hh"
##include "rocket/Euler.hh"
##include "rocket/Ins.hh"
##include "rocket/Tvc.hh"
##include "rocket/Rcs.hh"
##include "rocket/Control.hh"
##include "rocket/Guidance.hh"
##include "rocket/Force.hh"
##include "rocket/Propulsion.hh"
##include "rocket/Aerodynamics.hh"
##include "rocket/Time_management.hh"

##include "cad/utility.hh"
##include "cad/datadeck.hh"
##include "cad/schmitt_trigger.hh"

##include "cad/env/atmosphere.hh"
##include "cad/env/atmosphere_nasa2002.hh"
##include "cad/env/atmosphere76.hh"
##include "cad/env/atmosphere_weatherdeck.hh"

##include "cad/env/wind.hh"
##include "cad/env/wind_no.hh"
##include "cad/env/wind_tabular.hh"
##include "cad/env/wind_constant.hh"

##include "sensor/gyro/gyro.hh"
##include "sensor/gyro/gyro_ideal.hh"
##include "sensor/gyro/gyro_rocket6g.hh"

##include "sensor/accel/accelerometer.hh"
##include "sensor/accel/accelerometer_ideal.hh"
##include "sensor/accel/accelerometer_rocket6g.hh"

##include "math/utility.hh"
##include "math/integrate.hh"
##include "math/stochastic.hh"
##include "math/matrix/utility.hh"


class GPS_SAT_SimObject : public Trick::SimObject {
    public:
        GPS_Satellites sats;

        GPS_SAT_SimObject() {
            ("default_data") sats.default_data();
            ("initialization") sats.initialize();
            (0.001, "scheduled") sats.propagate_sv();
        }
};

class Rocket_SimObject : public Trick::SimObject {
    public:
        GPS_Satellites* gps_sats;

        Environment env;
        Newton newton;
        _Euler_ euler;

        Kinematics kinematics;
        Forces forces;

        AeroDynamics aerodynamics;
        Propulsion propulsion;

        GPS_Receiver gpsr;
        INS ins;

        Control control;
        Guidance guidance;

        TVC tvc;
        RCS rcs;

        time_management time;

        void link_control_input(){
            control.grab_mprop = LINK(propulsion, get_mprop);

            control.grab_dvbe  = LINK(newton, get_dvbe);

            control.grab_gymax = LINK(aerodynamics, get_gymax);
            control.grab_dyb   = LINK(aerodynamics, get_dyb);
            control.grab_dnb   = LINK(aerodynamics, get_dnb);
            control.grab_dnr   = LINK(aerodynamics, get_dnr);
            control.grab_dndr  = LINK(aerodynamics, get_dndr);
            control.grab_dla   = LINK(aerodynamics, get_dla);
            control.grab_dma   = LINK(aerodynamics, get_dma);
            control.grab_dmq   = LINK(aerodynamics, get_dmq);
            control.grab_dmde  = LINK(aerodynamics, get_dmde);
            control.grab_dnd   = LINK(aerodynamics, get_dnd);
            control.grab_dlde  = LINK(aerodynamics, get_dlde);

            control.grab_pdynmc = LINK(env, get_pdynmc);

            control.grab_dvbec = LINK(ins, get_dvbec);
            control.grab_thtvdcx = LINK(ins, get_thtvdcx);
            control.grab_thtbdcx = LINK(ins, get_thtbdcx);

            control.grab_qqcx = LINK(ins.get_gyro(), get_qqcx);
            control.grab_rrcx = LINK(ins.get_gyro(), get_rrcx);

            control.grab_FSPCB = LINK(ins.get_accelerometer(), get_computed_FSPB);
        };

        void link_ins_input(){
            ins.grab_SBII       = LINK(newton     , get_SBII);
            ins.grab_VBII       = LINK(newton     , get_VBII);
            ins.grab_dbi        = LINK(newton     , get_dbi);
            ins.grab_TBI        = LINK(kinematics , get_TBI);
            ins.grab_SXH        = LINK(gpsr       , get_SXH);
            ins.grab_VXH        = LINK(gpsr       , get_VXH);
            ins.grab_gps_update = LINK(gpsr       , get_gps_update);
            ins.clear_gps_flag  = LINK(gpsr       , clear_gps_flag);
        };

        Rocket_SimObject() 
            :   newton      ( kinematics , euler        , env          , propulsion   , forces )      ,
                kinematics  ( newton     , env          , euler )      ,
                euler       ( kinematics , propulsion   , forces )     ,
                gpsr        ( newton     , euler        , *gps_sats    , ins )        ,
                guidance    ( ins        , newton       , propulsion)  ,
                env         ( newton     , aerodynamics , kinematics , time ) ,
                propulsion  ( env )      ,
                aerodynamics( kinematics , env          , propulsion   , euler        , newton        , tvc ) ,
                tvc         ( env        , kinematics   , control      , propulsion ) ,
                rcs         ( ins        , guidance     , propulsion ) ,
                forces      ( env        , propulsion   , rcs          , aerodynamics , tvc ) ,
                time        ()
            {
            ("default_data") link_ins_input();
            ("default_data") link_control_input();

            ("default_data") guidance.default_data();
            ("initialization") kinematics.initialize();
            ("initialization") newton.initialize();
            ("initialization") env.initialize();
            ("initialization") aerodynamics.initialize();
            ("initialization") euler.initialize();
            ("initialization") gpsr.initialize(0.001);
            ("initialization") guidance.initialize();
            ("initialization") control.initialize();
            ("initialization") ins.initialize();
            ("initialization") tvc.initialize();
            ("initialization") rcs.initialize();
            ("initialization") propulsion.initialize();
            ("initialization") forces.initialize();

            (0.001, "scheduled") time.dm_time();
            //(0.001, "scheduled") gpsr.update_markov(0.001);
            (0.001, "scheduled") kinematics.propagate(0.001);
	        (0.001, "scheduled") env.propagate(0.001);
            (0.001, "scheduled") propulsion.propagate(0.001);
            (0.001, "scheduled") aerodynamics.calculate_aero(0.001);
            // (0.1, "scheduled") gpsr.get_quadriga();
            // (0.1, "scheduled") gpsr.filter_extrapolation(0.1);
            // (0.1, "scheduled") gpsr.measure();
            (0.05, "scheduled") ins.get_gyro().propagate_error(0.05);
            (0.05, "scheduled") ins.get_accelerometer().propagate_error(0.05);
            (0.05, "scheduled") ins.update(0.05);
            // (0.001, "scheduled") guidance.guidance(0.001);
            (0.05, "scheduled") control.control(0.05);
            (0.001, "scheduled") tvc.actuate(0.001);
            (0.05, "scheduled") rcs.actuate();
            (0.001, "scheduled") rcs.rcs_schmitt_thrust();
            (0.001, "scheduled") forces.collect_forces_and_propagate();
            (0.001, "scheduled") newton.propagate(0.001);
            (0.001, "scheduled") euler.propagate(0.001);

            (0.001, "logging") kinematics.update_diagnostic_attributes(0.001);
            (0.001, "logging") env.update_diagnostic_attributes(0.001);
            (0.001, "logging") newton.update_diagnostic_attributes(0.001);
            (0.001, "logging") euler.update_diagnostic_attributes(0.001);

        }
};

GPS_SAT_SimObject gps_sats;
Rocket_SimObject rkt;

void create_connections() {
    rkt.gps_sats = &gps_sats.sats;
}
