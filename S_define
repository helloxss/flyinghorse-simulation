/************************TRICK HEADER*************************
PURPOSE:
    (Lists out the other object files that are not included from C++ headers)
LIBRARY DEPENDENCIES:
(
)
*************************************************************/

#include "sim_objects/default_trick_sys.sm"
##include "Rocket/include/Earth.hh"
##include "Rocket/include/GPS_satellites.hh"
##include "Rocket/include/GPS_receiver.hh"
##include "Rocket/include/Newton.hh"
##include "Rocket/include/Euler.hh"
##include "Rocket/include/Ins.hh"

class GPS_SAT_SimObject : public Trick::SimObject {
    public:
        GPS_Satellites sats;

        GPS_SAT_SimObject() {
            ("default_data") sats.default_data();
            ("initialization") sats.initialize();
            (0.001, "scheduled") sats.propagate_sv();       
        }
};

class Rocket_SimObject : public Trick::SimObject {
    public:
        GPS_Satellites* gps_sats;

        Environment env;
        Newton newton;
        _Euler_ euler;
        
        Kinematics kinematics;
        Propulsion pls;
        Forces force;

        GPS_Receiver gpsr;
        INS ins;

        Rocket_SimObject() {
            ("default_data") gpsr.default_data();

            ("initialization") newton.initialize(&kinematics, &euler, &env, &pls, &force);
            ("initialization") kinematics.initialize(&newton, &env, &euler);
            ("initialization") gpsr.initialize(&newton, &euler, gps_sats, &ins, 0.001);
            ("initialization") ins.initialize(&newton, &euler, &env, &kinematics, &gpsr);
            
            (0.001, "scheduled") newton.calculate(0.001);
            (0.001, "scheduled") kinematics.calculate(0.001);

            (0.001, "scheduled") gpsr.get_quadriga();
            (0.001, "scheduled") gpsr.filter_extrapolation(0.001);
            (0.001, "scheduled") gpsr.measure();


            (0.001, "scheduled") ins.ins_accl();
            (0.001, "scheduled") ins.ins_gyro(0.001);
            (0.001, "scheduled") ins.ins_grav();
            (0.001, "scheduled") ins.update(0.001);

        }
};

GPS_SAT_SimObject gps_sats;
Rocket_SimObject rkt;

void create_connections() {
    rkt.gps_sats = &gps_sats.sats;
}
