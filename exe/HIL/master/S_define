/************************TRICK HEADER*************************
PURPOSE:
    (Lists out the other object files that are not included from C++ headers)
LIBRARY DEPENDENCIES:
(
)
*************************************************************/

#include "sim_objects/default_trick_sys.sm"
##include "Tvc.hh"
##include "Force.hh"
##include "Propulsion.hh"
##include "Aerodynamics.hh"
##include "Time_management.hh"
##include "GPS_constellation.hh"
##include "Rocket_Flight_DM.hh"

##include "cad_utility.hh"
##include "datadeck.hh"
##include "schmitt_trigger.hh"

##include "env/atmosphere.hh"
##include "env/atmosphere_nasa2002.hh"
##include "env/atmosphere76.hh"
##include "env/atmosphere_weatherdeck.hh"

##include "env/wind.hh"
##include "env/wind_no.hh"
##include "env/wind_tabular.hh"
##include "env/wind_constant.hh"

##include "gyro/gyro.hh"
##include "gyro/gyro_ideal.hh"
##include "gyro/gyro_rocket6g.hh"

##include "accel/accelerometer.hh"
##include "accel/accelerometer_ideal.hh"
##include "accel/accelerometer_rocket6g.hh"
##include "sdt/SDT_NONIDEAL.hh"
##include "sdt/SDT_IDEAL.hh"
##include "sdt/SDT.hh"

##include "time_utility.hh"

##include "math_utility.hh"
##include "integrate.hh"
##include "stochastic.hh"
##include "matrix/utility.hh"

##include "transceiver.hh"
##include "Dataflow_Binding.hh"

##include  "icf_trx_ctrl.h"
##include  "DM_FSW_Interface.hh"
##include "ExternalSourceClock.hh"

class Rocket_SimObject : public Trick::SimObject {
    public:
        double int_step = 0.001;
        Rocket_Flight_DM dynamics;
        Environment env;
        Forces forces;
        AeroDynamics aerodynamics;
        Propulsion propulsion;
        sensor::Gyro *gyro;
        sensor::Accelerometer *accelerometer;
        SDT *sdt;
        TVC tvc;
        ExternalSourceClock ext_clk;

        time_management *time = time_management::get_instance();
        GPS_constellation gps_con;

        refactor_uplink_packet_t dm_ins_db;
        DM_SAVE_decl();
        struct icf_ctrlblk_t   icf_ctrl;

        Transceiver transceiver;

        void link(){

            sdt->grab_WBICB            = LINK( *gyro   , get_computed_WBIB);
            sdt->grab_FSPCB            = LINK( *accelerometer   , get_computed_FSPB);
            sdt->grab_CONING           = LINK( dynamics , get_CONING);
            sdt->grab_GHIGH            = LINK( *gyro   , get_HIGH);
            sdt->grab_GLOW             = LINK( *gyro   , get_LOW);
            sdt->grab_AHIGH            = LINK( *accelerometer   , get_HIGH);
            sdt->grab_ALOW             = LINK( *accelerometer   , get_LOW);

            tvc.grab_pdynmc            = LINK( env, get_pdynmc);
            tvc.grab_xcg               = LINK( propulsion, get_xcg);
            tvc.grab_thrust            = LINK( propulsion, get_thrust);
            tvc.grab_alphax            = LINK( dynamics, get_alphax);
            tvc.grab_TBI               = LINK( dynamics, get_TBI);
            tvc.grab_SBII              = LINK( dynamics, get_SBII);

            aerodynamics.grab_alppx    = LINK( dynamics, get_alppx);
            aerodynamics.grab_phipx    = LINK( dynamics, get_phipx);
            aerodynamics.grab_alphax   = LINK( dynamics, get_alphax);
            aerodynamics.grab_betax    = LINK( dynamics, get_betax);
            aerodynamics.grab_rho      = LINK( env, get_rho);
            aerodynamics.grab_vmach    = LINK( env, get_vmach);
            aerodynamics.grab_pdynmc   = LINK( env, get_pdynmc);
            aerodynamics.grab_tempk    = LINK( env, get_tempk);
            aerodynamics.grab_dvba     = LINK( env, get_dvba);
            aerodynamics.grab_ppx      = LINK( dynamics, get_ppx);
            aerodynamics.grab_qqx      = LINK( dynamics, get_qqx);
            aerodynamics.grab_rrx      = LINK( dynamics, get_rrx);
            aerodynamics.grab_WBIB     = LINK( dynamics, get_WBIB);
            aerodynamics.grab_alt      = LINK( dynamics, get_alt);
            aerodynamics.grab_xcg      = LINK( propulsion, get_xcg);
            aerodynamics.grab_liftoff  = LINK( dynamics, get_liftoff);

            env.grab_dvbe              = LINK( dynamics, get_dvbe);
            env.grab_SBII              = LINK( dynamics, get_SBII);
            env.grab_VBED              = LINK( dynamics, get_VBED);
            env.grab_alt               = LINK( dynamics, get_alt);
            env.grab_TGI               = LINK( dynamics, get_TGI);
            env.grab_TBI               = LINK( dynamics, get_TBI);
            env.grab_TBD               = LINK( dynamics, get_TBD);
            env.grab_alppx             = LINK( dynamics, get_alppx);
            env.grab_phipx             = LINK( dynamics, get_phipx);
            env.grab_VBEE              = LINK( dynamics, get_VBEE);
            env.grab_TDE               = LINK( dynamics, get_TDE);

            forces.grab_pdynmc         = LINK( env, get_pdynmc);
            forces.grab_thrust         = LINK( propulsion, get_thrust);
            forces.grab_refa           = LINK( aerodynamics, get_refa);
            forces.grab_refd           = LINK( aerodynamics, get_refd);
            forces.grab_cy             = LINK( aerodynamics, get_cy);
            forces.grab_cll            = LINK( aerodynamics, get_cll);
            forces.grab_clm            = LINK( aerodynamics, get_clm);
            forces.grab_cln            = LINK( aerodynamics, get_cln);
            forces.grab_cx             = LINK( aerodynamics, get_cx);
            forces.grab_cz             = LINK( aerodynamics, get_cz);
            forces.grab_FPB            = LINK( tvc, get_FPB);
            forces.grab_FMPB           = LINK( tvc, get_FMPB);
            forces.grab_Q_TVC          = LINK( tvc, get_Q_TVC);
            forces.grab_lx             = LINK( tvc, get_lx);
            forces.grab_GRAVG          = LINK( env, get_GRAVG);
            forces.grab_vmass          = LINK( propulsion, get_vmass);
            forces.grab_TBI            = LINK( dynamics, get_TBI);
            forces.grab_IBBB           = LINK( propulsion, get_IBBB);
            forces.grab_WBIBD          = LINK( dynamics, get_WBIBD);
            forces.grab_WBIB           = LINK( dynamics, get_WBIB);
            forces.grab_ABII           = LINK( dynamics, get_ABII);
            forces.grab_xcg_0          = LINK( propulsion, get_xcg_0);
            forces.grab_xcp            = LINK( aerodynamics, get_xcp);
            forces.grab_xcg            = LINK( propulsion, get_xcg);
            forces.grab_oxidizer_mass  = LINK( propulsion, get_oxidizer_mass);
            forces.grab_ang_slosh_theta = LINK( dynamics, get_ang_slosh_theta);
            forces.grab_ang_slosh_psi = LINK( dynamics, get_ang_slosh_psi);
            forces.grab_dang_slosh_theta = LINK( dynamics, get_dang_slosh_theta);
            forces.grab_dang_slosh_psi = LINK( dynamics, get_dang_slosh_psi);
            forces.grab_NEXT_ACC = LINK( dynamics, get_NEXT_ACC);
            forces.grab_liftoff = LINK(dynamics, get_liftoff);

            gps_con.grab_SBEE          = LINK( dynamics, get_SBEE);
            gps_con.grab_TEI           = LINK( env, get_TEI);
            gps_con.grab_phibdx        = LINK( dynamics, get_phibdx);
            gps_con.grab_thtbdx        = LINK( dynamics, get_thtbdx);
            gps_con.grab_psibdx        = LINK( dynamics, get_psibdx);
            gps_con.grab_TBI           = LINK( dynamics, get_TBI);

            dynamics.grab_TEI          = LINK( env, get_TEI);
            dynamics.grab_dvba         = LINK( env, get_dvba);
            dynamics.grab_VAED         = LINK( env, get_VAED);
            dynamics.grab_FMB          = LINK( forces, get_FMB);
            dynamics.grab_IBBB         = LINK( propulsion, get_IBBB);
            dynamics.grab_vmass        = LINK( propulsion, get_vmass);
            dynamics.grab_xcg_0        = LINK( propulsion, get_xcg_0);
            dynamics.grab_FAPB         = LINK( forces, get_FAPB);
            dynamics.grab_FAP          = LINK( forces, get_FAP);
            dynamics.grab_GRAVG        = LINK( env, get_GRAVG);
            dynamics.grab_grav         = LINK( env, get_grav);
            dynamics.grab_ddrP_1       = LINK( forces, get_ddrP_1);
            dynamics.grab_ddang_1      = LINK( forces, get_ddang_1);
            dynamics.grab_thrust       = LINK( propulsion, get_thrust);
            dynamics.grab_rhoC_1       = LINK( forces, get_rhoC_1);
            dynamics.grab_ddrhoC_1     = LINK( forces, get_ddrhoC_1);
            dynamics.collect_forces_and_propagate = LINK( forces, collect_forces_and_propagate);
            dynamics.grab_ddang_slosh_theta = LINK( forces, get_ddang_slosh_theta);
            dynamics.grab_ddang_slosh_psi = LINK( forces, get_ddang_slosh_psi);

            accelerometer->grab_FSPB   = LINK( dynamics, get_FSPB);

            gyro->grab_WBIB            = LINK( dynamics, get_WBIB);
            gyro->grab_FSPB            = LINK( dynamics, get_FSPB);

            propulsion.grab_press      = LINK( env, get_press);


        };

        void egse_uplink_packet_enqueue(struct icf_ctrlblk_t *C) {
            icf_tx_enqueue(C, EGSE_FLIGHT_COMPUTER_SW_QIDX, &dm_ins_db, sizeof(refactor_uplink_packet_t));
        };

        void egse_downlink_rx_job_group(struct icf_ctrlblk_t *C) {
            /* TVC_No1 Command*/
            icf_rx_ctrl_job(C, HW_PORT0, sizeof(struct can_frame));
            /* TVC_No2 Command*/
            icf_rx_ctrl_job(C, HW_PORT0, sizeof(struct can_frame));
        };


        Rocket_SimObject() 
            :   env         (  ) ,
                propulsion  (  )      ,
                aerodynamics( propulsion ) ,
                tvc         (  ) ,
                forces      ( propulsion   , tvc ) ,
                gps_con     (  ),
                dynamics    (  ),
                ext_clk     (  )
            {
            ("initialization") link();
            ("initialization") aerodynamics.initialize();
            ("initialization") dynamics.initialize();
            ("initialization") env.initialize();
            ("initialization") tvc.initialize();
            ("initialization") propulsion.initialize();
            ("initialization") forces.initialize();
            ("initialization") gps_con.initialize();
            ("initialization") icf_ctrlblk_init(&icf_ctrl, ICF_SYSTEM_TYPE_EGSE);
            P1 (int_step, "scheduled") time->dm_time();
	        P1 (int_step, "scheduled") env.propagate(int_step);
            P1 (int_step, "scheduled") propulsion.propagate(int_step);
            P1 (int_step, "scheduled") aerodynamics.calculate_aero(int_step);
            P1 (0.05, "scheduled") gps_con.compute();
            P1 (0.005, "scheduled") gyro->propagate_error(0.005);
            P1 (0.005, "scheduled") accelerometer->propagate_error(0.005, &icf_ctrl);
            P1 (0.005, "scheduled") sdt->compute(0.005);

            P2 (0.050, "scheduled") DM_SaveOutData(dm_ins_db);
            P2 (0.050, "scheduled") egse_uplink_packet_enqueue(&icf_ctrl);
            P2 (0.050, "scheduled") icf_tx_ctrl_job(&icf_ctrl, EGSE_FLIGHT_COMPUTER_SW_QIDX);
            P2 (0.005, "scheduled") icf_tx_ctrl_job(&icf_ctrl, EGSE_IMU01_SW_QIDX);
            P2 (0.001, "scheduled") icf_tx_ctrl_job(&icf_ctrl, EGSE_RATETBL_X_SW_QIDX);


            P3 (0.005, "scheduled") egse_downlink_rx_job_group(&icf_ctrl);
            P3 (0.001, "scheduled") tvc.actuate(0.001,&icf_ctrl);
            P3 (int_step, "scheduled") dynamics.propagate(int_step);

            (0.001, "logging") env.update_diagnostic_attributes(0.001);
            (0.001, "logging") dynamics.update_diagnostic_attributes(0.001);
            (5, "scheduled") icf_heartbeat();
            ("shutdown") icf_ctrlblk_deinit(&icf_ctrl, ICF_SYSTEM_TYPE_EGSE);

        }
};

Rocket_SimObject rkt;

void create_connections() {
}

