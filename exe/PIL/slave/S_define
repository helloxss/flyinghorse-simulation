/************************TRICK HEADER*************************
PURPOSE:
    (Lists out the other object files that are not included from C++ headers)
LIBRARY DEPENDENCIES:
(
)
*************************************************************/

#include "sim_objects/default_trick_sys.sm"
##include "Earth.hh"
##include "GPS_satellites.hh"
##include "GPS_receiver.hh"
##include "Time_management.hh"

##include "Ins.hh"
##include "RcsFc.hh"
##include "Control.hh"
##include "Guidance.hh"

##include "cad_utility.hh"
##include "datadeck.hh"
##include "schmitt_trigger.hh"

##include "env/atmosphere.hh"
##include "env/atmosphere_nasa2002.hh"
##include "env/atmosphere76.hh"
##include "env/atmosphere_weatherdeck.hh"

##include "env/wind.hh"
##include "env/wind_no.hh"
##include "env/wind_tabular.hh"
##include "env/wind_constant.hh"

##include "gyro/gyro.hh"
##include "gyro/gyro_ideal.hh"
##include "gyro/gyro_rocket6g.hh"

##include "accel/accelerometer.hh"
##include "accel/accelerometer_ideal.hh"
##include "accel/accelerometer_rocket6g.hh"

##include "math_utility.hh"
##include "integrate.hh"
##include "stochastic.hh"
##include "matrix/utility.hh"

##include "transceiver.hh"

class FlightComputer_SimObject : public Trick::SimObject {
    public:

        double ltg_thrust, no_thrust, clear_gps;

        INS ins;

        Control control;
        Guidance guidance;

        RCS_FC rcs_fc;

        time_management time;

        Transceiver transceiver;

        void setup_export(){
            transceiver.register_for_transmit(EXPORT(control, get_delrcx));
            transceiver.register_for_transmit(EXPORT(control, get_delecx));
            transceiver.register_for_transmit(EXPORT(rcs_fc, isEnabled));
            transceiver.register_for_transmit(EXPORT(rcs_fc, get_rcs_mode));
            transceiver.register_for_transmit(EXPORT(rcs_fc, get_e_roll));
            transceiver.register_for_transmit(EXPORT(rcs_fc, get_e_pitch));
            transceiver.register_for_transmit(EXPORT(rcs_fc, get_e_yaw));
            transceiver.register_for_transmit(EXPORT(ins, get_SBIIC));
            transceiver.register_for_transmit(EXPORT(ins, get_VBIIC));
            transceiver.register_for_transmit(EXPORT(ins, get_WBICI));

            /* XXX */
            transceiver.register_for_transmit("ins", "clear_gps_flag", [this](){ return this->clear_gps; });
            transceiver.register_for_transmit("guidance", "no_thrust", [this](){ return this->no_thrust; });
            transceiver.register_for_transmit("guidance", "ltg_thrust", [this](){ return this->ltg_thrust; });
        };

        void link(){
            control.grab_dvbec = LINK(ins, get_dvbec);
            control.grab_thtvdcx = LINK(ins, get_thtvdcx);
            control.grab_thtbdcx = LINK(ins, get_thtbdcx);

            guidance.grab_TBIC   = LINK(ins, get_TBIC);

            guidance.grab_VBIIC  = LINK(ins, get_VBIIC);
            guidance.grab_SBIIC  = LINK(ins, get_SBIIC);

            rcs_fc.grab_alphacx = LINK(ins, get_alphacx);
            rcs_fc.grab_betacx = LINK(ins, get_betacx);

            rcs_fc.grab_thtbdcx = LINK(ins, get_thtbdcx);
            rcs_fc.grab_psibdcx = LINK(ins, get_psibdcx);
            rcs_fc.grab_phibdcx = LINK(ins, get_phibdcx);

            rcs_fc.grab_UTBC = LINK(guidance, get_UTBC);
            rcs_fc.grab_alphacomx = LINK(guidance, get_alphacomx);
            rcs_fc.grab_betacomx  = LINK(guidance, get_betacomx);

            /* remote */
            control.grab_mprop              = transceiver(IMPORT(propulsion     , get_mprop));
            control.grab_dvbe               = transceiver(IMPORT(newton         , get_dvbe));
            control.grab_gymax              = transceiver(IMPORT(aerodynamics   , get_gymax));
            control.grab_dyb                = transceiver(IMPORT(aerodynamics   , get_dyb));
            control.grab_dnb                = transceiver(IMPORT(aerodynamics   , get_dnb));
            control.grab_dnr                = transceiver(IMPORT(aerodynamics   , get_dnr));
            control.grab_dndr               = transceiver(IMPORT(aerodynamics   , get_dndr));
            control.grab_dla                = transceiver(IMPORT(aerodynamics   , get_dla));
            control.grab_dma                = transceiver(IMPORT(aerodynamics   , get_dma));
            control.grab_dmq                = transceiver(IMPORT(aerodynamics   , get_dmq));
            control.grab_dmde               = transceiver(IMPORT(aerodynamics   , get_dmde));
            control.grab_dnd                = transceiver(IMPORT(aerodynamics   , get_dnd));
            control.grab_dlde               = transceiver(IMPORT(aerodynamics   , get_dlde));
            control.grab_pdynmc             = transceiver(IMPORT(environment    , get_pdynmc));
            control.grab_qqcx               = transceiver(IMPORT(*gyro          , get_qqcx));
            control.grab_rrcx               = transceiver(IMPORT(*gryo          , get_rrcx));
            control.grab_FSPCB              = transceiver(IMPORT(*accelerometer , get_computed_FSPB));
            ins.grab_computed_WBIB          = transceiver(IMPORT(*gyro          , get_computed_WBIB));
            ins.grab_error_of_computed_WBIB = transceiver(IMPORT(*gyro          , get_error_of_computed_WBIB));
            ins.grab_computed_FSPB          = transceiver(IMPORT(*accelerometer , get_computed_FSPB));
            ins.grab_error_of_computed_FSPB = transceiver(IMPORT(*accelerometer , get_error_of_computed_FSPB));
            ins.grab_SBII                   = transceiver(IMPORT(newton         , get_SBII));
            ins.grab_VBII                   = transceiver(IMPORT(newton         , get_VBII));
            ins.grab_dbi                    = transceiver(IMPORT(newton         , get_dbi));
            ins.grab_TBI                    = transceiver(IMPORT(kinematics     , get_TBI));
            ins.grab_SXH                    = transceiver(IMPORT(gpsr           , get_SXH));
            ins.grab_VXH                    = transceiver(IMPORT(gpsr           , get_VXH));
            ins.grab_gps_update             = transceiver(IMPORT(gpsr           , get_gps_update));
            ins.grab_SBEE                   = transceiver(IMPORT(newton         , get_SBEE));
            ins.grab_VBEE                   = transceiver(IMPORT(newton         , get_VBEE));
            ins.grab_phibdx                 = transceiver(IMPORT(kinematics     , get_phibdx));
            ins.grab_thtbdx                 = transceiver(IMPORT(kinematics     , get_thtbdx));
            ins.grab_psibdx                 = transceiver(IMPORT(kinematics     , get_psibdx));
            guidance.grab_mprop             = transceiver(IMPORT(propulsion     , get_mprop));
            guidance.grab_dbi               = transceiver(IMPORT(newton         , get_dbi));
            guidance.grab_dvbi              = transceiver(IMPORT(newton         , get_dvbi));
            guidance.grab_thtvdx            = transceiver(IMPORT(newton         , get_thtvdx));
            guidance.grab_fmassr            = transceiver(IMPORT(propulsion     , get_fmassr));
            guidance.grab_FSPCB             = transceiver(IMPORT(*accelerometer , get_computed_FSPB));
            rcs_fc.grab_qqcx                = transceiver(IMPORT(*gyro          , get_qqcx));
            rcs_fc.grab_ppcx                = transceiver(IMPORT(*gyro          , get_ppcx));
            rcs_fc.grab_rrcx                = transceiver(IMPORT(*gyro          , get_rrcx));

            /* XXX */
            ins.clear_gps_flag  = [this](){ this->clear_gps = 1; };
            guidance.set_no_thrust  = [this](){ this->no_thrust = 1; };
            guidance.set_ltg_thrust = [this](){ this->ltg_thrust = 1; };
        };

        void clear_flag(){
            this->clear_gps = 0;
            this->no_thrust = 0;
            this->ltg_thrust = 0;
        }

        FlightComputer_SimObject() : ins(time){

            ("default_data") clear_flag();
            ("default_data") guidance.default_data();

            ("initialization") transceiver.initialize_connection("FLIGHT_COMPUTER");
            ("initialization") setup_export();
            ("initialization") link();
            ("initialization") guidance.initialize();
            ("initialization") control.initialize();
            ("initialization") ins.initialize(time);
            ("initialization") rcs_fc.initialize();

            P1 (0.001, "scheduled") time.dm_time();

            P2 (0.05, "scheduled") transceiver.receive();

            P2 (0.05, "scheduled") clear_flag();

            P2 (0.005, "scheduled") ins.update(0.005);
            // P2 (0.001, "scheduled") guidance.guidance(0.001);
            P2 (0.05, "scheduled") control.control(0.05);
            P2 (0.05, "scheduled") rcs_fc.actuate();

            P2 (0.05, "scheduled") transceiver.transmit();
;
        }
};

FlightComputer_SimObject fc;
