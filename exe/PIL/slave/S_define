/************************TRICK HEADER*************************
PURPOSE:
    (Lists out the other object files that are not included from C++ headers)
LIBRARY DEPENDENCIES:
(
)
*************************************************************/

#include "sim_objects/default_trick_sys.sm"

##include "Time_management.hh"

##include "Ins.hh"
##include "Control.hh"
##include "GPS.hh"
##include "cad_utility.hh"
##include "datadeck.hh"
##include "time_utility.hh"
##include "math_utility.hh"
##include "integrate.hh"
##include "stochastic.hh"
##include "matrix/utility.hh"
##include "Dataflow_Binding.hh"

##include "transceiver.hh"


class FlightComputer_SimObject : public Trick::SimObject {
    public:

        double ltg_thrust, no_thrust, clear_gps;

        INS ins;

        Control control;

        time_management *time = time_management::get_instance();

        Transceiver transceiver;

        GPS_FSW gps;

        refactor_dm_to_ins_t dm_ins_db;
        refactor_ins_to_ctl_t ins_ctl_db;
        refactor_ctl_to_tvc_t ctl_tvc_db;

        GPS_LINK_decl();
        INS_LINK_decl();
        CONTROL_LINK_decl();

        INS_SAVE_decl();
        CONTROL_SAVE_decl();

        refactor_ctl_to_tvc_t do_downlink(){ return ctl_tvc_db; }

        std::function<refactor_dm_to_ins_t()> grab_DM;
        void load_input(){ dm_ins_db = grab_DM(); }

        void setup_export(){
            transceiver.register_for_transmit(EXPORT(*this, do_downlink));

            /* XXX */
            transceiver.register_for_transmit("ins", "clear_gps_flag", [this](){ return this->clear_gps; });
        };

        void link(){
            grab_DM = transceiver(IMPORT(*this, do_uplink));

            GPSLinkInData(gps, dm_ins_db, ins);
            INSLinkInData(ins, dm_ins_db, gps);
            ControlLinkInData(control, ins_ctl_db);

            /* XXX */
            ins.clear_gps_flag  = [this](){ this->clear_gps = 1; };
        };

        void clear_flag(){
            this->clear_gps = 0;
        }

        FlightComputer_SimObject() : ins(),
                                     gps()
        {

            ("default_data") clear_flag();
            // ("default_data") guidance.default_data();

            ("initialization") transceiver.initialize_connection("FLIGHT_COMPUTER");
            ("initialization") setup_export();
            ("initialization") link();
            ("initialization") gps.initialize(0.05);
            ("initialization") control.initialize();
            ("initialization") ins.initialize();

            P1 (0.001, "scheduled") time->dm_time();

            P2 (0.05, "scheduled") transceiver.receive();
            P2 (0.05, "scheduled") load_input();

            P2 (0.01, "scheduled") clear_flag();

            P2 (0.05, "scheduled") gps.filter_extrapolation(0.05);
            P2 (0.05, "scheduled") gps.measure(0.05);

            P2 (0.05, "scheduled") ins.update(0.05);
            P2 (0.05, "scheduled") INS_SaveOutData(ins, dm_ins_db, ins_ctl_db);
            P2 (0.05, "scheduled") control.control(0.05);
            P2 (0.05, "scheduled") Control_SaveOutData(control, ctl_tvc_db);

            P2 (0.05, "scheduled") transceiver.transmit();
;
        }
};

FlightComputer_SimObject fc;
