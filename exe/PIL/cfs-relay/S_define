/************************TRICK HEADER*************************
PURPOSE:
    ()
LIBRARY DEPENDENCIES:
(
)
*************************************************************/

#include "sim_objects/default_trick_sys.sm"
##include "rocket/Earth.hh"
##include "rocket/GPS_satellites.hh"
##include "rocket/GPS_receiver.hh"
##include "rocket/Newton.hh"
##include "rocket/Euler.hh"
##include "rocket/Ins.hh"
##include "rocket/Tvc.hh"
##include "rocket/Rcs.hh"
##include "rocket/RcsFc.hh"
##include "rocket/Control.hh"
##include "rocket/Guidance.hh"
##include "rocket/Force.hh"
##include "rocket/Propulsion.hh"
##include "rocket/Aerodynamics.hh"
##include "rocket/Time_management.hh"

##include "cad/utility.hh"
##include "cad/datadeck.hh"
##include "cad/schmitt_trigger.hh"

##include "cad/env/atmosphere.hh"
##include "cad/env/atmosphere_nasa2002.hh"
##include "cad/env/atmosphere76.hh"
##include "cad/env/atmosphere_weatherdeck.hh"

##include "cad/env/wind.hh"
##include "cad/env/wind_no.hh"
##include "cad/env/wind_tabular.hh"
##include "cad/env/wind_constant.hh"

##include "sensor/gyro/gyro.hh"
##include "sensor/gyro/gyro_ideal.hh"
##include "sensor/gyro/gyro_rocket6g.hh"

##include "sensor/accel/accelerometer.hh"
##include "sensor/accel/accelerometer_ideal.hh"
##include "sensor/accel/accelerometer_rocket6g.hh"

##include "math/utility.hh"
##include "math/integrate.hh"
##include "math/stochastic.hh"
##include "math/matrix/utility.hh"

##include "aux/transceiver.hh"
##include "aux/ecio.hh"

class Relay_SimObject : public Trick::SimObject {
    public:
        Transceiver transceiver;
        Ecio ecio;

        void setup_export(){
            transceiver.register_for_transmit(ECIO_EXPORT(control, get_delrcx));
            transceiver.register_for_transmit(ECIO_EXPORT(control, get_delecx));
            transceiver.register_for_transmit(ECIO_EXPORT(rcs_fc, isEnabled));
            transceiver.register_for_transmit(ECIO_EXPORT(rcs_fc, get_rcs_mode));
            transceiver.register_for_transmit(ECIO_EXPORT(rcs_fc, get_e_roll));
            transceiver.register_for_transmit(ECIO_EXPORT(rcs_fc, get_e_pitch));
            transceiver.register_for_transmit(ECIO_EXPORT(rcs_fc, get_e_yaw));
            transceiver.register_for_transmit(ECIO_EXPORT(ins, get_SBIIC));
            transceiver.register_for_transmit(ECIO_EXPORT(ins, get_VBIIC));
            transceiver.register_for_transmit(ECIO_EXPORT(ins, get_WBICI));

            /* XXX */
            transceiver.register_for_transmit("ins", "clear_gps_flag", [this](){ return this->ecio.get_clear_gps_flag(); });
            transceiver.register_for_transmit("guidance", "no_thrust", [this](){ return this->ecio.get_no_thrust_flag(); });
            transceiver.register_for_transmit("guidance", "ltg_thrust", [this](){ return this->ecio.get_ltg_thrust_flag(); });
        };

        void link(){
            ecio.grab_mprop                  = transceiver(IMPORT(propulsion     , get_mprop));
            ecio.grab_dvbe                   = transceiver(IMPORT(newton         , get_dvbe));
            ecio.grab_gymax                  = transceiver(IMPORT(aerodynamics   , get_gymax));
            ecio.grab_dyb                    = transceiver(IMPORT(aerodynamics   , get_dyb));
            ecio.grab_dnb                    = transceiver(IMPORT(aerodynamics   , get_dnb));
            ecio.grab_dnr                    = transceiver(IMPORT(aerodynamics   , get_dnr));
            ecio.grab_dndr                   = transceiver(IMPORT(aerodynamics   , get_dndr));
            ecio.grab_dla                    = transceiver(IMPORT(aerodynamics   , get_dla));
            ecio.grab_dma                    = transceiver(IMPORT(aerodynamics   , get_dma));
            ecio.grab_dmq                    = transceiver(IMPORT(aerodynamics   , get_dmq));
            ecio.grab_dmde                   = transceiver(IMPORT(aerodynamics   , get_dmde));
            ecio.grab_dnd                    = transceiver(IMPORT(aerodynamics   , get_dnd));
            ecio.grab_dlde                   = transceiver(IMPORT(aerodynamics   , get_dlde));
            ecio.grab_pdynmc                 = transceiver(IMPORT(environment    , get_pdynmc));
            ecio.grab_computed_WBIB          = transceiver(IMPORT(*gyro          , get_computed_WBIB));
            ecio.grab_error_of_computed_WBIB = transceiver(IMPORT(*gyro          , get_error_of_computed_WBIB));
            ecio.grab_computed_FSPB          = transceiver(IMPORT(*accelerometer , get_computed_FSPB));
            ecio.grab_error_of_computed_FSPB = transceiver(IMPORT(*accelerometer , get_error_of_computed_FSPB));
            ecio.grab_SBII                   = transceiver(IMPORT(newton         , get_SBII));
            ecio.grab_VBII                   = transceiver(IMPORT(newton         , get_VBII));
            ecio.grab_TBI                    = transceiver(IMPORT(kinematics     , get_TBI));
            ecio.grab_SXH                    = transceiver(IMPORT(gpsr           , get_SXH));
            ecio.grab_VXH                    = transceiver(IMPORT(gpsr           , get_VXH));
            ecio.grab_gps_update             = transceiver(IMPORT(gpsr           , get_gps_update));
            ecio.grab_mprop                  = transceiver(IMPORT(propulsion     , get_mprop));
            ecio.grab_dbi                    = transceiver(IMPORT(newton         , get_dbi));
            ecio.grab_dvbi                   = transceiver(IMPORT(newton         , get_dvbi));
            ecio.grab_thtvdx                 = transceiver(IMPORT(newton         , get_thtvdx));
            ecio.grab_fmassr                 = transceiver(IMPORT(propulsion     , get_fmassr));
            ecio.grab_qqcx                   = transceiver(IMPORT(*gyro          , get_qqcx));
            ecio.grab_ppcx                   = transceiver(IMPORT(*gyro          , get_ppcx));
            ecio.grab_rrcx                   = transceiver(IMPORT(*gyro          , get_rrcx));
        };

        Relay_SimObject(){

            ("initialization") transceiver.initialize_connection("RELAY");
            ("initialization") setup_export();
            ("initialization") link();
            ("initialization") ecio.send_pps();

            P2 (0.05, "scheduled") transceiver.receive();
            
            P2 (0.05, "scheduled") ecio.send_pps();
            P2 (0.05, "scheduled") ecio.prepare_ethercat_packet();
            //P2 (0.05, "scheduled") ecio.wait_ready();
            P2 (0.05, "scheduled") ecio.receive_fc_data();

            P2 (0.05, "scheduled") transceiver.transmit();
;
        }
};

Relay_SimObject relay;
