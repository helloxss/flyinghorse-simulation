/************************TRICK HEADER*************************
PURPOSE:
    (Lists out the other object files that are not included from C++ headers)
LIBRARY DEPENDENCIES:
(
)
*************************************************************/

#include "sim_objects/default_trick_sys.sm"
// ##include "rocket/Earth.hh"
// ##include "rocket/GPS_satellites.hh"
##include "rocket/GPS_receiver.hh"
##include "rocket/Newton.hh"
##include "rocket/Euler.hh"
##include "rocket/Tvc.hh"
##include "rocket/Rcs.hh"
##include "rocket/Force.hh"
##include "rocket/Propulsion.hh"
##include "rocket/Aerodynamics.hh"
##include "rocket/Time_management.hh"
##include "rocket/GPS_constellation.hh"

##include "cad/utility.hh"
##include "cad/datadeck.hh"
##include "cad/schmitt_trigger.hh"

##include "cad/env/atmosphere.hh"
##include "cad/env/atmosphere_nasa2002.hh"
##include "cad/env/atmosphere76.hh"
##include "cad/env/atmosphere_weatherdeck.hh"

##include "cad/env/wind.hh"
##include "cad/env/wind_no.hh"
##include "cad/env/wind_tabular.hh"
##include "cad/env/wind_constant.hh"

##include "sensor/gyro/gyro.hh"
##include "sensor/gyro/gyro_ideal.hh"
##include "sensor/gyro/gyro_rocket6g.hh"

##include "sensor/accel/accelerometer.hh"
##include "sensor/accel/accelerometer_ideal.hh"
##include "sensor/accel/accelerometer_rocket6g.hh"

##include "math/utility.hh"
##include "math/integrate.hh"
##include "math/stochastic.hh"
##include "math/matrix/utility.hh"

##include "aux/transceiver.hh"

// class GPS_SAT_SimObject : public Trick::SimObject {
//     public:
//         GPS_Satellites sats;

//         GPS_SAT_SimObject() {
//             ("default_data") sats.default_data();
//             ("initialization") sats.initialize();
//             (0.001, "scheduled") sats.propagate_sv();
//         }
// };

class Rocket_SimObject : public Trick::SimObject {
    public:
        // GPS_Satellites* gps_sats;

        Environment env;
        Newton newton;
        _Euler_ euler;

        Kinematics kinematics;
        Forces forces;

        AeroDynamics aerodynamics;
        Propulsion propulsion;

        GPS_Receiver gpsr;
        sensor::Gyro *gyro;
        sensor::Accelerometer *accelerometer;

        TVC tvc;
        RCS rcs;

        time_management time;
        GPS_constellation gps_con;

        Transceiver transceiver;

        void setup_export(){
            transceiver.register_for_transmit(EXPORT( propulsion    , get_mprop));
            transceiver.register_for_transmit(EXPORT( propulsion    , get_fmassr));
            transceiver.register_for_transmit(EXPORT( aerodynamics  , get_gymax));
            transceiver.register_for_transmit(EXPORT( aerodynamics  , get_dyb));
            transceiver.register_for_transmit(EXPORT( aerodynamics  , get_dnb));
            transceiver.register_for_transmit(EXPORT( aerodynamics  , get_dnr));
            transceiver.register_for_transmit(EXPORT( aerodynamics  , get_dndr));
            transceiver.register_for_transmit(EXPORT( aerodynamics  , get_dla));
            transceiver.register_for_transmit(EXPORT( aerodynamics  , get_dma));
            transceiver.register_for_transmit(EXPORT( aerodynamics  , get_dmq));
            transceiver.register_for_transmit(EXPORT( aerodynamics  , get_dmde));
            transceiver.register_for_transmit(EXPORT( aerodynamics  , get_dnd));
            transceiver.register_for_transmit(EXPORT( aerodynamics  , get_dlde));
            transceiver.register_for_transmit(EXPORT( env           , get_pdynmc));

            transceiver.register_for_transmit(EXPORT( newton        , get_SBII));
            transceiver.register_for_transmit(EXPORT( newton        , get_VBII));
            transceiver.register_for_transmit(EXPORT( newton        , get_dbi));
            transceiver.register_for_transmit(EXPORT( newton        , get_dvbe));
            transceiver.register_for_transmit(EXPORT( newton        , get_dvbi));
            transceiver.register_for_transmit(EXPORT( newton        , get_thtvdx));
            transceiver.register_for_transmit(EXPORT( newton        , get_SBEE));
            transceiver.register_for_transmit(EXPORT( newton        , get_VBEE));
            transceiver.register_for_transmit(EXPORT( kinematics    , get_TBI));
            // transceiver.register_for_transmit(EXPORT( gpsr          , get_SXH));
            // transceiver.register_for_transmit(EXPORT( gpsr          , get_VXH));
            // transceiver.register_for_transmit(EXPORT( gpsr          , get_gps_update));
            transceiver.register_for_transmit(EXPORT(*gyro          , get_computed_WBIB));
            transceiver.register_for_transmit(EXPORT(*gyro          , get_error_of_computed_WBIB));
            transceiver.register_for_transmit(EXPORT(*accelerometer , get_computed_FSPB));
            transceiver.register_for_transmit(EXPORT(*accelerometer , get_error_of_computed_FSPB));
            transceiver.register_for_transmit(EXPORT(*gyro          , get_qqcx));
            transceiver.register_for_transmit(EXPORT(*gyro          , get_ppcx));
            transceiver.register_for_transmit(EXPORT(*gyro          , get_rrcx));
            transceiver.register_for_transmit(EXPORT(gps_con        , get_transmit_data));

        };

        void exec_receive(){
            /* XXX */
            if(((std::function<double()>)transceiver(IMPORT(ins, clear_gps_flag)))()){
                gpsr.clear_gps_flag();
            }
            if(((std::function<double()>)transceiver(IMPORT(guidance, no_thrust)))()){
                propulsion.set_no_thrust();
            }
            if(((std::function<double()>)transceiver(IMPORT(guidance, ltg_thrust)))()){
                propulsion.set_ltg_thrust();
            }
        };

        void link(){
            tvc.grab_delrcx           = transceiver(IMPORT(control , get_delrcx));
            tvc.grab_delecx           = transceiver(IMPORT(control , get_delecx));

            forces.grab_rcs_isEnabled = transceiver(IMPORT(rcs_fc  , isEnabled));
            forces.grab_rcs_mode      = transceiver(IMPORT(rcs_fc  , get_rcs_mode));

            rcs.grab_e_roll           = transceiver(IMPORT(rcs_fc  , get_e_roll));
            rcs.grab_e_pitch          = transceiver(IMPORT(rcs_fc  , get_e_pitch));
            rcs.grab_e_yaw            = transceiver(IMPORT(rcs_fc  , get_e_yaw));

            // gpsr.grab_SBIIC           = transceiver(IMPORT(ins     , get_SBIIC));
            // gpsr.grab_VBIIC           = transceiver(IMPORT(ins     , get_VBIIC));
            // gpsr.grab_WBICI           = transceiver(IMPORT(ins     , get_WBICI));
        };

        Rocket_SimObject() 
            :   newton      ( kinematics , euler        , env          , propulsion   , forces )      ,
                kinematics  ( newton     , env          , euler )      ,
                euler       ( kinematics , propulsion   , forces )     ,
                gpsr        ( newton     , euler )        ,
                env         ( newton     , aerodynamics , kinematics , time ) ,
                propulsion  ( env )      ,
                aerodynamics( kinematics , env          , propulsion   , euler        , newton        , tvc ) ,
                tvc         ( env        , kinematics   , propulsion ) ,
                rcs         ( propulsion ) ,
                forces      ( env        , propulsion   , rcs          , aerodynamics , tvc ) ,
                time        (),
                gps_con     ( time       , newton       , env          , kinematics)
            {
            ("initialization") transceiver.initialize_connection("ENVIRONMENT");
            ("initialization") link();
            ("initialization") setup_export();

            ("initialization") kinematics.initialize();
            ("initialization") newton.initialize();
            ("initialization") env.initialize();
            ("initialization") aerodynamics.initialize();
            ("initialization") euler.initialize();
            // ("initialization") gpsr.initialize(gps_sats, 0.001);
            ("initialization") tvc.initialize();
            ("initialization") rcs.initialize();
            ("initialization") propulsion.initialize();
            ("initialization") forces.initialize();

            P1 (0.001, "scheduled") time.dm_time();
            //P1 (0.001, "scheduled") gpsr.update_markov(0.001);
            P1 (0.001, "scheduled") kinematics.propagate(0.001);
	        P1 (0.001, "scheduled") env.propagate(0.001);
            P1 (0.001, "scheduled") propulsion.propagate(0.001);
            P1 (0.001, "scheduled") aerodynamics.calculate_aero(0.001);
            // P1 (0.1, "scheduled") gpsr.get_quadriga();
            // P1 (0.1, "scheduled") gpsr.filter_extrapolation(0.1);
            // P1 (0.1, "scheduled") gpsr.measure();
            P1 (0.001, "scheduled") gps_con.compute();
            P1 (0.05, "scheduled") gyro->propagate_error(0.05);
            P1 (0.05, "scheduled") accelerometer->propagate_error(0.05);

            P2 (0.05, "scheduled") transceiver.transmit();
;
            P2 (0.05, "scheduled") transceiver.receive();
            P2 (0.05, "scheduled") exec_receive();

            P3 (0.001, "scheduled") tvc.actuate(0.001);
            P3 (0.001, "scheduled") rcs.rcs_schmitt_thrust();
            P3 (0.001, "scheduled") forces.collect_forces_and_propagate();
            P3 (0.001, "scheduled") newton.propagate(0.001);
            P3 (0.001, "scheduled") euler.propagate(0.001);

            (10.0, "scheduled") gps_con.show();

            (0.001, "logging") kinematics.update_diagnostic_attributes(0.001);
            (0.001, "logging") env.update_diagnostic_attributes(0.001);
            (0.001, "logging") newton.update_diagnostic_attributes(0.001);
            (0.001, "logging") euler.update_diagnostic_attributes(0.001);

        }
};

// GPS_SAT_SimObject gps_sats;
Rocket_SimObject rkt;

void create_connections() {
    // rkt.gps_sats = &gps_sats.sats;
}

