/************************TRICK HEADER*************************
PURPOSE:
    (Lists out the other object files that are not included from C++ headers)
LIBRARY DEPENDENCIES:
(
)
*************************************************************/

#include "sim_objects/default_trick_sys.sm"
##include "rocket/Earth.hh"
##include "rocket/GPS_satellites.hh"
##include "rocket/GPS_receiver.hh"
##include "rocket/Newton.hh"
##include "rocket/Euler.hh"
##include "rocket/Ins.hh"
##include "rocket/Tvc.hh"
##include "rocket/Rcs.hh"
##include "rocket/RcsFc.hh"
##include "rocket/Control.hh"
##include "rocket/Guidance.hh"
##include "rocket/Force.hh"
##include "rocket/Propulsion.hh"
##include "rocket/Aerodynamics.hh"
##include "rocket/Time_management.hh"

##include "cad/utility.hh"
##include "cad/datadeck.hh"
##include "cad/schmitt_trigger.hh"

##include "cad/env/atmosphere.hh"
##include "cad/env/atmosphere_nasa2002.hh"
##include "cad/env/atmosphere76.hh"
##include "cad/env/atmosphere_weatherdeck.hh"

##include "cad/env/wind.hh"
##include "cad/env/wind_no.hh"
##include "cad/env/wind_tabular.hh"
##include "cad/env/wind_constant.hh"

##include "sensor/gyro/gyro.hh"
##include "sensor/gyro/gyro_ideal.hh"
##include "sensor/gyro/gyro_rocket6g.hh"

##include "sensor/accel/accelerometer.hh"
##include "sensor/accel/accelerometer_ideal.hh"
##include "sensor/accel/accelerometer_rocket6g.hh"

##include "math/utility.hh"
##include "math/integrate.hh"
##include "math/stochastic.hh"
##include "math/matrix/utility.hh"

##include "aux/transceiver.hh"

class GPS_SAT_SimObject : public Trick::SimObject {
    public:
        GPS_Satellites sats;

        GPS_SAT_SimObject() {
            ("default_data") sats.default_data();
            ("initialization") sats.initialize();
            (0.001, "scheduled") sats.propagate_sv();
        }
};

class Rocket_SimObject : public Trick::SimObject {
    public:
        GPS_Satellites* gps_sats;

        Environment env;
        Newton newton;
        _Euler_ euler;

        Kinematics kinematics;
        Forces forces;

        AeroDynamics aerodynamics;
        Propulsion propulsion;

        GPS_Receiver gpsr;
        sensor::Gyro *gyro;
        sensor::Accelerometer *accelerometer;

        TVC tvc;
        RCS rcs;

        time_management time;

        Transceiver transceiver;

        void transmit(){
            transceiver.begin_transmit();

            transceiver.register_for_transmit_double( LINK( propulsion   , get_mprop));
            transceiver.register_for_transmit_double( LINK( propulsion   , get_fmassr));
            transceiver.register_for_transmit_double( LINK( aerodynamics , get_gymax));
            transceiver.register_for_transmit_double( LINK( aerodynamics , get_dyb));
            transceiver.register_for_transmit_double( LINK( aerodynamics , get_dnb));
            transceiver.register_for_transmit_double( LINK( aerodynamics , get_dnr));
            transceiver.register_for_transmit_double( LINK( aerodynamics , get_dndr));
            transceiver.register_for_transmit_double( LINK( aerodynamics , get_dla));
            transceiver.register_for_transmit_double( LINK( aerodynamics , get_dma));
            transceiver.register_for_transmit_double( LINK( aerodynamics , get_dmq));
            transceiver.register_for_transmit_double( LINK( aerodynamics , get_dmde));
            transceiver.register_for_transmit_double( LINK( aerodynamics , get_dnd));
            transceiver.register_for_transmit_double( LINK( aerodynamics , get_dlde));
            transceiver.register_for_transmit_double( LINK( env          , get_pdynmc));

            transceiver.register_for_transmit_vec3(   LINK( newton       , get_SBII));
            transceiver.register_for_transmit_vec3(   LINK( newton       , get_VBII));
            transceiver.register_for_transmit_double( LINK( newton       , get_dbi));
            transceiver.register_for_transmit_double( LINK( newton       , get_dvbe));
            transceiver.register_for_transmit_double( LINK( newton       , get_dvbi));
            transceiver.register_for_transmit_double( LINK( newton       , get_thtvdx));
            transceiver.register_for_transmit_mat33(  LINK( kinematics   , get_TBI));
            transceiver.register_for_transmit_vec3(   LINK( gpsr         , get_SXH));
            transceiver.register_for_transmit_vec3(   LINK( gpsr         , get_VXH));
            transceiver.register_for_transmit_double( LINK( gpsr         , get_gps_update));
            transceiver.register_for_transmit_vec3(LINK(*gyro, get_computed_WBIB));
            transceiver.register_for_transmit_vec3(LINK(*gyro, get_error_of_computed_WBIB));
            transceiver.register_for_transmit_vec3(LINK(*accelerometer, get_computed_FSPB));
            transceiver.register_for_transmit_vec3(LINK(*accelerometer, get_error_of_computed_FSPB));
            transceiver.register_for_transmit_double(LINK(*gyro, get_qqcx));
            transceiver.register_for_transmit_double(LINK(*gyro, get_ppcx));
            transceiver.register_for_transmit_double(LINK(*gyro, get_rrcx));

            transceiver.transmit();
        };

        void receive(){
            transceiver.begin_receive();

            transceiver.register_to_receive_double("delrcx");
            transceiver.register_to_receive_double("delecx");

            transceiver.register_to_receive_double("rcs_isEnabled");
            transceiver.register_to_receive_double("rcs_mode");
            transceiver.register_to_receive_double("e_roll");
            transceiver.register_to_receive_double("e_pitch");
            transceiver.register_to_receive_double("e_yaw");

            transceiver.register_to_receive_vec3("SBIIC");
            transceiver.register_to_receive_vec3("VBIIC");
            transceiver.register_to_receive_vec3("WBICI");
            
            /* XXX */
            if(transceiver.register_to_receive_double("clear_gps_flag")()){
                gpsr.clear_gps_flag();
            }
            if(transceiver.register_to_receive_double("no_thrust")()){
                propulsion.set_no_thrust();
            }
            if(transceiver.register_to_receive_double("ltg_thrust")()){
                propulsion.set_ltg_thrust();
            }
        };

        void link(){
            tvc.grab_delrcx = LINKARG(transceiver, get_double, "delrcx");
            tvc.grab_delecx = LINKARG(transceiver, get_double, "delecx");

            forces.grab_rcs_isEnabled = LINKARG(transceiver, get_double, "rcs_isEnabled");
            forces.grab_rcs_mode = LINKARG(transceiver, get_double, "rcs_mode");


            rcs.grab_e_roll  = LINKARG(transceiver, get_double, "e_roll");
            rcs.grab_e_pitch = LINKARG(transceiver, get_double, "e_pitch");
            rcs.grab_e_yaw   = LINKARG(transceiver, get_double, "e_yaw");


            gpsr.grab_SBIIC = LINKARG(transceiver, get_vec3, "SBIIC");
            gpsr.grab_VBIIC = LINKARG(transceiver, get_vec3, "VBIIC");
            gpsr.grab_WBICI = LINKARG(transceiver, get_vec3, "WBICI");
        };

        Rocket_SimObject() 
            :   newton      ( kinematics , euler        , env          , propulsion   , forces )      ,
                kinematics  ( newton     , env          , euler )      ,
                euler       ( kinematics , propulsion   , forces )     ,
                gpsr        ( newton     , euler        , *gps_sats )        ,
                env         ( newton     , aerodynamics , kinematics , time ) ,
                propulsion  ( env )      ,
                aerodynamics( kinematics , env          , propulsion   , euler        , newton        , tvc ) ,
                tvc         ( env        , kinematics   , propulsion ) ,
                rcs         ( propulsion ) ,
                forces      ( env        , propulsion   , rcs          , aerodynamics , tvc ) ,
                time        ()
            {
            ("initialization") transceiver.initialize_connection("ENVIRONMENT");
            ("initialization") link();

            ("initialization") kinematics.initialize();
            ("initialization") newton.initialize();
            ("initialization") env.initialize();
            ("initialization") aerodynamics.initialize();
            ("initialization") euler.initialize();
            ("initialization") gpsr.initialize(0.001);
            ("initialization") tvc.initialize();
            ("initialization") rcs.initialize();
            ("initialization") propulsion.initialize();
            ("initialization") forces.initialize();

            P1 (0.001, "scheduled") time.dm_time();
            //P1 (0.001, "scheduled") gpsr.update_markov(0.001);
            P1 (0.001, "scheduled") kinematics.propagate(0.001);
	        P1 (0.001, "scheduled") env.propagate(0.001);
            P1 (0.001, "scheduled") propulsion.propagate(0.001);
            P1 (0.001, "scheduled") aerodynamics.calculate_aero(0.001);
            // P1 (0.1, "scheduled") gpsr.get_quadriga();
            // P1 (0.1, "scheduled") gpsr.filter_extrapolation(0.1);
            // P1 (0.1, "scheduled") gpsr.measure();
            P1 (0.05, "scheduled") gyro->propagate_error(0.05);
            P1 (0.05, "scheduled") accelerometer->propagate_error(0.05);

            P2 (0.05, "scheduled") transmit();
            P2 (0.05, "scheduled") receive();

            P3 (0.001, "scheduled") tvc.actuate(0.001);
            P3 (0.001, "scheduled") rcs.rcs_schmitt_thrust();
            P3 (0.001, "scheduled") forces.collect_forces_and_propagate();
            P3 (0.001, "scheduled") newton.propagate(0.001);
            P3 (0.001, "scheduled") euler.propagate(0.001);

            (0.001, "logging") kinematics.update_diagnostic_attributes(0.001);
            (0.001, "logging") env.update_diagnostic_attributes(0.001);
            (0.001, "logging") newton.update_diagnostic_attributes(0.001);
            (0.001, "logging") euler.update_diagnostic_attributes(0.001);

        }
};

GPS_SAT_SimObject gps_sats;
Rocket_SimObject rkt;

void create_connections() {
    rkt.gps_sats = &gps_sats.sats;
}

