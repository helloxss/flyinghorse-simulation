diff --git a/exe/PIL/master/RUN_golden/golden.cpp b/exe/PIL/master/RUN_golden/golden.cpp
index bc36e54..c652d99 100755
--- a/exe/PIL/master/RUN_golden/golden.cpp
+++ b/exe/PIL/master/RUN_golden/golden.cpp
@@ -19,12 +19,6 @@ extern "C" void master_startup() {
         throw std::invalid_argument("Must set $WORKSPACE");
     }
 
-    new_slave->sim_path = std::string(std::getenv("WORKSPACE")) + "/exe/PIL/slave";
-    new_slave->S_main_name = "./S_main_Linux_5.4_x86_64.exe";
-    new_slave->run_input_file = "RUN_golden/golden.py";
-    new_slave->sync_error_terminate = 1;
-    trick_master_slave.master.add_slave(new_slave);
-    trick_master_slave.master.enable();
 }
 
 extern "C" int event_start() {
diff --git a/exe/PIL/master/S_define b/exe/PIL/master/S_define
index c0cc348..c1b903d 100755
--- a/exe/PIL/master/S_define
+++ b/exe/PIL/master/S_define
@@ -21,6 +21,7 @@ LIBRARY DEPENDENCIES:
 ##include "cad_utility.hh"
 ##include "datadeck.hh"
 ##include "schmitt_trigger.hh"
+##include "global_constants.hh"
 
 ##include "env/atmosphere.hh"
 ##include "env/atmosphere_nasa2002.hh"
@@ -51,6 +52,13 @@ LIBRARY DEPENDENCIES:
 ##include "matrix/utility.hh"
 
 ##include "transceiver.hh"
+##include "DM_FSW_Interface.hh"
+
+##include <stdio.h>
+##include <sys/types.h>
+##include <sys/socket.h>
+##include <netinet/in.h>
+##include <netdb.h>
 
 
 
@@ -78,6 +86,8 @@ class Rocket_SimObject : public Trick::SimObject {
         GPS_constellation gps_con;
 
         Transceiver transceiver;
+        enet_dm_to_fsw_t dm2fsw;
+        enet_fsw_to_dm_t fsw2dm;
 
         void setup_export(){
             transceiver.register_for_transmit(EXPORT( propulsion    , get_mprop));
@@ -123,6 +133,154 @@ class Rocket_SimObject : public Trick::SimObject {
 
         };
 
+        void pack_enet_payload(){
+            /* accel */
+            STORE_VEC3(dm2fsw.accel_FSPCB, accelerometer->get_computed_FSPB());
+            STORE_VEC3(dm2fsw.accel_EFSPB, accelerometer->get_error_of_computed_FSPB());
+            /* aerodynamic */
+            dm2fsw.trick_data.aero_value[0] = aerodynamics.get_gymax();
+            dm2fsw.trick_data.aero_value[1] = aerodynamics.get_dyb();
+            dm2fsw.trick_data.aero_value[2] = aerodynamics.get_dnb();
+            dm2fsw.trick_data.aero_value[3] = aerodynamics.get_dnr();
+            dm2fsw.trick_data.aero_value[4] = aerodynamics.get_dndr();
+            dm2fsw.trick_data.aero_value[5] = aerodynamics.get_dla();
+            dm2fsw.trick_data.aero_value[6] = aerodynamics.get_dma();
+            dm2fsw.trick_data.aero_value[7] = aerodynamics.get_dmq();
+            dm2fsw.trick_data.aero_value[8] = aerodynamics.get_dmde();
+            dm2fsw.trick_data.aero_value[9] = aerodynamics.get_dnd();
+            dm2fsw.trick_data.aero_value[10] = aerodynamics.get_dlde();
+
+            /* environment */
+            dm2fsw.trick_data.env_pdynmc = env.get_pdynmc();
+            STORE_MAT33(dm2fsw.trick_data.env_TEI, env.get_TEI());
+            /* gyro */
+            dm2fsw.trick_data.gyro_qqcx = gyro->get_qqcx();
+            dm2fsw.trick_data.gyro_ppcx = gyro->get_ppcx();
+            dm2fsw.trick_data.gyro_rrcx = gyro->get_rrcx();
+            STORE_VEC3(dm2fsw.trick_data.gyro_WBICB, gyro->get_computed_WBIB());
+            STORE_VEC3(dm2fsw.trick_data.gyro_EWBIB, gyro->get_error_of_computed_WBIB());
+            /* GPS Constellation */
+            dm2fsw.gps_con_gps_update = gps_con.get_gps_update();
+
+            transmit_channel *trans_chan = gps_con.get_transmit_data();
+            for (int i = 0; i < MAX_CHAN; ++i) {
+                dm2fsw.gps_con_transmit_data[i] = trans_chan[i];
+            }
+            /* SDT */
+            STORE_VEC3(dm2fsw.trick_data.sdt_phi, sdt->get_PHI());
+            STORE_VEC3(dm2fsw.trick_data.sdt_phi_high, sdt->get_PHI_HIGH());
+            STORE_VEC3(dm2fsw.trick_data.sdt_phi_low, sdt->get_PHI_LOW());
+            STORE_VEC3(dm2fsw.trick_data.sdt_delta_vel, sdt->get_DELTA_VEL());
+
+            /* kinamatics */
+            STORE_MAT33(dm2fsw.trick_data.kinematics_TBI, kinematics.get_TBI());
+            dm2fsw.trick_data.kinematics_phibdx = kinematics.get_phibdx();
+            dm2fsw.trick_data.kinematics_thtbdx = kinematics.get_thtbdx(); 
+            dm2fsw.trick_data.kinematics_psibdx = kinematics.get_psibdx(); 
+        
+            /* Newton */
+            STORE_VEC3(dm2fsw.trick_data.newton_SBII, newton.get_SBII());
+            STORE_VEC3(dm2fsw.trick_data.newton_VBII, newton.get_VBII());
+            STORE_VEC3(dm2fsw.trick_data.newton_SBEE, newton.get_SBEE()); 
+            STORE_VEC3(dm2fsw.trick_data.newton_VBEE, newton.get_VBEE()); 
+            dm2fsw.trick_data.newton_dvbe      = newton.get_dvbe();
+            dm2fsw.trick_data.newton_dbi       = newton.get_dbi();
+            dm2fsw.trick_data.newton_dvbi      = newton.get_dvbi();
+            dm2fsw.trick_data.newton_thtvdx    = newton.get_thtvdx();
+        
+            /* Propulsion */
+            dm2fsw.trick_data.propulsion_thrust_state  = propulsion.get_mprop();
+            dm2fsw.trick_data.propulsion_fmassr        = propulsion.get_fmassr();
+
+        };
+
+        void unpack_enet_payload() {
+            /* Control */
+            tvc.grab_delrcx         = [this]()->double{ return fsw2dm.ctrl_delrcx; };
+            tvc.grab_delecx         = [this]()->double{ return fsw2dm.ctrl_delecx; };
+        
+            /* RCS */
+            forces.grab_rcs_isEnabled   = [this]()->double{ return fsw2dm.rcs_isEnabled; };
+            forces.grab_rcs_mode        = [this]()->double{ return fsw2dm.rcs_rcs_mode; };
+            rcs.grab_e_roll             = [this]()->double{ return fsw2dm.rcs_e_roll; };
+            rcs.grab_e_pitch            = [this]()->double{ return fsw2dm.rcs_e_pitch; };
+            rcs.grab_e_yaw              = [this]()->double{ return fsw2dm.rcs_e_yaw; };
+        
+            /* Flag */
+            if(fsw2dm.flag_ins_clear_gps) {
+                gps_con.clear_gps_flag();
+            }
+            if(fsw2dm.flag_guid_no_thrust) {
+                propulsion.set_no_thrust();
+            }
+            if(fsw2dm.flag_guid_ltg_thrust) {
+                propulsion.set_ltg_thrust();
+            }
+        }
+
+        int sockfd, portno;
+        struct sockaddr_in serv_addr, cli_addr;
+        int serv_addr_len = sizeof(serv_addr),
+            cli_addr_len = sizeof(cli_addr),
+            send_data_len = sizeof(enet_dm_to_fsw_t),
+            recv_data_len = sizeof(enet_fsw_to_dm_t);
+#define LOCAL_PORT 23999
+
+        void bind_connection_server(){
+            portno = LOCAL_PORT;
+            sockfd = socket(AF_INET, SOCK_STREAM, 0);
+            if (sockfd < 0) puts("ERROR opening socket");
+            memset(&serv_addr, 0, serv_addr_len);
+            serv_addr.sin_family = AF_INET;
+            serv_addr.sin_addr.s_addr = INADDR_ANY;
+            serv_addr.sin_port = htons(portno);
+
+            /* let address reuseable */
+            int enable = 1;
+            if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(int)) < 0) {
+                puts("setsockopt(SO_REUSEADDR) failed");
+            }
+
+            puts("wait bind");
+            if (bind(sockfd, (struct sockaddr *)&serv_addr, serv_addr_len) < 0) {
+                puts("ERROR binding");
+            }
+            puts("wait listen");
+
+            listen(sockfd,5);
+            puts("Listening");
+
+            sockfd = accept(sockfd, (struct sockaddr *)&cli_addr, (socklen_t*)&cli_addr_len);
+
+            if (sockfd < 0) puts("ERROR on accept");
+            else puts("connected to FSW");
+        }
+        void sendSock() {
+            /* printf("send Socket: %d\n", send_data_len); */
+            int send_size = send(sockfd, &dm2fsw, send_data_len, 0);
+            /* printf("send total %d\n", send_size); */
+        }
+
+        void receive() {
+            int read_size;
+            int total = 0;
+            uint8_t *buffer = (uint8_t *)&fsw2dm;
+
+            /* printf("Wait Socket\n"); */
+            while( total != recv_data_len && (read_size = recv(sockfd , buffer, recv_data_len, 0)) > 0 ){
+                buffer += read_size;
+                total += read_size;
+            }
+            /* printf("Rcv total %d\n", total); */
+        }
+
+        void update() {
+            pack_enet_payload();
+            sendSock();
+            receive();
+            unpack_enet_payload();
+        }
+
         void exec_receive(){
             /* XXX */
             if(((std::function<double()>)transceiver(IMPORT(ins, clear_gps_flag)))()){
@@ -168,9 +326,8 @@ class Rocket_SimObject : public Trick::SimObject {
                 forces      ( env        , propulsion   , rcs          , aerodynamics , tvc ) ,
                 gps_con     ( newton     , env          , kinematics)
             {
-            ("initialization") transceiver.initialize_connection("ENVIRONMENT");
             ("initialization") link();
-            ("initialization") setup_export();
+            ("initialization") bind_connection_server();
 
             ("initialization") kinematics.initialize();
             ("initialization") env.initialize();
@@ -185,7 +342,7 @@ class Rocket_SimObject : public Trick::SimObject {
 
             P1 (0.001, "scheduled") time->dm_time();
             P1 (0.001, "scheduled") kinematics.propagate(0.001);
-	        P1 (0.001, "scheduled") env.propagate(0.001);
+            P1 (0.001, "scheduled") env.propagate(0.001);
             P1 (0.001, "scheduled") propulsion.propagate(0.001);
             P1 (0.001, "scheduled") aerodynamics.calculate_aero(0.001);
             P1 (0.05, "scheduled") gps_con.compute();
@@ -193,10 +350,7 @@ class Rocket_SimObject : public Trick::SimObject {
             P1 (0.005, "scheduled") accelerometer->propagate_error(0.005);
             P1 (0.005, "scheduled") sdt->compute(0.005);
 
-            P2 (0.01, "scheduled") transceiver.transmit();
-;
-            P2 (0.01, "scheduled") transceiver.receive();
-            P2 (0.01, "scheduled") exec_receive();
+            P2 (0.05, "scheduled") update();
 
             P3 (0.001, "scheduled") tvc.actuate(0.001);
             P3 (0.001, "scheduled") rcs.rcs_schmitt_thrust();
diff --git a/exe/PIL/master/test.sh b/exe/PIL/master/test.sh
index 1c7c0ef..0b6d1e3 100755
--- a/exe/PIL/master/test.sh
+++ b/exe/PIL/master/test.sh
@@ -7,8 +7,8 @@ else
     export WORKSPACE=`pwd`/../../../
 fi
 
-cd ../slave
-trick-CP
+#cd ../slave
+#trick-CP
 
 cd ../master
 trick-CP
