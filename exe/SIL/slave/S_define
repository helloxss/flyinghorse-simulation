/************************TRICK HEADER*************************
PURPOSE:
    (Lists out the other object files that are not included from C++ headers)
LIBRARY DEPENDENCIES:
(
)
*************************************************************/

#include "sim_objects/default_trick_sys.sm"

##include "Time_management.hh"

##include "Ins.hh"
##include "Control.hh"
##include "GPS.hh"
##include "cad_utility.hh"
##include "datadeck.hh"
##include "time_utility.hh"
##include "math_utility.hh"
##include "integrate.hh"
##include "stochastic.hh"
##include "matrix/utility.hh"
##include "Dataflow_Binding.hh"

##include "transceiver.hh"
##include  "icf_trx_ctrl.h"
##include  "DM_FSW_Interface.hh"
##include "mission_define.h"

class FlightComputer_SimObject : public Trick::SimObject {
    public:

        double ltg_thrust, no_thrust, clear_gps;
        double stand_still_time = 0.0;
        INS ins;

        Control control;

        time_management *time = time_management::get_instance();

        Transceiver transceiver;
        struct icf_ctrlblk_t   icf_esps_ctrl;
        GPS_FSW gps;

        refactor_uplink_packet_t dm_ins_db;
        refactor_ins_to_ctl_t ins_ctl_db;
        refactor_downlink_packet_t ctl_tvc_db;

        GPS_LINK_decl();
        INS_LINK_decl();
        CONTROL_LINK_decl();

        INS_SAVE_decl();
        CONTROL_SAVE_decl();

        void link(){
            GPSLinkInData(gps, dm_ins_db, ins);
            INSLinkInData(ins, dm_ins_db, gps);
            ControlLinkInData(control, ins_ctl_db);

            /* XXX */
            ins.clear_gps_flag  = [this](){ this->clear_gps = 1; };
        };

        void clear_flag(){
            this->clear_gps = 0;
        }

        int downlink_packet_transfer(struct icf_ctrlblk_t* C) {
            int ret = 0;
            icf_tx_direct(C, ESPS_TVC_SW_QIDX, (uint8_t *)&ctl_tvc_db, sizeof(refactor_downlink_packet_t));
            return ret;
        }

        void load_input(struct icf_ctrlblk_t* C) {
            if (icf_rx_dequeue(C, ESPS_GNC_SW_QIDX, &dm_ins_db, sizeof(refactor_uplink_packet_t)) > 0)
                debug_hex_dump("esps", (uint8_t *)&dm_ins_db, sizeof(refactor_uplink_packet_t));
        }
        FlightComputer_SimObject() : ins(),
                                     gps()
        {

            ("default_data") clear_flag();

            ("initialization") icf_ctrlblk_init(&icf_esps_ctrl, ICF_SYSTEM_TYPE_SIL_ESPS);
            ("initialization") link();
            ("initialization") gps.initialize(0.05);
            ("initialization") control.initialize();
            ("initialization") ins.initialize();
            P1 (0.05, "scheduled") time->dm_time();
            P2 (0.05, "scheduled") icf_rx_ctrl_job(&icf_esps_ctrl, HW_PORT8, sizeof(refactor_uplink_packet_t));
            P2 (0.05, "scheduled") load_input(&icf_esps_ctrl);

            P2 (0.01, "scheduled") clear_flag();

            P2 (0.05, "scheduled") gps.filter_extrapolation(0.05);
            P2 (0.05, "scheduled") gps.measure(0.05);

            P2 (0.05, "scheduled") ins.update(0.05);
            P2 (0.05, "scheduled") INS_SaveOutData(ins, dm_ins_db, ins_ctl_db);
            P2 (0.05, "scheduled") control.control(0.05);
            P2 (0.05, "scheduled") Control_SaveOutData(control, ctl_tvc_db);
            P2 (0.05, "scheduled") downlink_packet_transfer(&icf_esps_ctrl);
            ("shutdown") icf_ctrlblk_deinit(&icf_esps_ctrl, ICF_SYSTEM_TYPE_SIL_ESPS);
;
        }
};

FlightComputer_SimObject fc;
