/************************TRICK HEADER*************************
PURPOSE:
    (Lists out the other object files that are not included from C++ headers)
LIBRARY DEPENDENCIES:
(
)
*************************************************************/

#include "sim_objects/default_trick_sys.sm"

##include "Newton.hh"
##include "Euler.hh"
##include "Tvc.hh"
##include "Rcs.hh"
##include "Force.hh"
##include "Propulsion.hh"
##include "Aerodynamics.hh"
##include "Time_management.hh"
##include "GPS_constellation.hh"

##include "GPS.hh"
##include "Ins.hh"
##include "RcsFc.hh"
##include "Control.hh"
##include "Guidance.hh"

##include "cad_utility.hh"
##include "datadeck.hh"
##include "schmitt_trigger.hh"

##include "env/atmosphere.hh"
##include "env/atmosphere_nasa2002.hh"
##include "env/atmosphere76.hh"
##include "env/atmosphere_weatherdeck.hh"

##include "env/wind.hh"
##include "env/wind_no.hh"
##include "env/wind_tabular.hh"
##include "env/wind_constant.hh"

##include "gyro/gyro.hh"
##include "gyro/gyro_ideal.hh"
##include "gyro/gyro_rocket6g.hh"

##include "accel/accelerometer.hh"
##include "accel/accelerometer_ideal.hh"
##include "accel/accelerometer_rocket6g.hh"

##include "time_utility.hh"
##include "math_utility.hh"
##include "integrate.hh"
##include "stochastic.hh"
##include "matrix/utility.hh"


// class GPS_SAT_SimObject : public Trick::SimObject {
//     public:
//         GPS_Satellites sats;
//         GPS_SAT_SimObject() {
//             ("default_data") sats.default_data();
//             ("initialization") sats.initialize();
//             (0.001, "scheduled") sats.propagate_sv();
//         }
// };

class Rocket_SimObject : public Trick::SimObject {
    public:
        //GPS_Satellites* gps_sats;

        Environment env;
        Newton newton;
        _Euler_ euler;

        Kinematics kinematics;
        Forces forces;

        AeroDynamics aerodynamics;
        Propulsion propulsion;

        GPS_FSW gps;
        //GPS_Receiver gpsr;

        TVC tvc;
        RCS rcs;

        time_management *time = time_management::get_instance();

        sensor::Gyro *gyro;
        sensor::Accelerometer *accelerometer;
        INS ins;

        Control control;
        Guidance guidance;

        RCS_FC rcs_fc;

        GPS_constellation gps_con;

        void link(){
            control.grab_mprop = LINK(propulsion, get_mprop);

            control.grab_dvbe  = LINK(newton, get_dvbe);

            control.grab_gymax = LINK(aerodynamics, get_gymax);
            control.grab_dyb   = LINK(aerodynamics, get_dyb);
            control.grab_dnb   = LINK(aerodynamics, get_dnb);
            control.grab_dnr   = LINK(aerodynamics, get_dnr);
            control.grab_dndr  = LINK(aerodynamics, get_dndr);
            control.grab_dla   = LINK(aerodynamics, get_dla);
            control.grab_dma   = LINK(aerodynamics, get_dma);
            control.grab_dmq   = LINK(aerodynamics, get_dmq);
            control.grab_dmde  = LINK(aerodynamics, get_dmde);
            control.grab_dnd   = LINK(aerodynamics, get_dnd);
            control.grab_dlde  = LINK(aerodynamics, get_dlde);

            control.grab_pdynmc = LINK(env, get_pdynmc);

            control.grab_dvbec = LINK(ins, get_dvbec);
            control.grab_thtvdcx = LINK(ins, get_thtvdcx);
            control.grab_thtbdcx = LINK(ins, get_thtbdcx);

            control.grab_qqcx = LINK(*gyro, get_qqcx);
            control.grab_rrcx = LINK(*gyro, get_rrcx);

            control.grab_FSPCB = LINK(*accelerometer, get_computed_FSPB);

            ins.grab_computed_WBIB          = LINK(*gyro, get_computed_WBIB);
            ins.grab_error_of_computed_WBIB = LINK(*gyro, get_error_of_computed_WBIB);
            ins.grab_computed_FSPB          = LINK(*accelerometer, get_computed_FSPB);
            ins.grab_error_of_computed_FSPB = LINK(*accelerometer, get_error_of_computed_FSPB);
            ins.grab_SBII       = LINK(newton     , get_SBII);
            ins.grab_VBII       = LINK(newton     , get_VBII);
            ins.grab_dbi        = LINK(newton     , get_dbi);
            ins.grab_TBI        = LINK(kinematics , get_TBI);
            ins.grab_SXH        = LINK(gps       , get_SXH);
            ins.grab_VXH        = LINK(gps       , get_VXH);
            ins.grab_gps_update = LINK(gps_con       , get_gps_update);
            ins.clear_gps_flag  = LINK(gps_con       , clear_gps_flag);
            ins.grab_TEI        = LINK(env       , get_TEI);
            ins.grab_SBEE       = LINK(newton    , get_SBEE);
            ins.grab_VBEE       = LINK(newton    , get_VBEE);
            ins.grab_phibdx     = LINK(kinematics, get_phibdx);
            ins.grab_thtbdx     = LINK(kinematics, get_thtbdx);
            ins.grab_psibdx     = LINK(kinematics, get_psibdx);


            guidance.grab_mprop  = LINK(propulsion, get_mprop);
            guidance.grab_TBIC   = LINK(ins, get_TBIC);

            guidance.grab_dbi    = LINK(newton, get_dbi);
            guidance.grab_dvbi   = LINK(newton, get_dvbi);
            guidance.grab_thtvdx = LINK(newton, get_thtvdx);
            guidance.grab_fmassr = LINK(propulsion, get_fmassr);
            guidance.grab_VBIIC  = LINK(ins, get_VBIIC);
            guidance.grab_SBIIC  = LINK(ins, get_SBIIC);
            guidance.grab_FSPCB  = LINK(*accelerometer, get_computed_FSPB);

            guidance.set_no_thrust  = LINK(propulsion, set_no_thrust);
            guidance.set_ltg_thrust = LINK(propulsion, set_ltg_thrust);


            tvc.grab_delrcx = LINK(control, get_delrcx);
            tvc.grab_delecx = LINK(control, get_delecx);

            rcs_fc.grab_qqcx = LINK(*gyro, get_qqcx);
            rcs_fc.grab_ppcx = LINK(*gyro, get_ppcx);
            rcs_fc.grab_rrcx = LINK(*gyro, get_rrcx);

            rcs_fc.grab_alphacx = LINK(ins, get_alphacx);
            rcs_fc.grab_betacx = LINK(ins, get_betacx);

            rcs_fc.grab_thtbdcx = LINK(ins, get_thtbdcx);
            rcs_fc.grab_psibdcx = LINK(ins, get_psibdcx);
            rcs_fc.grab_phibdcx = LINK(ins, get_phibdcx);

            rcs_fc.grab_UTBC = LINK(guidance, get_UTBC);
            rcs_fc.grab_alphacomx = LINK(guidance, get_alphacomx);
            rcs_fc.grab_betacomx  = LINK(guidance, get_betacomx);


            forces.grab_rcs_isEnabled = LINK(rcs_fc, isEnabled);
            forces.grab_rcs_mode = LINK(rcs_fc, get_rcs_mode);


            rcs.grab_e_roll  = LINK(rcs_fc, get_e_roll);
            rcs.grab_e_pitch = LINK(rcs_fc, get_e_pitch);
            rcs.grab_e_yaw   = LINK(rcs_fc, get_e_yaw);


            gps.grab_SBIIC = LINK(ins, get_SBIIC);
            gps.grab_VBIIC = LINK(ins, get_VBIIC);
            gps.grab_WBICI = LINK(ins, get_WBICI);
            gps.grab_SBEEC = LINK(ins, get_SBEEC);
            gps.grab_VBEEC = LINK(ins, get_VBEEC);
            gps.grab_TEIC = LINK(ins, get_TEIC);
            // gps.grab_channel = LINK(gps_con, get_channel);
            gps.grab_transmit_data = LINK(gps_con, get_transmit_data);

        };

        Rocket_SimObject() 
            :   newton      ( kinematics , euler        , env          , propulsion   , forces)      ,
                kinematics  ( newton     , env          , euler )      ,
                euler       ( kinematics , propulsion   , forces )     ,
                //gpsr        ( newton     , euler )      ,
                env         ( newton     , aerodynamics , kinematics ) ,
                propulsion  ( env )      ,
                aerodynamics( kinematics , env          , propulsion   , euler        , newton        , tvc ) ,
                tvc         ( env        , kinematics   , propulsion ) ,
                rcs         ( propulsion ) ,
                forces      ( env        , propulsion   , rcs          , aerodynamics , tvc ) ,
                gps_con     ( newton     , env          , kinematics) ,
                gps         () ,
                ins         ()
            {

            ("default_data") guidance.default_data();
            ("default_data") ins.default_data();

            ("initialization") kinematics.initialize();
            ("initialization") env.initialize();
            ("initialization") newton.initialize();
            ("initialization") aerodynamics.initialize();
            ("initialization") euler.initialize();
            //("initialization") gpsr.initialize(gps_sats, 0.001);
            ("initialization") gps.initialize(0.005);
            ("initialization") tvc.initialize();
            ("initialization") rcs.initialize();
            ("initialization") propulsion.initialize();
            ("initialization") forces.initialize();

            ("initialization") link();

            ("initialization") guidance.initialize();
            ("initialization") control.initialize();
            ("initialization") ins.initialize();
            ("initialization") rcs_fc.initialize();
            ("initialization") gps_con.initialize();


            (0.001, "scheduled") time->dm_time();
            //(0.001, "scheduled") gpsr.update_markov(0.001);
            (0.001, "scheduled") kinematics.propagate(0.001);
	        (0.001, "scheduled") env.propagate(0.001);
            (0.001, "scheduled") propulsion.propagate(0.001);
            (0.001, "scheduled") aerodynamics.calculate_aero(0.001);
            //(0.1, "scheduled") gpsr.get_quadriga();
            (0.1, "scheduled") gps_con.compute();
            (0.005, "scheduled") gps.filter_extrapolation(0.005);
            (0.005, "scheduled") gps.measure(0.005);
            (0.05, "scheduled") gyro->propagate_error(0.05);
            (0.05, "scheduled") accelerometer->propagate_error(0.05);
            (0.005, "scheduled") ins.update(0.005);
            // (0.001, "scheduled") guidance.guidance(0.001);
            (0.05, "scheduled") control.control(0.05);
            (0.05, "scheduled") rcs_fc.actuate();
            (0.001, "scheduled") tvc.actuate(0.001);
            (0.001, "scheduled") rcs.rcs_schmitt_thrust();
            (0.001, "scheduled") forces.collect_forces_and_propagate();
            (0.001, "scheduled") newton.propagate(0.001);
            (0.001, "scheduled") euler.propagate(0.001);

            (0.001, "logging") kinematics.update_diagnostic_attributes(0.001);
            (0.001, "logging") env.update_diagnostic_attributes(0.001);
            (0.001, "logging") newton.update_diagnostic_attributes(0.001);
            (0.001, "logging") euler.update_diagnostic_attributes(0.001);
            (10.0, "scheduled") gps_con.show();

        }
};

//GPS_SAT_SimObject gps_sats;
Rocket_SimObject rkt;

// void create_connections() {
//     rkt.gps_sats = &gps_sats.sats;
// }

