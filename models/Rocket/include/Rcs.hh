#ifndef __RCS_HH__
#define __RCS_HH__
/********************************* TRICK HEADER *******************************
PURPOSE:
      (Describe the RCS Module On Board)
LIBRARY DEPENDENCY:
      ((../src/Rcs.cpp))
PROGRAMMERS:
      (((Chung-Fan Yang) () () () ))
*******************************************************************************/

#include "Newton.hh"
#include "Ins.hh"
#include "Tvc.hh"
#include "Guidance.hh"
class Guidance;

class RCS {
    public:
    RCS() {}

    void default_data();
    void initialize(INS *i, Guidance *guia, Propulsion *plp);

    void actuate();
    void rcs_schmitt_thrust();
    int  rcs_schmitt(double input_new, double input, double dead_zone, double hysteresis);

    INS* ins;
    Guidance *guidance;
    Propulsion *propulsion;

    ///////////////////////////////////////////////////////////////////////////////
    //// mrcs_moment = |rcs_type||rcs_mode|
    ////
    //// rcs_type = 0 no RCS thrusting
    ////          = 1 proportional moment thrusters
    ////          = 2 on-off moment thrusters (Schmitt trigger)
    ////
    //// rcs_mode = 0 no control
    ////        = 1 all geodetic Euler angle control
    ////        = 2 thrust vector direction and roll angle control
    ////        = 3 incidence and roll angle control
    ////
    //// mrcs_force = 0 no side force control
    ////          = 1 proportional side thrusters
    ////          = 2 on-off side thrusters (Schmitt trigger)
    ////
    /////////////////////////////////////////////////////////////////////////////////
    int     mrcs_moment;     /* *io  (--)   Attitude control, =|rcs_type||rcs_mode|, see table */
    int     mrcs_force;      /* *io  (--)   Side force control =0: none; =1:prop.; =2:Schmitt */
    double  rcs_tau;         /* *io  (s)    Slope of the switching function */
    double  roll_mom_max;    /* *io  (N*m)  RCS rolling moment max value */
    double  pitch_mom_max;   /* *io  (N*m)  RCS pitching moment max value */
    double  yaw_mom_max;     /* *io  (N*m)  RCS yawing moment max value */
    double  rcs_zeta;        /* *io  (--)   Damping of closed-loop rop RCS */
    double  rcs_freq;        /* *io  (r/s)  Natural freq. of closed-loop prop RCS */
    double  roll_save;       /* *io  (d)    Saving roll angle command */
    double  pitch_save;      /* *io  (d)    Saving pitch angle command */
    double  yaw_save;        /* *io  (d)    Saving yaw angle command */
    double  phibdcomx;       /* *io  (d)    Roll angle command */
    double  thtbdcomx;       /* *io  (d)    Pitch angle command */
    double  psibdcomx;       /* *io  (d)    Yaw angle command */
    double  e_roll;          /* *io  (--)   Roll error signal */
    double  e_pitch;         /* *io  (--)   Pitch error signal */
    double  e_yaw;           /* *io  (--)   Yaw error signal */
    int     o_roll;          /* *io  (--)   Roll output of Schmitt trigger */
    int     o_pitch;         /* *io  (--)   Pitch output of Schmitt trigger */
    int     o_yaw;            /* *io  (--)   Yaw output of Schmitt trigger */
    int     roll_count;      /* *io  (--)   Roll thruster on/off */
    int     pitch_count;     /* *io  (--)   Pitch thruster on/off */
    int     yaw_count;       /* *io  (--)   Yaw thruster on/off */
    double  acc_gain;        /* *io  (N*s2/m) Acceleration gain of side thrusters */
    double  side_force_max;  /* *io  (N)    Maximum side force of thruster */
    double  e_right;         /* *io  (N)    Side force error signal, right */
    double  e_down;          /* *io  (N)    Down force error signal, down */
    int     o_right;         /* *io  (--)   Right output of Schmitt trigger */
    int     o_down;          /* *io  (--)   Down output of Schmitt trigger */
    double  right_save;      /* *io  (N)    Saving right force command */
    double  down_save;       /* *io  (N)    Saving down force command */
    int     right_count;     /* *io  (--)   Right force thruster on/off */
    int     down_count;      /* *io  (--)   Down forece thruster on/off */
    double  factdead_zone;   /* *io  (--)   Factor to mod 'dead_zone' dead_zone*(1+factdead_zone) */

    double  dead_zone;       /* *io  (d)    Dead zone of Schmitt trigger */
    double  hysteresis;      /* *io  (d)    Hysteresis of Schmitt trigger */
    double  fmrcs[3];        /* *io  (N*m)  Moment generated by the RCS thrusters */
    double  farcs[3];        /* *io  (N)    Force generated by the RCS side thrusters */
    double  rcs_thrust;      /* *io  (N)    rcs thrust */
    double  rocket_r;        /* *io  (m)    rocket's radius */
    double  rcs_pos;         /* *io  (m)    rcs thruster's postion from nose */
};

#endif  // __RCS_HH__
