!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
__Time_management_HH__	aux/include/Time_management.hh	2;"	d
get_instance	aux/include/Time_management.hh	/^    static time_management* get_instance() {$/;"	f	class:time_management
gpstime	aux/include/Time_management.hh	/^    time_util::GPS_TIME gpstime;$/;"	m	class:time_management
last_time	aux/include/Time_management.hh	/^    double last_time;$/;"	m	class:time_management
other	aux/include/Time_management.hh	/^    time_management& operator=(const time_management &other) = delete;$/;"	m	class:time_management
other	aux/include/Time_management.hh	/^    time_management(const time_management &other) = delete;$/;"	m	class:time_management
time_management	aux/include/Time_management.hh	/^class time_management {$/;"	c
~time_management	aux/include/Time_management.hh	/^    ~time_management() {}$/;"	f	class:time_management
ECIO_EXPORT	aux/include/aux.hh	37;"	d
EXPORT	aux/include/aux.hh	34;"	d
IMPORT	aux/include/aux.hh	40;"	d
LINK	aux/include/aux.hh	28;"	d
LINKARG	aux/include/aux.hh	31;"	d
MATRIX_INIT	aux/include/aux.hh	22;"	d
TRICK_INTERFACE	aux/include/aux.hh	18;"	d
VECTOR_INIT	aux/include/aux.hh	25;"	d
aux_header__HPP	aux/include/aux.hh	12;"	d
get_elapsed_time	aux/include/aux.hh	/^inline double get_elapsed_time() { return get_rettime(); }$/;"	f
Ecio	aux/include/ecio.hh	/^class Ecio {$/;"	c
__ecio_HH__	aux/include/ecio.hh	2;"	d
accel_EFSPB	aux/include/ecio.hh	/^        double accel_EFSPB[3];$/;"	m	struct:Ecio::__anon1
accel_FSPCB	aux/include/ecio.hh	/^        double accel_FSPCB[3];$/;"	m	struct:Ecio::__anon1
aero_value	aux/include/ecio.hh	/^        double aero_value[11];$/;"	m	struct:Ecio::__anon1
control_delecx	aux/include/ecio.hh	/^        double control_delecx;$/;"	m	struct:Ecio::__anon2
control_delrcx	aux/include/ecio.hh	/^        double control_delrcx;$/;"	m	struct:Ecio::__anon2
data_in	aux/include/ecio.hh	/^    net_data_rx_t data_in;$/;"	m	class:Ecio
dataa_out	aux/include/ecio.hh	/^    net_data_tx_t dataa_out;$/;"	m	class:Ecio
env_pdynmc	aux/include/ecio.hh	/^        double env_pdynmc;$/;"	m	struct:Ecio::__anon1
gpsr_SXH	aux/include/ecio.hh	/^        double gpsr_SXH[3];$/;"	m	struct:Ecio::__anon1
gpsr_VXH	aux/include/ecio.hh	/^        double gpsr_VXH[3];$/;"	m	struct:Ecio::__anon1
gpsr_flag_for_clear_flag	aux/include/ecio.hh	/^        int gpsr_flag_for_clear_flag;$/;"	m	struct:Ecio::__anon2
gpsr_gps_update	aux/include/ecio.hh	/^        int gpsr_gps_update;$/;"	m	struct:Ecio::__anon1
grab_SBII	aux/include/ecio.hh	/^    std::function<arma::vec3()> grab_SBII;$/;"	m	class:Ecio
grab_SXH	aux/include/ecio.hh	/^    std::function<arma::vec3()> grab_SXH;$/;"	m	class:Ecio
grab_TBI	aux/include/ecio.hh	/^    std::function<arma::mat33()> grab_TBI;$/;"	m	class:Ecio
grab_VBII	aux/include/ecio.hh	/^    std::function<arma::vec3()> grab_VBII;$/;"	m	class:Ecio
grab_VXH	aux/include/ecio.hh	/^    std::function<arma::vec3()> grab_VXH;$/;"	m	class:Ecio
grab_computed_FSPB	aux/include/ecio.hh	/^    std::function<arma::vec3()> grab_computed_FSPB;$/;"	m	class:Ecio
grab_computed_WBIB	aux/include/ecio.hh	/^    std::function<arma::vec3()> grab_computed_WBIB;$/;"	m	class:Ecio
grab_dbi	aux/include/ecio.hh	/^    std::function<double()> grab_dbi;$/;"	m	class:Ecio
grab_dla	aux/include/ecio.hh	/^    std::function<double()> grab_dla;$/;"	m	class:Ecio
grab_dlde	aux/include/ecio.hh	/^    std::function<double()> grab_dlde;$/;"	m	class:Ecio
grab_dma	aux/include/ecio.hh	/^    std::function<double()> grab_dma;$/;"	m	class:Ecio
grab_dmde	aux/include/ecio.hh	/^    std::function<double()> grab_dmde;$/;"	m	class:Ecio
grab_dmq	aux/include/ecio.hh	/^    std::function<double()> grab_dmq;$/;"	m	class:Ecio
grab_dnb	aux/include/ecio.hh	/^    std::function<double()> grab_dnb;$/;"	m	class:Ecio
grab_dnd	aux/include/ecio.hh	/^    std::function<double()> grab_dnd;$/;"	m	class:Ecio
grab_dndr	aux/include/ecio.hh	/^    std::function<double()> grab_dndr;$/;"	m	class:Ecio
grab_dnr	aux/include/ecio.hh	/^    std::function<double()> grab_dnr;$/;"	m	class:Ecio
grab_dvbe	aux/include/ecio.hh	/^    std::function<double()> grab_dvbe;$/;"	m	class:Ecio
grab_dvbi	aux/include/ecio.hh	/^    std::function<double()> grab_dvbi;$/;"	m	class:Ecio
grab_dyb	aux/include/ecio.hh	/^    std::function<double()> grab_dyb;$/;"	m	class:Ecio
grab_error_of_computed_FSPB	aux/include/ecio.hh	/^    std::function<arma::vec3()> grab_error_of_computed_FSPB;$/;"	m	class:Ecio
grab_error_of_computed_WBIB	aux/include/ecio.hh	/^    std::function<arma::vec3()> grab_error_of_computed_WBIB;$/;"	m	class:Ecio
grab_fmassr	aux/include/ecio.hh	/^    std::function<double()> grab_fmassr;$/;"	m	class:Ecio
grab_gps_update	aux/include/ecio.hh	/^    std::function<int()> grab_gps_update;$/;"	m	class:Ecio
grab_gymax	aux/include/ecio.hh	/^    std::function<double()> grab_gymax;$/;"	m	class:Ecio
grab_mprop	aux/include/ecio.hh	/^    std::function<int()> grab_mprop;$/;"	m	class:Ecio
grab_pdynmc	aux/include/ecio.hh	/^    std::function<double()> grab_pdynmc;$/;"	m	class:Ecio
grab_ppcx	aux/include/ecio.hh	/^    std::function<double()> grab_ppcx;$/;"	m	class:Ecio
grab_qqcx	aux/include/ecio.hh	/^    std::function<double()> grab_qqcx;$/;"	m	class:Ecio
grab_rrcx	aux/include/ecio.hh	/^    std::function<double()> grab_rrcx;$/;"	m	class:Ecio
grab_thtvdx	aux/include/ecio.hh	/^    std::function<double()> grab_thtvdx;$/;"	m	class:Ecio
gyro_EWBIB	aux/include/ecio.hh	/^        double gyro_EWBIB[3];$/;"	m	struct:Ecio::__anon1
gyro_WBICB	aux/include/ecio.hh	/^        double gyro_WBICB[3];$/;"	m	struct:Ecio::__anon1
gyro_ppcx	aux/include/ecio.hh	/^        double gyro_ppcx;$/;"	m	struct:Ecio::__anon1
gyro_qqcx	aux/include/ecio.hh	/^        double gyro_qqcx;$/;"	m	struct:Ecio::__anon1
gyro_rrcx	aux/include/ecio.hh	/^        double gyro_rrcx;$/;"	m	struct:Ecio::__anon1
ins_SBIIC	aux/include/ecio.hh	/^        double ins_SBIIC[3];$/;"	m	struct:Ecio::__anon2
ins_VBIIC	aux/include/ecio.hh	/^        double ins_VBIIC[3];$/;"	m	struct:Ecio::__anon2
ins_WBICI	aux/include/ecio.hh	/^        double ins_WBICI[3];$/;"	m	struct:Ecio::__anon2
kinematics_TBI	aux/include/ecio.hh	/^        double kinematics_TBI[3][3];$/;"	m	struct:Ecio::__anon1
net_data_rx_t	aux/include/ecio.hh	/^    } net_data_rx_t;$/;"	t	class:Ecio	typeref:struct:Ecio::__anon2
net_data_tx_t	aux/include/ecio.hh	/^    } net_data_tx_t;$/;"	t	class:Ecio	typeref:struct:Ecio::__anon1
newton_SBII	aux/include/ecio.hh	/^        double newton_SBII[3];$/;"	m	struct:Ecio::__anon1
newton_TDI	aux/include/ecio.hh	/^        double newton_TDI[3][3];$/;"	m	struct:Ecio::__anon1
newton_VBII	aux/include/ecio.hh	/^        double newton_VBII[3];$/;"	m	struct:Ecio::__anon1
newton_dbi	aux/include/ecio.hh	/^        double newton_dbi;$/;"	m	struct:Ecio::__anon1
newton_dvbe	aux/include/ecio.hh	/^        double newton_dvbe;$/;"	m	struct:Ecio::__anon1
newton_dvbi	aux/include/ecio.hh	/^        double newton_dvbi;$/;"	m	struct:Ecio::__anon1
newton_thtvdx	aux/include/ecio.hh	/^        double newton_thtvdx;$/;"	m	struct:Ecio::__anon1
propulsion_flag_for_set_ltg_thrust	aux/include/ecio.hh	/^        int propulsion_flag_for_set_ltg_thrust;$/;"	m	struct:Ecio::__anon2
propulsion_flag_for_set_no_thrust	aux/include/ecio.hh	/^        int propulsion_flag_for_set_no_thrust;$/;"	m	struct:Ecio::__anon2
propulsion_fmassr	aux/include/ecio.hh	/^        double propulsion_fmassr;              \/* *o (kg)     Remaining fuel mass*\/$/;"	m	struct:Ecio::__anon1
propulsion_thrust_state	aux/include/ecio.hh	/^        int propulsion_thrust_state;   \/* *o (--)     Propulsion mode, See THRUST TYPE*\/$/;"	m	struct:Ecio::__anon1
rcs_isEnable	aux/include/ecio.hh	/^        int rcs_isEnable;$/;"	m	struct:Ecio::__anon2
rcsfc_e_pitch	aux/include/ecio.hh	/^        double  rcsfc_e_pitch;         \/* *o  (--)   Pitch error signal *\/$/;"	m	struct:Ecio::__anon2
rcsfc_e_roll	aux/include/ecio.hh	/^        double  rcsfc_e_roll;          \/* *o  (--)   Roll error signal *\/$/;"	m	struct:Ecio::__anon2
rcsfc_e_yaw	aux/include/ecio.hh	/^        double  rcsfc_e_yaw;           \/* *o  (--)   Yaw error signal *\/$/;"	m	struct:Ecio::__anon2
rcsfc_rcs_mode	aux/include/ecio.hh	/^        int rcsfc_rcs_mode;  \/* *o  (--)   Attitude control, see RCS_MODE *\/$/;"	m	struct:Ecio::__anon2
Aux_receive_command_t	aux/include/ezio.hh	/^struct Aux_receive_command_t {$/;"	s	namespace:ezio
Aux_send_data_t	aux/include/ezio.hh	/^struct Aux_send_data_t {$/;"	s	namespace:ezio
COMMAND	aux/include/ezio.hh	/^enum COMMAND{$/;"	g	namespace:ezio
COMMAND_NUM	aux/include/ezio.hh	/^    COMMAND_NUM$/;"	e	enum:ezio::COMMAND
LOAD_DATA	aux/include/ezio.hh	/^    LOAD_DATA,$/;"	e	enum:ezio::COMMAND
SEND_PPS	aux/include/ezio.hh	/^    SEND_PPS,$/;"	e	enum:ezio::COMMAND
SET_PPS_WITDTH	aux/include/ezio.hh	/^    SET_PPS_WITDTH,$/;"	e	enum:ezio::COMMAND
WAIT_FC_COMMAND	aux/include/ezio.hh	/^    WAIT_FC_COMMAND,$/;"	e	enum:ezio::COMMAND
__EZIO_HH__	aux/include/ezio.hh	2;"	d
accel_EFSPB	aux/include/ezio.hh	/^    double accel_EFSPB[3];$/;"	m	struct:ezio::Aux_send_data_t
accel_FSPCB	aux/include/ezio.hh	/^    double accel_FSPCB[3];$/;"	m	struct:ezio::Aux_send_data_t
aero_value	aux/include/ezio.hh	/^    double aero_value[11];$/;"	m	struct:ezio::Aux_send_data_t
control_delecx	aux/include/ezio.hh	/^    double control_delecx;$/;"	m	struct:ezio::Aux_receive_command_t
control_delrcx	aux/include/ezio.hh	/^    double control_delrcx;$/;"	m	struct:ezio::Aux_receive_command_t
dev	aux/include/ezio.hh	/^    TCDevice dev;$/;"	m	class:ezio::master
dev	aux/include/ezio.hh	/^    TCDevice dev;$/;"	m	class:ezio::slave
env_pdynmc	aux/include/ezio.hh	/^    double env_pdynmc;$/;"	m	struct:ezio::Aux_send_data_t
err_hndlr	aux/include/ezio.hh	/^    TrickErrorHndlr   err_hndlr;$/;"	m	class:ezio::master
err_hndlr	aux/include/ezio.hh	/^    TrickErrorHndlr   err_hndlr;$/;"	m	class:ezio::slave
ezio	aux/include/ezio.hh	/^namespace ezio {$/;"	n
generate_pps_callback	aux/include/ezio.hh	/^    std::function<void(uint32_t)> generate_pps_callback;$/;"	m	class:ezio::slave
get_commands_callback	aux/include/ezio.hh	/^    std::function<Aux_receive_command_t()> get_commands_callback;$/;"	m	class:ezio::slave
gpsr_SXH	aux/include/ezio.hh	/^    double gpsr_SXH[3];$/;"	m	struct:ezio::Aux_send_data_t
gpsr_VXH	aux/include/ezio.hh	/^    double gpsr_VXH[3];$/;"	m	struct:ezio::Aux_send_data_t
gpsr_flag_for_clear_flag	aux/include/ezio.hh	/^    int gpsr_flag_for_clear_flag;$/;"	m	struct:ezio::Aux_receive_command_t
gpsr_gps_update	aux/include/ezio.hh	/^    int gpsr_gps_update;$/;"	m	struct:ezio::Aux_send_data_t
gyro_EWBIB	aux/include/ezio.hh	/^    double gyro_EWBIB[3];$/;"	m	struct:ezio::Aux_send_data_t
gyro_WBICB	aux/include/ezio.hh	/^    double gyro_WBICB[3];$/;"	m	struct:ezio::Aux_send_data_t
gyro_ppcx	aux/include/ezio.hh	/^    double gyro_ppcx;$/;"	m	struct:ezio::Aux_send_data_t
gyro_qqcx	aux/include/ezio.hh	/^    double gyro_qqcx;$/;"	m	struct:ezio::Aux_send_data_t
gyro_rrcx	aux/include/ezio.hh	/^    double gyro_rrcx;$/;"	m	struct:ezio::Aux_send_data_t
ins_SBIIC	aux/include/ezio.hh	/^    double ins_SBIIC[3];$/;"	m	struct:ezio::Aux_receive_command_t
ins_VBIIC	aux/include/ezio.hh	/^    double ins_VBIIC[3];$/;"	m	struct:ezio::Aux_receive_command_t
ins_WBICI	aux/include/ezio.hh	/^    double ins_WBICI[3];$/;"	m	struct:ezio::Aux_receive_command_t
kinematics_TBI	aux/include/ezio.hh	/^    double kinematics_TBI[3][3];$/;"	m	struct:ezio::Aux_send_data_t
load_data_callback	aux/include/ezio.hh	/^    std::function<void(SDT_INTERFACE_t, Aux_send_data_t)> load_data_callback;$/;"	m	class:ezio::slave
master	aux/include/ezio.hh	/^class master {$/;"	c	namespace:ezio
newton_SBII	aux/include/ezio.hh	/^    double newton_SBII[3];$/;"	m	struct:ezio::Aux_send_data_t
newton_TDI	aux/include/ezio.hh	/^    double newton_TDI[3][3];$/;"	m	struct:ezio::Aux_send_data_t
newton_VBII	aux/include/ezio.hh	/^    double newton_VBII[3];$/;"	m	struct:ezio::Aux_send_data_t
newton_dbi	aux/include/ezio.hh	/^    double newton_dbi;$/;"	m	struct:ezio::Aux_send_data_t
newton_dvbe	aux/include/ezio.hh	/^    double newton_dvbe;$/;"	m	struct:ezio::Aux_send_data_t
newton_dvbi	aux/include/ezio.hh	/^    double newton_dvbi;$/;"	m	struct:ezio::Aux_send_data_t
newton_thtvdx	aux/include/ezio.hh	/^    double newton_thtvdx;$/;"	m	struct:ezio::Aux_send_data_t
pps_width	aux/include/ezio.hh	/^    uint32_t pps_width;$/;"	m	class:ezio::slave
propulsion_flag_for_set_ltg_thrust	aux/include/ezio.hh	/^    int propulsion_flag_for_set_ltg_thrust;$/;"	m	struct:ezio::Aux_receive_command_t
propulsion_flag_for_set_no_thrust	aux/include/ezio.hh	/^    int propulsion_flag_for_set_no_thrust;$/;"	m	struct:ezio::Aux_receive_command_t
propulsion_fmassr	aux/include/ezio.hh	/^    double propulsion_fmassr;              \/* *o (kg)     Remaining fuel mass*\/$/;"	m	struct:ezio::Aux_send_data_t
propulsion_thrust_state	aux/include/ezio.hh	/^    int propulsion_thrust_state;   \/* *o (--)     Propulsion mode, See THRUST TYPE*\/$/;"	m	struct:ezio::Aux_send_data_t
rcs_isEnable	aux/include/ezio.hh	/^    int rcs_isEnable;$/;"	m	struct:ezio::Aux_receive_command_t
rcsfc_e_pitch	aux/include/ezio.hh	/^    double  rcsfc_e_pitch;         \/* *o  (--)   Pitch error signal *\/$/;"	m	struct:ezio::Aux_receive_command_t
rcsfc_e_roll	aux/include/ezio.hh	/^    double  rcsfc_e_roll;          \/* *o  (--)   Roll error signal *\/$/;"	m	struct:ezio::Aux_receive_command_t
rcsfc_e_yaw	aux/include/ezio.hh	/^    double  rcsfc_e_yaw;           \/* *o  (--)   Yaw error signal *\/$/;"	m	struct:ezio::Aux_receive_command_t
rcsfc_rcs_mode	aux/include/ezio.hh	/^    int rcsfc_rcs_mode;  \/* *o  (--)   Attitude control, see RCS_MODE *\/$/;"	m	struct:ezio::Aux_receive_command_t
slave	aux/include/ezio.hh	/^class slave {$/;"	c	namespace:ezio
Transceiver	aux/include/transceiver.hh	/^    Transceiver() {}$/;"	f	class:Transceiver
Transceiver	aux/include/transceiver.hh	/^class Transceiver {$/;"	c
TransceiverProxy	aux/include/transceiver.hh	/^    TransceiverProxy(Transceiver *trans , std::string cid, std::string id)$/;"	f	class:TransceiverProxy
TransceiverProxy	aux/include/transceiver.hh	/^class TransceiverProxy{$/;"	c
__TRANSCEIVER_HH__	aux/include/transceiver.hh	2;"	d
cid	aux/include/transceiver.hh	/^    std::string cid;$/;"	m	class:TransceiverProxy
data_double_in	aux/include/transceiver.hh	/^    std::map<std::string, double> data_double_in;$/;"	m	class:Transceiver
data_double_out	aux/include/transceiver.hh	/^    std::map<std::string, std::function<double()>> data_double_out;$/;"	m	class:Transceiver
data_gpsr_in	aux/include/transceiver.hh	/^    std::map<std::string, transmit_channel*> data_gpsr_in;$/;"	m	class:Transceiver
data_gpsr_out	aux/include/transceiver.hh	/^    std::map<std::string, std::function<transmit_channel*()>> data_gpsr_out;$/;"	m	class:Transceiver
data_mat_in	aux/include/transceiver.hh	/^    std::map<std::string, arma::mat> data_mat_in;$/;"	m	class:Transceiver
data_mat_out	aux/include/transceiver.hh	/^    std::map<std::string, std::function<arma::mat()>> data_mat_out;$/;"	m	class:Transceiver
dev	aux/include/transceiver.hh	/^    TCDevice dev;$/;"	m	class:Transceiver
err_hndlr	aux/include/transceiver.hh	/^    TrickErrorHndlr   err_hndlr;$/;"	m	class:Transceiver
id	aux/include/transceiver.hh	/^    std::string id;$/;"	m	class:TransceiverProxy
operator std::function<arma::mat	aux/include/transceiver.hh	/^    operator std::function<arma::mat()> () {$/;"	f	class:TransceiverProxy
operator std::function<arma::mat33	aux/include/transceiver.hh	/^    operator std::function<arma::mat33()> () {$/;"	f	class:TransceiverProxy
operator std::function<arma::vec2	aux/include/transceiver.hh	/^    operator std::function<arma::vec2()> () {$/;"	f	class:TransceiverProxy
operator std::function<arma::vec3	aux/include/transceiver.hh	/^    operator std::function<arma::vec3()> () {$/;"	f	class:TransceiverProxy
operator std::function<bool	aux/include/transceiver.hh	/^    operator std::function<bool()> () {$/;"	f	class:TransceiverProxy
operator std::function<double	aux/include/transceiver.hh	/^    operator std::function<double()> () {$/;"	f	class:TransceiverProxy
operator std::function<int	aux/include/transceiver.hh	/^    operator std::function<int()> () {$/;"	f	class:TransceiverProxy
operator std::function<transmit_channel*	aux/include/transceiver.hh	/^    operator std::function<transmit_channel*()> () {$/;"	f	class:TransceiverProxy
transceiver	aux/include/transceiver.hh	/^    Transceiver *transceiver;$/;"	m	class:TransceiverProxy
Ecio	aux/src/ecio.cpp	/^Ecio::Ecio() {$/;"	f	class:Ecio
PPS_GPIO	aux/src/ecio.cpp	18;"	d	file:
SYNC_GPIO	aux/src/ecio.cpp	19;"	d	file:
get_SBIIC	aux/src/ecio.cpp	/^arma::vec3 Ecio::get_SBIIC() {$/;"	f	class:Ecio
get_VBIIC	aux/src/ecio.cpp	/^arma::vec3 Ecio::get_VBIIC() {$/;"	f	class:Ecio
get_WBICI	aux/src/ecio.cpp	/^arma::vec3 Ecio::get_WBICI() {$/;"	f	class:Ecio
get_clear_gps_flag	aux/src/ecio.cpp	/^int Ecio::get_clear_gps_flag() {$/;"	f	class:Ecio
get_delecx	aux/src/ecio.cpp	/^double Ecio::get_delecx() {$/;"	f	class:Ecio
get_delrcx	aux/src/ecio.cpp	/^double Ecio::get_delrcx() {$/;"	f	class:Ecio
get_e_pitch	aux/src/ecio.cpp	/^double Ecio::get_e_pitch() {$/;"	f	class:Ecio
get_e_roll	aux/src/ecio.cpp	/^double Ecio::get_e_roll() {$/;"	f	class:Ecio
get_e_yaw	aux/src/ecio.cpp	/^double Ecio::get_e_yaw() {$/;"	f	class:Ecio
get_ltg_thrust_flag	aux/src/ecio.cpp	/^int Ecio::get_ltg_thrust_flag() {$/;"	f	class:Ecio
get_no_thrust_flag	aux/src/ecio.cpp	/^int Ecio::get_no_thrust_flag() {$/;"	f	class:Ecio
get_rcs_mode	aux/src/ecio.cpp	/^enum RCS_FC::RCS_MODE Ecio::get_rcs_mode() {$/;"	f	class:Ecio
isEnabled	aux/src/ecio.cpp	/^bool Ecio::isEnabled() {$/;"	f	class:Ecio
mat33_to_array	aux/src/ecio.cpp	/^void Ecio::mat33_to_array(arma::mat33 in, double array[3][3]) {$/;"	f	class:Ecio
prepare_ethercat_packet	aux/src/ecio.cpp	/^void Ecio::prepare_ethercat_packet() {$/;"	f	class:Ecio
receive_fc_data	aux/src/ecio.cpp	/^void Ecio::receive_fc_data() {$/;"	f	class:Ecio
send_pps	aux/src/ecio.cpp	/^void Ecio::send_pps() {$/;"	f	class:Ecio
vec3_to_array	aux/src/ecio.cpp	/^void Ecio::vec3_to_array(arma::vec3 in, double array[3]) {$/;"	f	class:Ecio
wait_ready	aux/src/ecio.cpp	/^void Ecio::wait_ready() {$/;"	f	class:Ecio
~Ecio	aux/src/ecio.cpp	/^Ecio::~Ecio() {$/;"	f	class:Ecio
load_data	aux/src/ezio.cpp	/^void ezio::master::load_data(SDT_INTERFACE_t in, Aux_send_data_t aux_in) {$/;"	f	class:ezio::master
master	aux/src/ezio.cpp	/^ezio::master::master(char* name) {$/;"	f	class:ezio::master
process_incoming_command	aux/src/ezio.cpp	/^void ezio::slave::process_incoming_command() {$/;"	f	class:ezio::slave
send_pps	aux/src/ezio.cpp	/^void ezio::master::send_pps() {$/;"	f	class:ezio::master
set_pps_width	aux/src/ezio.cpp	/^void ezio::master::set_pps_width(uint32_t us) {$/;"	f	class:ezio::master
slave	aux/src/ezio.cpp	/^ezio::slave::slave(char* name) : pps_width(10) {$/;"	f	class:ezio::slave
wait_fc_command	aux/src/ezio.cpp	/^Aux_receive_command_t ezio::master::wait_fc_command() {$/;"	f	class:ezio::master
~master	aux/src/ezio.cpp	/^ezio::master::~master() {$/;"	f	class:ezio::master
~slave	aux/src/ezio.cpp	/^ezio::slave::~slave() {$/;"	f	class:ezio::slave
dm_time	aux/src/time.cpp	/^void time_management::dm_time() { \/* convert simulation time to gps time *\/$/;"	f	class:time_management
get_gpstime	aux/src/time.cpp	/^time_util::GPS_TIME time_management::get_gpstime() {$/;"	f	class:time_management
get_modified_julian_date	aux/src/time.cpp	/^time_util::Modified_julian_date time_management::get_modified_julian_date() {$/;"	f	class:time_management
get_utctime	aux/src/time.cpp	/^time_util::UTC_TIME time_management::get_utctime() {$/;"	f	class:time_management
load_start_time	aux/src/time.cpp	/^void time_management::load_start_time(unsigned int Year, unsigned int DOY, unsigned int Hour, unsigned int Min, unsigned int Sec) {$/;"	f	class:time_management
time_management	aux/src/time.cpp	/^time_management::time_management() {$/;"	f	class:time_management
DOUBLE	aux/src/transceiver.cpp	/^    DOUBLE,$/;"	e	enum:packet_type	file:
MAT	aux/src/transceiver.cpp	/^    MAT,$/;"	e	enum:packet_type	file:
STRUCT	aux/src/transceiver.cpp	/^    STRUCT$/;"	e	enum:packet_type	file:
TR_BUFFER_SIZE	aux/src/transceiver.cpp	9;"	d	file:
generic_header	aux/src/transceiver.cpp	/^struct __attribute__((__packed__)) generic_header {$/;"	s	file:
get_double	aux/src/transceiver.cpp	/^std::function<double()> Transceiver::get_double(std::string cid, std::string id) {$/;"	f	class:Transceiver
get_gpsr	aux/src/transceiver.cpp	/^std::function<transmit_channel *()> Transceiver::get_gpsr(std::string cid, std::string id) {$/;"	f	class:Transceiver
get_mat	aux/src/transceiver.cpp	/^std::function<arma::mat()> Transceiver::get_mat(std::string cid, std::string id) {$/;"	f	class:Transceiver
initialize_connection	aux/src/transceiver.cpp	/^void Transceiver::initialize_connection(char* name) {$/;"	f	class:Transceiver
mat_header	aux/src/transceiver.cpp	/^struct __attribute__((__packed__)) mat_header {$/;"	s	file:
name_length	aux/src/transceiver.cpp	/^    unsigned int name_length;$/;"	m	struct:generic_header	file:
operator ()	aux/src/transceiver.cpp	/^TransceiverProxy Transceiver::operator()(std::string cid, std::string id) {$/;"	f	class:Transceiver
packet_type	aux/src/transceiver.cpp	/^enum packet_type {$/;"	g	file:
receive	aux/src/transceiver.cpp	/^void Transceiver::receive() {$/;"	f	class:Transceiver
register_for_transmit	aux/src/transceiver.cpp	/^void Transceiver::register_for_transmit(std::string cid, std::string id, std::function<arma::mat()> in) {$/;"	f	class:Transceiver
register_for_transmit	aux/src/transceiver.cpp	/^void Transceiver::register_for_transmit(std::string cid, std::string id, std::function<double()> in) {$/;"	f	class:Transceiver
register_for_transmit	aux/src/transceiver.cpp	/^void Transceiver::register_for_transmit(std::string cid, std::string id, std::function<transmit_channel*()> in) {$/;"	f	class:Transceiver
transmit	aux/src/transceiver.cpp	/^void Transceiver::transmit() {$/;"	f	class:Transceiver
type	aux/src/transceiver.cpp	/^    unsigned int type;$/;"	m	struct:generic_header	file:
x	aux/src/transceiver.cpp	/^    uint64_t x : 4;$/;"	m	struct:mat_header	file:
y	aux/src/transceiver.cpp	/^    uint64_t y : 4;$/;"	m	struct:mat_header	file:
__CAD_UTIL_HH__	cad/include/cad_utility.hh	2;"	d
cad	cad/include/cad_utility.hh	/^namespace cad {$/;"	n
CHARL	cad/include/datadeck.hh	15;"	d
CHARN	cad/include/datadeck.hh	14;"	d
Datadeck	cad/include/datadeck.hh	/^    Datadeck() {}$/;"	f	class:Datadeck
Datadeck	cad/include/datadeck.hh	/^class Datadeck {$/;"	c
Table	cad/include/datadeck.hh	/^    Table() {}$/;"	f	class:Table
Table	cad/include/datadeck.hh	/^class Table {$/;"	c
__DATADECK_HH__	cad/include/datadeck.hh	2;"	d
add_table	cad/include/datadeck.hh	/^    void add_table(Table &pt) {$/;"	f	class:Datadeck
alloc_mem	cad/include/datadeck.hh	/^    void alloc_mem() {$/;"	f	class:Datadeck
capacity	cad/include/datadeck.hh	/^    int capacity;$/;"	m	class:Datadeck
data	cad/include/datadeck.hh	/^    std::vector<double> data;$/;"	m	class:Table
dim	cad/include/datadeck.hh	/^    int dim;$/;"	m	class:Table
get_capacity	cad/include/datadeck.hh	/^    int get_capacity() {return capacity;}$/;"	f	class:Datadeck
get_counter	cad/include/datadeck.hh	/^    int get_counter() {return tbl_counter;}$/;"	f	class:Datadeck
get_dim	cad/include/datadeck.hh	/^    int get_dim() {return dim;}$/;"	f	class:Table
get_name	cad/include/datadeck.hh	/^    std::string get_name() {return name;}$/;"	f	class:Table
get_tbl	cad/include/datadeck.hh	/^    Table * get_tbl(int slot) {$/;"	f	class:Datadeck
get_title	cad/include/datadeck.hh	/^    std::string get_title() {return title;}$/;"	f	class:Datadeck
get_var1_dim	cad/include/datadeck.hh	/^    int get_var1_dim() {return var1_dim;}$/;"	f	class:Table
get_var2_dim	cad/include/datadeck.hh	/^    int get_var2_dim() {return var2_dim;}$/;"	f	class:Table
get_var3_dim	cad/include/datadeck.hh	/^    int get_var3_dim() {return var3_dim;}$/;"	f	class:Table
name	cad/include/datadeck.hh	/^    std::string name;$/;"	m	class:Table
operator []	cad/include/datadeck.hh	/^    Table * operator[](int slot) {$/;"	f	class:Datadeck
set_capacity	cad/include/datadeck.hh	/^    void set_capacity(int table_numbers) {capacity = table_numbers;}$/;"	f	class:Datadeck
set_counter	cad/include/datadeck.hh	/^    void set_counter(int count) {tbl_counter = count;}$/;"	f	class:Datadeck
set_data	cad/include/datadeck.hh	/^    void set_data(int offset, double value) {$/;"	f	class:Table
set_dim	cad/include/datadeck.hh	/^    void set_dim(int table_dim) {dim = table_dim;}$/;"	f	class:Table
set_name	cad/include/datadeck.hh	/^    void set_name(std::string tbl_name) {name = tbl_name;}$/;"	f	class:Table
set_title	cad/include/datadeck.hh	/^    void set_title(std::string deck_title) {title = deck_title;}$/;"	f	class:Datadeck
set_var1_dim	cad/include/datadeck.hh	/^    void set_var1_dim(int size) {var1_dim = size;}$/;"	f	class:Table
set_var1_value	cad/include/datadeck.hh	/^    void set_var1_value(int offset, double value) {$/;"	f	class:Table
set_var2_dim	cad/include/datadeck.hh	/^    void set_var2_dim(int size) {var2_dim = size;}$/;"	f	class:Table
set_var2_value	cad/include/datadeck.hh	/^    void set_var2_value(int offset, double value) {$/;"	f	class:Table
set_var3_dim	cad/include/datadeck.hh	/^    void set_var3_dim(int size) {var3_dim = size;}$/;"	f	class:Table
set_var3_value	cad/include/datadeck.hh	/^    void set_var3_value(int offset, double value) {$/;"	f	class:Table
table_ptr	cad/include/datadeck.hh	/^    std::vector<Table*> table_ptr;$/;"	m	class:Datadeck
tbl_counter	cad/include/datadeck.hh	/^    int tbl_counter;$/;"	m	class:Datadeck
title	cad/include/datadeck.hh	/^    std::string title;$/;"	m	class:Datadeck
var1_dim	cad/include/datadeck.hh	/^    int var1_dim;$/;"	m	class:Table
var1_values	cad/include/datadeck.hh	/^    std::vector<double> var1_values;$/;"	m	class:Table
var2_dim	cad/include/datadeck.hh	/^    int var2_dim;$/;"	m	class:Table
var2_values	cad/include/datadeck.hh	/^    std::vector<double> var2_values;$/;"	m	class:Table
var3_dim	cad/include/datadeck.hh	/^    int var3_dim;$/;"	m	class:Table
var3_values	cad/include/datadeck.hh	/^    std::vector<double> var3_values;$/;"	m	class:Table
~Datadeck	cad/include/datadeck.hh	/^    virtual ~Datadeck() {}$/;"	f	class:Datadeck
~Table	cad/include/datadeck.hh	/^    virtual ~Table() {}$/;"	f	class:Table
Atmosphere	cad/include/env/atmosphere.hh	/^    Atmosphere() {}$/;"	f	class:cad::Atmosphere
Atmosphere	cad/include/env/atmosphere.hh	/^class Atmosphere {$/;"	c	namespace:cad
__Atmosphere_HH__	cad/include/env/atmosphere.hh	2;"	d
altitude	cad/include/env/atmosphere.hh	/^    double altitude;$/;"	m	class:cad::Atmosphere
cad	cad/include/env/atmosphere.hh	/^namespace cad {$/;"	n
density	cad/include/env/atmosphere.hh	/^    double density;     \/* *o (kg\/m3)      Atmospheric Density *\/$/;"	m	class:cad::Atmosphere
dwind	cad/include/env/atmosphere.hh	/^    double dwind;$/;"	m	class:cad::Atmosphere
get_density	cad/include/env/atmosphere.hh	/^    virtual double get_density() { return density; }$/;"	f	class:cad::Atmosphere
get_direction_of_wind	cad/include/env/atmosphere.hh	/^    virtual double get_direction_of_wind() { return dwind; }$/;"	f	class:cad::Atmosphere
get_pressure	cad/include/env/atmosphere.hh	/^    virtual double get_pressure() { return pressure; }$/;"	f	class:cad::Atmosphere
get_speed_of_sound	cad/include/env/atmosphere.hh	/^    virtual double get_speed_of_sound() { return vsound; }$/;"	f	class:cad::Atmosphere
get_speed_of_wind	cad/include/env/atmosphere.hh	/^    virtual double get_speed_of_wind() { return vwind; }$/;"	f	class:cad::Atmosphere
get_temperature_in_kelvin	cad/include/env/atmosphere.hh	/^    virtual double get_temperature_in_kelvin() { return tempk; }$/;"	f	class:cad::Atmosphere
name	cad/include/env/atmosphere.hh	/^    char name[256];$/;"	m	class:cad::Atmosphere
pressure	cad/include/env/atmosphere.hh	/^    double pressure;    \/* *o (pa)         Atmospheric pressure *\/$/;"	m	class:cad::Atmosphere
set_altitude	cad/include/env/atmosphere.hh	/^    virtual void set_altitude(double altitude_in_meter) {}$/;"	f	class:cad::Atmosphere
tempk	cad/include/env/atmosphere.hh	/^    double tempk;       \/* *o (K)          Atmospheric temperature *\/$/;"	m	class:cad::Atmosphere
vsound	cad/include/env/atmosphere.hh	/^    double vsound;$/;"	m	class:cad::Atmosphere
vwind	cad/include/env/atmosphere.hh	/^    double vwind;$/;"	m	class:cad::Atmosphere
~Atmosphere	cad/include/env/atmosphere.hh	/^    virtual ~Atmosphere() {}$/;"	f	class:cad::Atmosphere
Atmosphere76	cad/include/env/atmosphere76.hh	/^class Atmosphere76 : public Atmosphere {$/;"	c	namespace:cad
__Atmosphere76_HH__	cad/include/env/atmosphere76.hh	2;"	d
cad	cad/include/env/atmosphere76.hh	/^namespace cad {$/;"	n
Atmosphere_nasa2002	cad/include/env/atmosphere_nasa2002.hh	/^class Atmosphere_nasa2002 : public Atmosphere {$/;"	c	namespace:cad
__Atmosphere_nasa2002_HH__	cad/include/env/atmosphere_nasa2002.hh	2;"	d
cad	cad/include/env/atmosphere_nasa2002.hh	/^namespace cad {$/;"	n
Atmosphere_weatherdeck	cad/include/env/atmosphere_weatherdeck.hh	/^class Atmosphere_weatherdeck : public Atmosphere {$/;"	c	namespace:cad
__Atmosphere_weatherdeck_HH__	cad/include/env/atmosphere_weatherdeck.hh	2;"	d
cad	cad/include/env/atmosphere_weatherdeck.hh	/^namespace cad {$/;"	n
weathertable	cad/include/env/atmosphere_weatherdeck.hh	/^    Datadeck weathertable;$/;"	m	class:cad::Atmosphere_weatherdeck
VAED	cad/include/env/wind.hh	/^    arma::vec VAED;     \/* *o (m\/s)        Smoothed wind velocity in geodetic coord *\/$/;"	m	class:cad::Wind
VAEDS	cad/include/env/wind.hh	/^    arma::vec VAEDS;    \/* *o (m\/s)        Smoothed wind velocity in geodetic coord - m\/s *\/$/;"	m	class:cad::Wind
VAEDSD	cad/include/env/wind.hh	/^    arma::vec VAEDSD;   \/* *o (m\/s)        Smoothed wind velocity derivative - m\/s *\/$/;"	m	class:cad::Wind
Wind	cad/include/env/wind.hh	/^class Wind {$/;"	c	namespace:cad
_VAED	cad/include/env/wind.hh	/^    double _VAED[3];    \/* *o (m\/s)        Smoothed wind velocity in geodetic coord *\/$/;"	m	class:cad::Wind
_VAEDS	cad/include/env/wind.hh	/^    double _VAEDS[3];   \/* *o (m\/s)        Smoothed wind velocity in geodetic coord - m\/s *\/$/;"	m	class:cad::Wind
_VAEDSD	cad/include/env/wind.hh	/^    double _VAEDSD[3];  \/* *o (m\/s)        Smoothed wind velocity derivative - m\/s *\/$/;"	m	class:cad::Wind
__wind_HH__	cad/include/env/wind.hh	2;"	d
altitude	cad/include/env/wind.hh	/^    double altitude;    \/* *o (m)          Current Altitude *\/$/;"	m	class:cad::Wind
cad	cad/include/env/wind.hh	/^namespace cad {$/;"	n
disable_turbulance	cad/include/env/wind.hh	/^    virtual void disable_turbulance() { has_turbulance = false; }$/;"	f	class:cad::Wind
enable_turbulance	cad/include/env/wind.hh	/^    virtual void enable_turbulance(double turb_length, double turb_sigma,$/;"	f	class:cad::Wind
gauss_value	cad/include/env/wind.hh	/^    double gauss_value; \/* *o (--)         White Gaussian noise - ND*\/$/;"	m	class:cad::Wind
get_VAED	cad/include/env/wind.hh	/^    virtual arma::vec3 get_VAED() { return VAED; }$/;"	f	class:cad::Wind
get_VAEDS	cad/include/env/wind.hh	/^    virtual arma::vec3 get_VAEDS() { return VAEDS; }$/;"	f	class:cad::Wind
get_VAEDSD	cad/include/env/wind.hh	/^    virtual arma::vec3 get_VAEDSD() { return VAEDSD; }$/;"	f	class:cad::Wind
get_direction_of_wind	cad/include/env/wind.hh	/^    virtual double get_direction_of_wind() { return psiwdx; }$/;"	f	class:cad::Wind
get_speed_of_wind	cad/include/env/wind.hh	/^    virtual double get_speed_of_wind() { return vwind; }$/;"	f	class:cad::Wind
has_turbulance	cad/include/env/wind.hh	/^    bool   has_turbulance;$/;"	m	class:cad::Wind
name	cad/include/env/wind.hh	/^    char name[256];$/;"	m	class:cad::Wind
psiwdx	cad/include/env/wind.hh	/^    double psiwdx;      \/* *o (d)          Wind direction from north *\/$/;"	m	class:cad::Wind
set_altitude	cad/include/env/wind.hh	/^    virtual void set_altitude(double altitude_in_meter) {}$/;"	f	class:cad::Wind
tau	cad/include/env/wind.hh	/^    double tau;         \/* *o (m\/s)        Turblence velocity component in load factor plane - m\/s*\/$/;"	m	class:cad::Wind
taux1	cad/include/env/wind.hh	/^    double taux1;       \/* *o (--)         First turbulence state variable - ND*\/$/;"	m	class:cad::Wind
taux1d	cad/include/env/wind.hh	/^    double taux1d;      \/* *o (--)         First turbulence state variable - ND*\/$/;"	m	class:cad::Wind
taux2	cad/include/env/wind.hh	/^    double taux2;       \/* *o (1\/s)        First turbulence state variable derivative - 1\/s*\/$/;"	m	class:cad::Wind
taux2d	cad/include/env/wind.hh	/^    double taux2d;      \/* *o (1\/s)        First turbulence state variable derivative - 1\/s*\/$/;"	m	class:cad::Wind
turb_length	cad/include/env/wind.hh	/^    double turb_length; \/* *o (m)          Turbulence correlation length - m*\/$/;"	m	class:cad::Wind
turb_sigma	cad/include/env/wind.hh	/^    double turb_sigma;  \/* *o (m\/s)        Turbulence magnitude (1sigma) - m\/s*\/$/;"	m	class:cad::Wind
twind	cad/include/env/wind.hh	/^    double twind;       \/* *o (s)          Wind smoothing time constant - sec *\/$/;"	m	class:cad::Wind
vertical_wind_speed	cad/include/env/wind.hh	/^    double vertical_wind_speed; \/* *o (m\/s)        Vertical air speed (pos.down) - m\/s *\/$/;"	m	class:cad::Wind
vwind	cad/include/env/wind.hh	/^    double vwind;       \/* *o (m\/s)        Wind Speed *\/$/;"	m	class:cad::Wind
~Wind	cad/include/env/wind.hh	/^    virtual ~Wind() {}$/;"	f	class:cad::Wind
Wind_Constant	cad/include/env/wind_constant.hh	/^class Wind_Constant : public Wind {$/;"	c	namespace:cad
__wind_constant_HH__	cad/include/env/wind_constant.hh	2;"	d
cad	cad/include/env/wind_constant.hh	/^namespace cad {$/;"	n
Wind_No	cad/include/env/wind_no.hh	/^class Wind_No : public Wind {$/;"	c	namespace:cad
__wind_no_HH__	cad/include/env/wind_no.hh	2;"	d
cad	cad/include/env/wind_no.hh	/^namespace cad {$/;"	n
Wind_Tabular	cad/include/env/wind_tabular.hh	/^class Wind_Tabular : public Wind {$/;"	c	namespace:cad
__wind_tabular_HH__	cad/include/env/wind_tabular.hh	2;"	d
cad	cad/include/env/wind_tabular.hh	/^namespace cad {$/;"	n
weathertable	cad/include/env/wind_tabular.hh	/^    Datadeck weathertable;$/;"	m	class:cad::Wind_Tabular
AGRAV	cad/include/global_constants.hh	/^double const AGRAV =$/;"	v
ALSB	cad/include/global_constants.hh	/^const double ALSB = 0.01 * (1.0 \/ 65536.0);$/;"	v
AMSB	cad/include/global_constants.hh	/^const double AMSB = 0.8 * 0.001 * 9.81;  \/\/ ADIS16488 acc MSB = 0.8mg$/;"	v
C20	cad/include/global_constants.hh	/^double const C20 =$/;"	v
CA_SEQ_LEN	cad/include/global_constants.hh	/^const int  CA_SEQ_LEN = 1023;$/;"	v
DEG	cad/include/global_constants.hh	/^double const DEG = 57.2957795130823;    \/\/\/< conversion factor rad->deg$/;"	v
DM_arcsec2r	cad/include/global_constants.hh	/^const double DM_arcsec2r =  4.848136811e-6; \/* arcsecond to radian *\/$/;"	v
DM_sec2r	cad/include/global_constants.hh	/^const double DM_sec2r    =  0.000072722052; \/* second to radian *\/$/;"	v
EARTH_MASS	cad/include/global_constants.hh	/^double const EARTH_MASS = 5.973332e24;  \/\/\/< mass of the earth - kg$/;"	v
EPHEM_ARRAY_SIZE	cad/include/global_constants.hh	/^const int  EPHEM_ARRAY_SIZE = 13;$/;"	v
EPS	cad/include/global_constants.hh	/^double const EPS = 1.e-10;       \/\/\/< machine precision error (type double)$/;"	v
FALSE	cad/include/global_constants.hh	24;"	d
FLATTENING	cad/include/global_constants.hh	/^double const FLATTENING =$/;"	v
FOOT	cad/include/global_constants.hh	/^double const FOOT = 3.280834;           \/\/\/< conversion factor m->ft$/;"	v
G	cad/include/global_constants.hh	/^double const G = 6.673e-11;  \/\/\/< universal gravitational constant - Nm^2\/kg^2$/;"	v
GLSB	cad/include/global_constants.hh	/^const double GLSB = 0.01 * (1.0 \/ 65536.0);$/;"	v
GM	cad/include/global_constants.hh	/^double const GM =$/;"	v
GMSB	cad/include/global_constants.hh	/^const double GMSB = 0.02 * RAD;  \/\/ ADIS16488 gyro MSB = 0.02d\/s$/;"	v
GW_CLONG	cad/include/global_constants.hh	/^double const GW_CLONG =$/;"	v
ILARGE	cad/include/global_constants.hh	/^int const ILARGE = 9999;         \/\/\/< large integer number$/;"	v
KBOLTZ	cad/include/global_constants.hh	/^double const KBOLTZ = 1.38e-23;  \/\/\/< Boltzmann's constant - Ws\/K$/;"	v
LAMBDA_L1	cad/include/global_constants.hh	/^const double  LAMBDA_L1 = 0.190293672798365;$/;"	v
LARGE	cad/include/global_constants.hh	/^double const LARGE = 1e10;       \/\/\/< large real number (type double)$/;"	v
MAX_CHAN	cad/include/global_constants.hh	/^const int  MAX_CHAN = 12;$/;"	v
MAX_CHAR	cad/include/global_constants.hh	/^const int  MAX_CHAR = 100;$/;"	v
MAX_SAT	cad/include/global_constants.hh	/^const int  MAX_SAT = 32;$/;"	v
NEVENT	cad/include/global_constants.hh	/^int const NEVENT = 20;    \/\/\/< max number of events$/;"	v
NHYPER	cad/include/global_constants.hh	/^int const NHYPER = 950;   \/\/\/< size of 'hyper' module-variable array$/;"	v
NMARKOV	cad/include/global_constants.hh	/^int const NMARKOV = 20;  \/\/\/< max number of Markov noise variables$/;"	v
NMILES	cad/include/global_constants.hh	/^double const NMILES = 5.399568e-4;      \/\/\/< conversion factor m->nm$/;"	v
NROUND6	cad/include/global_constants.hh	/^int const NROUND6 = 600;  \/\/\/< size of 'round6' module-variable array$/;"	v
NVAR	cad/include/global_constants.hh	/^int const NVAR = 50;     \/\/\/< max number of variables to be input at every event$/;"	v
N_DWRD	cad/include/global_constants.hh	/^const int  N_DWRD = (N_SBF+1)*N_DWRD_SBF;$/;"	v
N_DWRD_SBF	cad/include/global_constants.hh	/^const int  N_DWRD_SBF = 10;$/;"	v
N_SBF	cad/include/global_constants.hh	/^const int  N_SBF = 5;$/;"	v
PI	cad/include/global_constants.hh	/^double const PI = 3.1415926536;  \/\/\/< circumference of unit diameter circle$/;"	v
POW2_M19	cad/include/global_constants.hh	/^const double POW2_M19 = 1.907348632812500e-6;$/;"	v
POW2_M24	cad/include/global_constants.hh	/^const double POW2_M24 = 5.960464477539063e-008;$/;"	v
POW2_M27	cad/include/global_constants.hh	/^const double POW2_M27 = 7.450580596923828e-009;$/;"	v
POW2_M29	cad/include/global_constants.hh	/^const double POW2_M29 = 1.862645149230957e-9;$/;"	v
POW2_M30	cad/include/global_constants.hh	/^const double POW2_M30 = 9.313225746154785e-010;$/;"	v
POW2_M31	cad/include/global_constants.hh	/^const double POW2_M31 = 4.656612873077393e-10;$/;"	v
POW2_M33	cad/include/global_constants.hh	/^const double POW2_M33 = 1.164153218269348e-10;$/;"	v
POW2_M43	cad/include/global_constants.hh	/^const double POW2_M43 = 1.136868377216160e-13;$/;"	v
POW2_M5	cad/include/global_constants.hh	/^const double POW2_M5 = 0.03125;$/;"	v
POW2_M50	cad/include/global_constants.hh	/^const double POW2_M50 = 8.881784197001252e-016;$/;"	v
POW2_M55	cad/include/global_constants.hh	/^const double POW2_M55 = 2.775557561562891e-17;$/;"	v
RAD	cad/include/global_constants.hh	/^double const RAD = 0.0174532925199432;  \/\/\/< conversion factor deg->rad$/;"	v
REARTH	cad/include/global_constants.hh	/^double const REARTH = 6378000;  \/\/\/< mean earth radius - m$/;"	v
RGAS	cad/include/global_constants.hh	/^double const RGAS = 287.053;     \/\/\/< ideal gas constant - J\/(K*kg)=N*m\/(K*kg)$/;"	v
SECONDS_IN_DAY	cad/include/global_constants.hh	/^const int  SECONDS_IN_DAY = 86400;$/;"	v
SECONDS_IN_HOUR	cad/include/global_constants.hh	/^const int  SECONDS_IN_HOUR = 3600;$/;"	v
SMAJOR_AXIS	cad/include/global_constants.hh	/^double const SMAJOR_AXIS =$/;"	v
SMALL	cad/include/global_constants.hh	/^double const SMALL = 1e-7;       \/\/\/< small real number$/;"	v
SPEED_OF_LIGHT	cad/include/global_constants.hh	/^const double  SPEED_OF_LIGHT = 2.99792458e8;$/;"	v
TRUE	cad/include/global_constants.hh	21;"	d
WEII1	cad/include/global_constants.hh	/^double const WEII1 = 1.20824e-7;$/;"	v
WEII2	cad/include/global_constants.hh	/^double const WEII2 = -2.944e-9;$/;"	v
WEII3	cad/include/global_constants.hh	/^double const WEII3 = 7.292115e-5;   \/\/\/< angular rotation of earth - rad\/s$/;"	v
WGS84_ECCENTRICITY	cad/include/global_constants.hh	/^const double WGS84_ECCENTRICITY = 0.0818191908426;$/;"	v
global_constants__HPP	cad/include/global_constants.hh	18;"	d
Schmitt_Trigger	cad/include/schmitt_trigger.hh	/^class Schmitt_Trigger {$/;"	c
__SCHTRI_HH__	cad/include/schmitt_trigger.hh	2;"	d
dead_zone	cad/include/schmitt_trigger.hh	/^    double  dead_zone;       \/* *o  (--)    Dead zone of Schmitt trigger *\/$/;"	m	class:Schmitt_Trigger
hysteresis	cad/include/schmitt_trigger.hh	/^    double  hysteresis;      \/* *o  (--)    Hysteresis of Schmitt trigger *\/$/;"	m	class:Schmitt_Trigger
saved_value	cad/include/schmitt_trigger.hh	/^    double  saved_value;     \/* *o  (--)    Saved Value *\/$/;"	m	class:Schmitt_Trigger
distance	cad/src/cad_utility.cpp	/^double cad::distance(const double &lon1,$/;"	f	class:cad
geo84_in	cad/src/cad_utility.cpp	/^std::tuple<double, double, double> cad::geo84_in(arma::vec3 SBII,$/;"	f	class:cad
geo84vel_in	cad/src/cad_utility.cpp	/^std::tuple<double, double, double> cad::geo84vel_in(arma::vec3 SBII,$/;"	f	class:cad
geoc_in	cad/src/cad_utility.cpp	/^std::tuple<double, double, double> cad::geoc_in(arma::vec3 SBII,$/;"	f	class:cad
geoc_ine	cad/src/cad_utility.cpp	/^std::tuple<double, double, double> cad::geoc_ine(arma::vec3 SBIE) {$/;"	f	class:cad
grav84	cad/src/cad_utility.cpp	/^arma::vec3 cad::grav84(arma::vec3 SBII, const double &time) {$/;"	f	class:cad
in_geo84	cad/src/cad_utility.cpp	/^arma::vec3 cad::in_geo84(const double lon,$/;"	f	class:cad
in_geoc	cad/src/cad_utility.cpp	/^arma::vec3 cad::in_geoc(const double &lon,$/;"	f	class:cad
in_orb	cad/src/cad_utility.cpp	/^int cad::in_orb(arma::vec3 &SBII,$/;"	f	class:cad
kepler	cad/src/cad_utility.cpp	/^int cad::kepler(arma::vec3 &SPII,$/;"	f	class:cad
kepler1	cad/src/cad_utility.cpp	/^int cad::kepler1(arma::vec3 &SPII,$/;"	f	class:cad
kepler1_ucs	cad/src/cad_utility.cpp	/^std::tuple<double, double> cad::kepler1_ucs(const double &z) {$/;"	f	class:cad
orb_in	cad/src/cad_utility.cpp	/^int cad::orb_in(double &semi,$/;"	f	class:cad
tde84	cad/src/cad_utility.cpp	/^arma::mat33 cad::tde84(const double &lon,$/;"	f	class:cad
tdi84	cad/src/cad_utility.cpp	/^arma::mat33 cad::tdi84(const double &lon,$/;"	f	class:cad
tei	cad/src/cad_utility.cpp	/^arma::mat33 cad::tei(const double &time) {$/;"	f	class:cad
tge	cad/src/cad_utility.cpp	/^arma::mat33 cad::tge(const double &lon, const double &lat) {$/;"	f	class:cad
tgi84	cad/src/cad_utility.cpp	/^arma::mat33 cad::tgi84(const double &lon,$/;"	f	class:cad
tip	cad/src/cad_utility.cpp	/^arma::mat33 cad::tip(const double &incl,$/;"	f	class:cad
Datadeck	cad/src/datadeck.cpp	/^Datadeck::Datadeck(const char *file_name) {$/;"	f	class:Datadeck
find_index	cad/src/datadeck.cpp	/^int Datadeck::find_index(int max, double value, std::vector<double> list) {$/;"	f	class:Datadeck
interpolate	cad/src/datadeck.cpp	/^double Datadeck::interpolate(int ind1, int ind2, int slot, double val) {$/;"	f	class:Datadeck
interpolate	cad/src/datadeck.cpp	/^double Datadeck::interpolate(int ind10, int ind11, int ind20, int ind21, int ind30, int ind31,$/;"	f	class:Datadeck
interpolate	cad/src/datadeck.cpp	/^double Datadeck::interpolate(int ind10, int ind11, int ind20, int ind21, int slot, double value1,$/;"	f	class:Datadeck
look_up	cad/src/datadeck.cpp	/^double Datadeck::look_up(std::string name, double value1) {$/;"	f	class:Datadeck
look_up	cad/src/datadeck.cpp	/^double Datadeck::look_up(std::string name, double value1, double value2) {$/;"	f	class:Datadeck
look_up	cad/src/datadeck.cpp	/^double Datadeck::look_up(std::string name, double value1, double value2, double value3) {$/;"	f	class:Datadeck
Atmosphere76	cad/src/env/atmosphere76.cpp	/^cad::Atmosphere76::Atmosphere76() {$/;"	f	class:cad::Atmosphere76
set_altitude	cad/src/env/atmosphere76.cpp	/^void cad::Atmosphere76::set_altitude(double altitude_in_meter) {$/;"	f	class:cad::Atmosphere76
update_values	cad/src/env/atmosphere76.cpp	/^void cad::Atmosphere76::update_values() {$/;"	f	class:cad::Atmosphere76
~Atmosphere76	cad/src/env/atmosphere76.cpp	/^cad::Atmosphere76::~Atmosphere76() {$/;"	f	class:cad::Atmosphere76
Atmosphere_nasa2002	cad/src/env/atmosphere_nasa2002.cpp	/^cad::Atmosphere_nasa2002::Atmosphere_nasa2002() {$/;"	f	class:cad::Atmosphere_nasa2002
set_altitude	cad/src/env/atmosphere_nasa2002.cpp	/^void cad::Atmosphere_nasa2002::set_altitude(double altitude_in_meter) {$/;"	f	class:cad::Atmosphere_nasa2002
update_values	cad/src/env/atmosphere_nasa2002.cpp	/^int cad::Atmosphere_nasa2002::update_values() {$/;"	f	class:cad::Atmosphere_nasa2002
~Atmosphere_nasa2002	cad/src/env/atmosphere_nasa2002.cpp	/^cad::Atmosphere_nasa2002::~Atmosphere_nasa2002() {$/;"	f	class:cad::Atmosphere_nasa2002
Atmosphere_weatherdeck	cad/src/env/atmosphere_weatherdeck.cpp	/^cad::Atmosphere_weatherdeck::Atmosphere_weatherdeck(char* filepath)$/;"	f	class:cad::Atmosphere_weatherdeck
set_altitude	cad/src/env/atmosphere_weatherdeck.cpp	/^void cad::Atmosphere_weatherdeck::set_altitude(double altitude_in_meter) {$/;"	f	class:cad::Atmosphere_weatherdeck
update_values	cad/src/env/atmosphere_weatherdeck.cpp	/^void cad::Atmosphere_weatherdeck::update_values() {$/;"	f	class:cad::Atmosphere_weatherdeck
~Atmosphere_weatherdeck	cad/src/env/atmosphere_weatherdeck.cpp	/^cad::Atmosphere_weatherdeck::~Atmosphere_weatherdeck() {$/;"	f	class:cad::Atmosphere_weatherdeck
Wind	cad/src/env/wind.cpp	/^cad::Wind::Wind(double twind, double vertical_wind)$/;"	f	class:cad::Wind
apply_turbulance_if_have	cad/src/env/wind.cpp	/^void cad::Wind::apply_turbulance_if_have(double int_step, double dvba, arma::mat33 TBD, double alppx, double phipx) {$/;"	f	class:cad::Wind
propagate_VAED	cad/src/env/wind.cpp	/^void cad::Wind::propagate_VAED(double int_step) {$/;"	f	class:cad::Wind
Wind_Constant	cad/src/env/wind_constant.cpp	/^cad::Wind_Constant::Wind_Constant(double dvba, double dir, double twind, double vertical_wind)$/;"	f	class:cad::Wind_Constant
set_altitude	cad/src/env/wind_constant.cpp	/^void cad::Wind_Constant::set_altitude(double altitude_in_meter) {$/;"	f	class:cad::Wind_Constant
~Wind_Constant	cad/src/env/wind_constant.cpp	/^cad::Wind_Constant::~Wind_Constant() {$/;"	f	class:cad::Wind_Constant
Wind_No	cad/src/env/wind_no.cpp	/^cad::Wind_No::Wind_No()$/;"	f	class:cad::Wind_No
set_altitude	cad/src/env/wind_no.cpp	/^void cad::Wind_No::set_altitude(double altitude_in_meter) {$/;"	f	class:cad::Wind_No
~Wind_No	cad/src/env/wind_no.cpp	/^cad::Wind_No::~Wind_No() {$/;"	f	class:cad::Wind_No
Wind_Tabular	cad/src/env/wind_tabular.cpp	/^cad::Wind_Tabular::Wind_Tabular(char* filepath, double twind, double vertical_wind)$/;"	f	class:cad::Wind_Tabular
set_altitude	cad/src/env/wind_tabular.cpp	/^void cad::Wind_Tabular::set_altitude(double altitude_in_meter) {$/;"	f	class:cad::Wind_Tabular
~Wind_Tabular	cad/src/env/wind_tabular.cpp	/^cad::Wind_Tabular::~Wind_Tabular() {$/;"	f	class:cad::Wind_Tabular
Schmitt_Trigger	cad/src/schmitt_trigger.cpp	/^Schmitt_Trigger::Schmitt_Trigger(const Schmitt_Trigger& other) {$/;"	f	class:Schmitt_Trigger
Schmitt_Trigger	cad/src/schmitt_trigger.cpp	/^Schmitt_Trigger::Schmitt_Trigger(double dead_zone, double hysteresis)$/;"	f	class:Schmitt_Trigger
clear	cad/src/schmitt_trigger.cpp	/^void Schmitt_Trigger::clear() {$/;"	f	class:Schmitt_Trigger
operator =	cad/src/schmitt_trigger.cpp	/^Schmitt_Trigger& Schmitt_Trigger::operator=(const Schmitt_Trigger& other) {$/;"	f	class:Schmitt_Trigger
trigger	cad/src/schmitt_trigger.cpp	/^int Schmitt_Trigger::trigger(double in) {$/;"	f	class:Schmitt_Trigger
AeroDynamics	dm/include/Aerodynamics.hh	/^class AeroDynamics{$/;"	c
__aerodynamics_HH__	dm/include/Aerodynamics.hh	2;"	d
aerotable	dm/include/Aerodynamics.hh	/^    Datadeck aerotable; \/* ** (--) Aero Deck *\/$/;"	m	class:AeroDynamics
alimitx	dm/include/Aerodynamics.hh	/^    double alimitx;     \/* *io (--)     Structural  limiter for vehicle*\/$/;"	m	class:AeroDynamics
alplimx	dm/include/Aerodynamics.hh	/^    double alplimx;     \/* *io (d)      Alpha limiter for vehicle - deg*\/$/;"	m	class:AeroDynamics
ca	dm/include/Aerodynamics.hh	/^    double ca;$/;"	m	class:AeroDynamics
ca0	dm/include/Aerodynamics.hh	/^    double ca0;         \/* *io (--)     Axial force coeff(Mach) - ND*\/$/;"	m	class:AeroDynamics
ca_on	dm/include/Aerodynamics.hh	/^    double ca_on;$/;"	m	class:AeroDynamics
caa	dm/include/Aerodynamics.hh	/^    double caa;         \/* *io (--)     Delta axial force due to alpha(Mach) - ND*\/$/;"	m	class:AeroDynamics
cl	dm/include/Aerodynamics.hh	/^    double cl;$/;"	m	class:AeroDynamics
cla	dm/include/Aerodynamics.hh	/^    double cla;         \/* *io (1\/d)    Lift slope derivative(alpha,mach) - 1\/deg*\/$/;"	m	class:AeroDynamics
clde	dm/include/Aerodynamics.hh	/^    double clde;        \/* *io (1\/d)    Lift force due to elevator (alpha.mach), - 1\/deg*\/$/;"	m	class:AeroDynamics
cll	dm/include/Aerodynamics.hh	/^    double cll;         \/* *io (--)     Rolling moment coefficient - ND*\/$/;"	m	class:AeroDynamics
cllda	dm/include/Aerodynamics.hh	/^    double cllda;       \/* *io (1\/d)    Roll control effectiveness(alpha,mach), - 1\/deg*\/$/;"	m	class:AeroDynamics
cllp	dm/include/Aerodynamics.hh	/^    double cllp;        \/* *io (1\/r)    Roll damping deriv(alpha,mach) - 1\/rad*\/$/;"	m	class:AeroDynamics
clm	dm/include/Aerodynamics.hh	/^    double clm;         \/* *io (--)     Pitching moment coefficient - ND*\/$/;"	m	class:AeroDynamics
clm0	dm/include/Aerodynamics.hh	/^    double clm0;        \/* *io (--)     Pitch moment coeff(Mach,alpha) - ND*\/$/;"	m	class:AeroDynamics
clmq	dm/include/Aerodynamics.hh	/^    double clmq;        \/* *io (1\/d)    Pitch dampning deriv(Mach) - 1\/deg*\/$/;"	m	class:AeroDynamics
cln	dm/include/Aerodynamics.hh	/^    double cln;         \/* *io (--)     Yawing moment coefficient - ND*\/$/;"	m	class:AeroDynamics
clp	dm/include/Aerodynamics.hh	/^    double clp;$/;"	m	class:AeroDynamics
cma	dm/include/Aerodynamics.hh	/^    double cma;         \/* *io (1\/d)    Pitch moment due to alpha deriv(alpha,mach) -1\/deg*\/$/;"	m	class:AeroDynamics
cmde	dm/include/Aerodynamics.hh	/^    double cmde;        \/* *io (1\/d)    Pitch control effectiveness(alpha,mach), - 1\/deg*\/$/;"	m	class:AeroDynamics
cmq	dm/include/Aerodynamics.hh	/^    double cmq;         \/* *io (1\/r)    Pitch dampning deriv(alpha,mach) - 1\/rad*\/$/;"	m	class:AeroDynamics
cn	dm/include/Aerodynamics.hh	/^    double cn;$/;"	m	class:AeroDynamics
cn0	dm/include/Aerodynamics.hh	/^    double cn0;         \/* *io (--)     Normal force coeff(Mach,alpha) - ND*\/$/;"	m	class:AeroDynamics
cnb	dm/include/Aerodynamics.hh	/^    double cnb;         \/* *io (1\/d)    Yaw moment deriv(alpha,mach) - 1\/deg*\/$/;"	m	class:AeroDynamics
cndr	dm/include/Aerodynamics.hh	/^    double cndr;        \/* *io (1\/d)    Yaw moment due to rudder deriv(alpha,mach) - 1\/deg*\/$/;"	m	class:AeroDynamics
cnq	dm/include/Aerodynamics.hh	/^    double cnq;$/;"	m	class:AeroDynamics
cnr	dm/include/Aerodynamics.hh	/^    double cnr;         \/* *io (1\/r)    Yaw damping deriv(alpha,mach) - 1\/rad*\/$/;"	m	class:AeroDynamics
cx	dm/include/Aerodynamics.hh	/^    double cx;          \/* *io (--)     X-force coefficient - ND*\/$/;"	m	class:AeroDynamics
cy	dm/include/Aerodynamics.hh	/^    double cy;          \/* *io (--)     Side force coefficient - ND*\/$/;"	m	class:AeroDynamics
cyb	dm/include/Aerodynamics.hh	/^    double cyb;         \/* *io (1\/d)    Weather vane der wrt beta(alpha,mach) - 1\/deg*\/$/;"	m	class:AeroDynamics
cydr	dm/include/Aerodynamics.hh	/^    double cydr;        \/* *io (1\/d)    Side force due to rudder deriv(alpha,mach) - 1\/deg*\/$/;"	m	class:AeroDynamics
cz	dm/include/Aerodynamics.hh	/^    double cz;          \/* *io (--)     Z-force coefficient - ND*\/$/;"	m	class:AeroDynamics
dla	dm/include/Aerodynamics.hh	/^    double dla;         \/* *io (m\/s2)   Lift slope derivative - m\/s^2*\/$/;"	m	class:AeroDynamics
dlde	dm/include/Aerodynamics.hh	/^    double dlde;        \/* *io (m\/s2)   Lift elevator control derivative - m\/s^2*\/$/;"	m	class:AeroDynamics
dllda	dm/include/Aerodynamics.hh	/^    double dllda;       \/* *io (1\/s2)   Roll control derivative - 1\/s^2*\/$/;"	m	class:AeroDynamics
dllp	dm/include/Aerodynamics.hh	/^    double dllp;        \/* *io (1\/s)    Roll damping derivative - 1\/s*\/$/;"	m	class:AeroDynamics
dma	dm/include/Aerodynamics.hh	/^    double dma;         \/* *io (1\/s2)   Pitch moment derivative - 1\/s^2*\/$/;"	m	class:AeroDynamics
dmde	dm/include/Aerodynamics.hh	/^    double dmde;        \/* *io (1\/s2)   Pitch control derivative - 1\/s^2*\/$/;"	m	class:AeroDynamics
dmq	dm/include/Aerodynamics.hh	/^    double dmq;         \/* *io (1\/s)    Pitch damping derivative - 1\/s*\/$/;"	m	class:AeroDynamics
dnb	dm/include/Aerodynamics.hh	/^    double dnb;         \/* *io (1\/s2)   Yawing moment derivative - 1\/s^2*\/$/;"	m	class:AeroDynamics
dnd	dm/include/Aerodynamics.hh	/^    double dnd;         \/* *io (m\/s2)   pitch contrl force derivative -m\/s^2*\/$/;"	m	class:AeroDynamics
dndr	dm/include/Aerodynamics.hh	/^    double dndr;        \/* *io (1\/s2)   Yaw control derivative - 1\/s^2*\/$/;"	m	class:AeroDynamics
dnr	dm/include/Aerodynamics.hh	/^    double dnr;         \/* *io (1\/s)    Yaw dampnig derivative - 1\/s*\/$/;"	m	class:AeroDynamics
dyb	dm/include/Aerodynamics.hh	/^    double dyb;         \/* *io (m\/s2)   Side force derivative - m\/s^2*\/$/;"	m	class:AeroDynamics
dydr	dm/include/Aerodynamics.hh	/^    double dydr;        \/* *io (m\/s2)   Side force control derivative - m\/s^2*\/$/;"	m	class:AeroDynamics
environment	dm/include/Aerodynamics.hh	/^    Environment * environment;$/;"	m	class:AeroDynamics
euler	dm/include/Aerodynamics.hh	/^    _Euler_     * euler;$/;"	m	class:AeroDynamics
gnavail	dm/include/Aerodynamics.hh	/^    double gnavail;     \/* *io (--)     G available in pitch for vehicle - g's*\/$/;"	m	class:AeroDynamics
gnmax	dm/include/Aerodynamics.hh	/^    double gnmax;       \/* *io (--)     Max g permissable in pitch for vehicle - g's*\/$/;"	m	class:AeroDynamics
gyavail	dm/include/Aerodynamics.hh	/^    double gyavail;     \/* *io (--)     G available in yaw for vehicle - g's*\/$/;"	m	class:AeroDynamics
gymax	dm/include/Aerodynamics.hh	/^    double gymax;       \/* *io (--)     Max g permissable in yaw for vehicle - g's*\/$/;"	m	class:AeroDynamics
kinematics	dm/include/Aerodynamics.hh	/^    Kinematics  * kinematics;$/;"	m	class:AeroDynamics
newton	dm/include/Aerodynamics.hh	/^    Newton      * newton;$/;"	m	class:AeroDynamics
propulsion	dm/include/Aerodynamics.hh	/^    Propulsion  * propulsion;$/;"	m	class:AeroDynamics
realp1	dm/include/Aerodynamics.hh	/^    double realp1;      \/* *io (r\/s)    First real root of airframe pitch dyn  - rad\/s*\/$/;"	m	class:AeroDynamics
realp2	dm/include/Aerodynamics.hh	/^    double realp2;      \/* *io (r\/s)    Second real root of airframe pitch dyn - rad\/s*\/$/;"	m	class:AeroDynamics
realy1	dm/include/Aerodynamics.hh	/^    double realy1;      \/* *io (r\/s)    First real root of airframe yaw dynamics - rad\/s*\/$/;"	m	class:AeroDynamics
realy2	dm/include/Aerodynamics.hh	/^    double realy2;      \/* *io (r\/s)    Second real root of airframe yaw dynamics - rad\/s*\/$/;"	m	class:AeroDynamics
refa	dm/include/Aerodynamics.hh	/^    double refa;        \/* *io (m2)     Reference area for aero coefficients - m^2*\/$/;"	m	class:AeroDynamics
refd	dm/include/Aerodynamics.hh	/^    double refd;        \/* *io (m)      Reference length for aero coefficients - m*\/$/;"	m	class:AeroDynamics
rpreal	dm/include/Aerodynamics.hh	/^    double rpreal;      \/* *io (r\/s)    Real part or mean value (real roots) of pitch  - rad\/s*\/$/;"	m	class:AeroDynamics
ryreal	dm/include/Aerodynamics.hh	/^    double ryreal;      \/* *io (r\/s)    Real part or mean value (real roots) of yaw - rad\/s*\/$/;"	m	class:AeroDynamics
stmarg_pitch	dm/include/Aerodynamics.hh	/^    double stmarg_pitch;\/* *io (--)     Static margin pitch (+stable, -unstable) - caliber*\/$/;"	m	class:AeroDynamics
stmarg_yaw	dm/include/Aerodynamics.hh	/^    double stmarg_yaw;  \/* *io (--)     Static margin yaw (+stable, -unstable) - caliber*\/$/;"	m	class:AeroDynamics
tvc	dm/include/Aerodynamics.hh	/^    TVC         * tvc;$/;"	m	class:AeroDynamics
wnp	dm/include/Aerodynamics.hh	/^    double wnp;         \/* *io (r\/s)    Natural frequency of airframe pitch dynamics - rad\/s*\/$/;"	m	class:AeroDynamics
wny	dm/include/Aerodynamics.hh	/^    double wny;         \/* *io (r\/s)    Natural frequency of airframe yaw dynamics - rad\/s*\/$/;"	m	class:AeroDynamics
xcg_ref	dm/include/Aerodynamics.hh	/^    double xcg_ref;     \/* *io (m)      Reference cg location from nose - m*\/$/;"	m	class:AeroDynamics
xcp	dm/include/Aerodynamics.hh	/^    double xcp;$/;"	m	class:AeroDynamics
zetp	dm/include/Aerodynamics.hh	/^    double zetp;        \/* *io (--)     Damping of airframe pitch dynamics - NA*\/$/;"	m	class:AeroDynamics
zety	dm/include/Aerodynamics.hh	/^    double zety;        \/* *io (--)     Damping of airframe yaw dynamics - NA*\/$/;"	m	class:AeroDynamics
DM_Julian_century	dm/include/Environment.hh	/^    double DM_Julian_century; \/* *io  (--)  Julian_century *\/$/;"	m	class:Environment
DM_sidereal_time	dm/include/Environment.hh	/^    double DM_sidereal_time; \/* *io  (r)  temps_sideral *\/$/;"	m	class:Environment
DM_w_precessing	dm/include/Environment.hh	/^    double DM_w_precessing; \/* *io  (--)  w_precessing *\/$/;"	m	class:Environment
Environment	dm/include/Environment.hh	/^class Environment{$/;"	c
GRAVG	dm/include/Environment.hh	/^    arma::vec GRAVG;    \/* *o (m\/s2)       Gravity acceleration in geocentric coord *\/$/;"	m	class:Environment
GRAVGE	dm/include/Environment.hh	/^    arma::vec GRAVGE;   \/* *o (m\/s2)    Gravity acc in earth coordinate *\/$/;"	m	class:Environment
M_nut_n_pre	dm/include/Environment.hh	/^    arma::mat M_nut_n_pre; \/* *o (--)   Nutation-Precession Matrix *\/$/;"	m	class:Environment
TEI	dm/include/Environment.hh	/^    arma::mat TEI;    \/* *io  (--)         Transformation matrix for ECI to ECEF *\/$/;"	m	class:Environment
_GRAVG	dm/include/Environment.hh	/^    double _GRAVG[3];   \/* *o (m\/s2)       Gravity acceleration in geocentric coord *\/$/;"	m	class:Environment
_GRAVGE	dm/include/Environment.hh	/^    double _GRAVGE[3];     \/* *o (m\/s2)    Gravity acc in earth coordinate *\/$/;"	m	class:Environment
_M_nut_n_pre	dm/include/Environment.hh	/^    double _M_nut_n_pre[3][3];    \/* *o (--)   Nutation-Precession Matrix *\/$/;"	m	class:Environment
_TEI	dm/include/Environment.hh	/^    double _TEI[3][3];  \/* *io  (--)       Transformation matrix for ECI to ECEF *\/$/;"	m	class:Environment
__environment_HH__	dm/include/Environment.hh	2;"	d
aerodynamics	dm/include/Environment.hh	/^    AeroDynamics * aerodynamics;$/;"	m	class:Environment
atmosphere	dm/include/Environment.hh	/^    cad::Atmosphere * atmosphere;$/;"	m	class:Environment
dvba	dm/include/Environment.hh	/^    double dvba;        \/* *o (m\/s)        Vehicle speed wrt air *\/$/;"	m	class:Environment
gravg	dm/include/Environment.hh	/^    double gravg;       \/* *o (m\/s2)       Magnitude of gravity acceleration *\/$/;"	m	class:Environment
kinematics	dm/include/Environment.hh	/^    Kinematics   * kinematics;$/;"	m	class:Environment
newton	dm/include/Environment.hh	/^    Newton       * newton;$/;"	m	class:Environment
pdynmc	dm/include/Environment.hh	/^    double pdynmc;      \/* *o (pa)         Dynamic pressure *\/$/;"	m	class:Environment
tempc	dm/include/Environment.hh	/^    double tempc;       \/* *o (c)          Atmospheric temperature - Centigrade*\/$/;"	m	class:Environment
time	dm/include/Environment.hh	/^    time_management *time;$/;"	m	class:Environment
vmach	dm/include/Environment.hh	/^    double vmach;       \/* *o (--)         Mach number *\/$/;"	m	class:Environment
wind	dm/include/Environment.hh	/^    cad::Wind       * wind;$/;"	m	class:Environment
WBEB	dm/include/Euler.hh	/^    arma::vec WBEB;   \/* *io (r\/s)        Angular velocity of vehicle wrt earth in body coord *\/$/;"	m	class:_Euler_
WBIB	dm/include/Euler.hh	/^    arma::vec WBIB;   \/* *io (r\/s)        Augular velocity of vehicle wrt inertia in body coord *\/$/;"	m	class:_Euler_
WBIBD	dm/include/Euler.hh	/^    arma::vec WBIBD;  \/* *io (r\/s2)       Angular velocity of vehicle wrt inertia in body coord - derivative *\/$/;"	m	class:_Euler_
WBII	dm/include/Euler.hh	/^    arma::vec WBII;   \/* *io (r\/s)        Vehicle's inertia angular velocity in inertia coord *\/$/;"	m	class:_Euler_
WEII	dm/include/Euler.hh	/^    arma::vec WEII; \/* ** *\/$/;"	m	class:_Euler_
_Euler_	dm/include/Euler.hh	/^class _Euler_ {$/;"	c
_WBEB	dm/include/Euler.hh	/^    double _WBEB[3];  \/* *io (r\/s)        Angular velocity of vehicle wrt earth in body coord *\/$/;"	m	class:_Euler_
_WBIB	dm/include/Euler.hh	/^    double _WBIB[3];  \/* *io (r\/s)        Augular velocity of vehicle wrt inertia in body coord *\/$/;"	m	class:_Euler_
_WBIBD	dm/include/Euler.hh	/^    double _WBIBD[3]; \/* *io (r\/s2)       Angular velocity of vehicle wrt inertia in body coord - derivative *\/$/;"	m	class:_Euler_
_WBII	dm/include/Euler.hh	/^    double _WBII[3];  \/* *io (r\/s)        Vehicle's inertia angular velocity in inertia coord *\/$/;"	m	class:_Euler_
_WEII	dm/include/Euler.hh	/^    double _WEII[3]; \/* ** *\/$/;"	m	class:_Euler_
__euler_HH__	dm/include/Euler.hh	2;"	d
forces	dm/include/Euler.hh	/^    Forces     * forces;$/;"	m	class:_Euler_
kinematics	dm/include/Euler.hh	/^    Kinematics * kinematics;$/;"	m	class:_Euler_
ppx	dm/include/Euler.hh	/^    double ppx;     \/* *io (d\/s)        Body roll angular velocity wrt earth in body axes *\/$/;"	m	class:_Euler_
propulsion	dm/include/Euler.hh	/^    Propulsion * propulsion;$/;"	m	class:_Euler_
qqx	dm/include/Euler.hh	/^    double qqx;     \/* *io (d\/s)        Body pitch angular velocity wrt earth in body axes *\/$/;"	m	class:_Euler_
rrx	dm/include/Euler.hh	/^    double rrx;     \/* *io (d\/s)        Body yaw angular velocity wrt earth in body axes *\/$/;"	m	class:_Euler_
FAP	dm/include/Force.hh	/^    arma::vec FAP;          \/* *o (N)      Aerodynamic force in body axes *\/$/;"	m	class:Forces
FAPB	dm/include/Force.hh	/^    arma::vec FAPB;         \/* *o (N)      Aerodynamic and propulsion forces in body axes *\/$/;"	m	class:Forces
FMB	dm/include/Force.hh	/^    arma::vec FMB;          \/* *o (N*m)    Aerodynamic and propulsion moment in body axes *\/$/;"	m	class:Forces
Forces	dm/include/Force.hh	/^    Forces() {}$/;"	f	class:Forces
Forces	dm/include/Force.hh	/^class Forces {$/;"	c
_FAP	dm/include/Force.hh	/^    double _FAP[3];         \/* *o (N)      Aerodynamic force in body axes *\/$/;"	m	class:Forces
_FAPB	dm/include/Force.hh	/^    double _FAPB[3];        \/* *o (N)      Aerodynamic and propulsion forces in body axes *\/$/;"	m	class:Forces
_FMB	dm/include/Force.hh	/^    double _FMB[3];         \/* *o (N*m)    Aerodynamic and propulsion moment in body axes *\/$/;"	m	class:Forces
__forces_HH__	dm/include/Force.hh	2;"	d
aerodynamics	dm/include/Force.hh	/^    AeroDynamics * aerodynamics;$/;"	m	class:Forces
environment	dm/include/Force.hh	/^    Environment  * environment;$/;"	m	class:Forces
grab_rcs_isEnabled	dm/include/Force.hh	/^    std::function<bool()> grab_rcs_isEnabled;$/;"	m	class:Forces
grab_rcs_mode	dm/include/Force.hh	/^    std::function<int()> grab_rcs_mode;$/;"	m	class:Forces
propulsion	dm/include/Force.hh	/^    Propulsion   * propulsion;$/;"	m	class:Forces
rcs	dm/include/Force.hh	/^    RCS          * rcs;$/;"	m	class:Forces
tvc	dm/include/Force.hh	/^    TVC          * tvc;$/;"	m	class:Forces
A	dm/include/GPS_constellation.hh	/^    double A;   \/*!< Semi-major axis *\/$/;"	m	struct:ephem_t
A0	dm/include/GPS_constellation.hh	/^    double A0, A1;$/;"	m	struct:ionoutc_t
A1	dm/include/GPS_constellation.hh	/^    double A0, A1;$/;"	m	struct:ionoutc_t
GPS_CONSTELLATION_HH	dm/include/GPS_constellation.hh	2;"	d
GPS_constellation	dm/include/GPS_constellation.hh	/^class GPS_constellation {$/;"	c
af0	dm/include/GPS_constellation.hh	/^    double af0; \/*!< Clock offset (seconds) *\/$/;"	m	struct:ephem_t
af1	dm/include/GPS_constellation.hh	/^    double af1; \/*!< rate (sec\/sec) *\/$/;"	m	struct:ephem_t
af2	dm/include/GPS_constellation.hh	/^    double af2; \/*!< acceleration (sec\/sec^2) *\/$/;"	m	struct:ephem_t
allocatedSat	dm/include/GPS_constellation.hh	/^    int allocatedSat[MAX_SAT]; \/* *o (--)                       *\/$/;"	m	class:GPS_constellation
alpha0	dm/include/GPS_constellation.hh	/^    double alpha0, alpha1, alpha2, alpha3;$/;"	m	struct:ionoutc_t
alpha1	dm/include/GPS_constellation.hh	/^    double alpha0, alpha1, alpha2, alpha3;$/;"	m	struct:ionoutc_t
alpha2	dm/include/GPS_constellation.hh	/^    double alpha0, alpha1, alpha2, alpha3;$/;"	m	struct:ionoutc_t
alpha3	dm/include/GPS_constellation.hh	/^    double alpha0, alpha1, alpha2, alpha3;$/;"	m	struct:ionoutc_t
aop	dm/include/GPS_constellation.hh	/^    double aop;$/;"	m	struct:ephem_t
azel	dm/include/GPS_constellation.hh	/^    arma::vec2 azel;$/;"	m	struct:channel_t
azel	dm/include/GPS_constellation.hh	/^    arma::vec2 azel;$/;"	m	struct:range_t
beta0	dm/include/GPS_constellation.hh	/^    double beta0, beta1, beta2, beta3;$/;"	m	struct:ionoutc_t
beta1	dm/include/GPS_constellation.hh	/^    double beta0, beta1, beta2, beta3;$/;"	m	struct:ionoutc_t
beta2	dm/include/GPS_constellation.hh	/^    double beta0, beta1, beta2, beta3;$/;"	m	struct:ionoutc_t
beta3	dm/include/GPS_constellation.hh	/^    double beta0, beta1, beta2, beta3;$/;"	m	struct:ionoutc_t
ca	dm/include/GPS_constellation.hh	/^    int ca[CA_SEQ_LEN]; \/*< C\/A Sequence *\/$/;"	m	struct:channel_t
carr_phase	dm/include/GPS_constellation.hh	/^    unsigned int carr_phase; \/*< Carrier phase *\/$/;"	m	struct:channel_t
carr_phasestep	dm/include/GPS_constellation.hh	/^    int carr_phasestep; \/*< Carrier phasestep *\/$/;"	m	struct:channel_t
chan	dm/include/GPS_constellation.hh	/^    channel_t chan[MAX_CHAN];$/;"	m	class:GPS_constellation
channel_t	dm/include/GPS_constellation.hh	/^struct channel_t {$/;"	s
cic	dm/include/GPS_constellation.hh	/^    double cic; \/*!< Correction to inclination cos (radians) *\/$/;"	m	struct:ephem_t
cis	dm/include/GPS_constellation.hh	/^    double cis; \/*!< Correction to inclination sin (radians) *\/$/;"	m	struct:ephem_t
clear_gps_flag	dm/include/GPS_constellation.hh	/^    void clear_gps_flag() { gps_update = 0; }$/;"	f	class:GPS_constellation
clk	dm/include/GPS_constellation.hh	/^    arma::vec2 clk;$/;"	m	struct:range_t
codeCA	dm/include/GPS_constellation.hh	/^    int codeCA; \/*!< current C\/A code *\/$/;"	m	struct:channel_t
codeL2	dm/include/GPS_constellation.hh	/^    int codeL2;$/;"	m	struct:ephem_t
code_phase	dm/include/GPS_constellation.hh	/^    double code_phase; \/*< Code phase *\/$/;"	m	struct:channel_t
crc	dm/include/GPS_constellation.hh	/^    double crc; \/*!< Correction to radius cos (meters) *\/$/;"	m	struct:ephem_t
crs	dm/include/GPS_constellation.hh	/^    double crs; \/*!< Correction to radius sin (meters) *\/$/;"	m	struct:ephem_t
cuc	dm/include/GPS_constellation.hh	/^    double cuc; \/*!< Cuc (radians) *\/$/;"	m	struct:ephem_t
cus	dm/include/GPS_constellation.hh	/^    double cus; \/*!< Cus (radians) *\/$/;"	m	struct:ephem_t
d	dm/include/GPS_constellation.hh	/^    double d;$/;"	m	struct:range_t
dataBit	dm/include/GPS_constellation.hh	/^    int dataBit;    \/*!< current data bit *\/$/;"	m	struct:channel_t
deltan	dm/include/GPS_constellation.hh	/^    double deltan;  \/*!< Delta-N (radians\/sec) *\/$/;"	m	struct:ephem_t
dn	dm/include/GPS_constellation.hh	/^    int dtlsf, dn, wnlsf;$/;"	m	struct:ionoutc_t
dtls	dm/include/GPS_constellation.hh	/^    int dtls, tot, wnt;$/;"	m	struct:ionoutc_t
dtlsf	dm/include/GPS_constellation.hh	/^    int dtlsf, dn, wnlsf;$/;"	m	struct:ionoutc_t
dwrd	dm/include/GPS_constellation.hh	/^    uint32_t dwrd[N_DWRD]; \/*!< Data words of sub-frame *\/$/;"	m	struct:channel_t
ecc	dm/include/GPS_constellation.hh	/^    double ecc; \/*!< e Eccentricity *\/$/;"	m	struct:ephem_t
enable	dm/include/GPS_constellation.hh	/^    int enable;$/;"	m	struct:ionoutc_t
environment	dm/include/GPS_constellation.hh	/^    Environment *environment;$/;"	m	class:GPS_constellation
eph	dm/include/GPS_constellation.hh	/^    ephem_t eph[EPHEM_ARRAY_SIZE][MAX_SAT];$/;"	m	class:GPS_constellation
ephem_t	dm/include/GPS_constellation.hh	/^struct ephem_t {$/;"	s
f_carr	dm/include/GPS_constellation.hh	/^    double f_carr;  \/*< Carrier frequency *\/$/;"	m	struct:channel_t
f_code	dm/include/GPS_constellation.hh	/^    double f_code;  \/*< Code frequency *\/$/;"	m	struct:channel_t
g	dm/include/GPS_constellation.hh	/^    time_util::GPS_TIME g;$/;"	m	struct:range_t
g0	dm/include/GPS_constellation.hh	/^    time_util::GPS_TIME g0;   \/*!< GPS time at start *\/$/;"	m	struct:channel_t
gdop	dm/include/GPS_constellation.hh	/^    double gdop; \/* *io  (--)  Geometric Dilution of Precsision *\/$/;"	m	class:GPS_constellation
get_gps_update	dm/include/GPS_constellation.hh	/^    unsigned int get_gps_update() { return gps_update; }$/;"	f	class:GPS_constellation
gps_update	dm/include/GPS_constellation.hh	/^    unsigned int gps_update;       \/* *o (--)       GPS update? > 0 updated *\/$/;"	m	class:GPS_constellation
ibit	dm/include/GPS_constellation.hh	/^    int ibit;   \/*!< initial bit *\/$/;"	m	struct:channel_t
icode	dm/include/GPS_constellation.hh	/^    int icode;  \/*!< initial code *\/$/;"	m	struct:channel_t
idot	dm/include/GPS_constellation.hh	/^    double idot;    \/*!< IDOT (radians\/s) *\/$/;"	m	struct:ephem_t
ieph	dm/include/GPS_constellation.hh	/^    int ieph;   \/* *io  (--)    which ephemeris been select *\/$/;"	m	class:GPS_constellation
inc0	dm/include/GPS_constellation.hh	/^    double inc0;    \/*!< Inclination (radians) *\/$/;"	m	struct:ephem_t
iodc	dm/include/GPS_constellation.hh	/^    int iodc;   \/*!< Issue of Data, Clock *\/$/;"	m	struct:ephem_t
iode	dm/include/GPS_constellation.hh	/^    int iode;   \/*!< Isuse of Data, Ephemeris *\/$/;"	m	struct:ephem_t
iono_delay	dm/include/GPS_constellation.hh	/^    double iono_delay;$/;"	m	struct:range_t
ionoutc	dm/include/GPS_constellation.hh	/^    ionoutc_t ionoutc;$/;"	m	class:GPS_constellation
ionoutc_t	dm/include/GPS_constellation.hh	/^struct ionoutc_t {$/;"	s
iword	dm/include/GPS_constellation.hh	/^    int iword;  \/*!< initial word *\/$/;"	m	struct:channel_t
kinematics	dm/include/GPS_constellation.hh	/^    Kinematics *kinematics;$/;"	m	class:GPS_constellation
m0	dm/include/GPS_constellation.hh	/^    double m0;  \/*!< Mean anamoly (radians) *\/$/;"	m	struct:ephem_t
n	dm/include/GPS_constellation.hh	/^    double n;   \/*!< Mean motion (Average angular velocity) *\/$/;"	m	struct:ephem_t
neph	dm/include/GPS_constellation.hh	/^    int neph;   \/* *io  (--)    number of ephemeris *\/$/;"	m	class:GPS_constellation
newton	dm/include/GPS_constellation.hh	/^    Newton *newton;$/;"	m	class:GPS_constellation
nsat	dm/include/GPS_constellation.hh	/^    int nsat;   \/*  *io  (--)                               *\/$/;"	m	class:GPS_constellation
omg0	dm/include/GPS_constellation.hh	/^    double omg0;    \/*!< Longitude of the ascending node (radians) *\/$/;"	m	struct:ephem_t
omgdot	dm/include/GPS_constellation.hh	/^    double omgdot;  \/*!< Omega dot (radians\/s) *\/$/;"	m	struct:ephem_t
omgkdot	dm/include/GPS_constellation.hh	/^    double omgkdot; \/*!< OmegaDot-OmegaEdot *\/$/;"	m	struct:ephem_t
pos	dm/include/GPS_constellation.hh	/^    arma::vec3 pos;$/;"	m	struct:range_t
prn	dm/include/GPS_constellation.hh	/^    int prn;    \/*< PRN Number *\/$/;"	m	struct:channel_t
range	dm/include/GPS_constellation.hh	/^    double range;$/;"	m	struct:range_t
range_t	dm/include/GPS_constellation.hh	/^struct range_t {$/;"	s
rate	dm/include/GPS_constellation.hh	/^    double rate;$/;"	m	struct:range_t
rho0	dm/include/GPS_constellation.hh	/^    range_t rho0;$/;"	m	struct:channel_t
sbf	dm/include/GPS_constellation.hh	/^    uint32_t sbf[5][N_DWRD_SBF]; \/*!< current subframe *\/$/;"	m	struct:channel_t
sq1e2	dm/include/GPS_constellation.hh	/^    double sq1e2;   \/*!< sqrt(1-e^2) *\/$/;"	m	struct:ephem_t
sqrta	dm/include/GPS_constellation.hh	/^    double sqrta;   \/*!< sqrt(A) (sqrt(m)) *\/$/;"	m	struct:ephem_t
svhlth	dm/include/GPS_constellation.hh	/^    int svhlth;$/;"	m	struct:ephem_t
t	dm/include/GPS_constellation.hh	/^    time_util::UTC_TIME t;$/;"	m	struct:ephem_t
tgd	dm/include/GPS_constellation.hh	/^    double tgd; \/*!< Group delay L2 bias *\/$/;"	m	struct:ephem_t
time	dm/include/GPS_constellation.hh	/^    time_management *time;$/;"	m	class:GPS_constellation
toc	dm/include/GPS_constellation.hh	/^    time_util::GPS_TIME toc;  \/*!< Time of Clock *\/$/;"	m	struct:ephem_t
toe	dm/include/GPS_constellation.hh	/^    time_util::GPS_TIME toe;  \/*!< Time of Ephemeris *\/$/;"	m	struct:ephem_t
tot	dm/include/GPS_constellation.hh	/^    int dtls, tot, wnt;$/;"	m	struct:ionoutc_t
trans_chan	dm/include/GPS_constellation.hh	/^    transmit_channel trans_chan[MAX_CHAN];$/;"	m	class:GPS_constellation
vel	dm/include/GPS_constellation.hh	/^    arma::vec3 vel;$/;"	m	struct:range_t
vflg	dm/include/GPS_constellation.hh	/^    int vflg;   \/*!< Valid Flag *\/$/;"	m	struct:ephem_t
vflg	dm/include/GPS_constellation.hh	/^    int vflg;$/;"	m	struct:ionoutc_t
wnlsf	dm/include/GPS_constellation.hh	/^    int dtlsf, dn, wnlsf;$/;"	m	struct:ionoutc_t
wnt	dm/include/GPS_constellation.hh	/^    int dtls, tot, wnt;$/;"	m	struct:ionoutc_t
CXH	dm/include/GPS_receiver.hh	/^    arma::vec CXH;      \/* *o (--)       CLock state *\/$/;"	m	class:GPS_Receiver
DR_NOISE	dm/include/GPS_receiver.hh	/^    double DR_NOISE[4];     \/* *i (m\/s)     Delta-range noise *\/$/;"	m	class:GPS_Receiver
DR_NOISE_bcor	dm/include/GPS_receiver.hh	/^    double DR_NOISE_bcor[4];     \/* *i (--)     Delta-range noise bcor *\/$/;"	m	class:GPS_Receiver
DR_NOISE_sigma	dm/include/GPS_receiver.hh	/^    double DR_NOISE_sigma[4];    \/* *i (--)     Delta-range noise sigma *\/$/;"	m	class:GPS_Receiver
FF	dm/include/GPS_receiver.hh	/^    arma::mat FF;             \/* *o (--)      Constant*\/$/;"	m	class:GPS_Receiver
GPS_Receiver	dm/include/GPS_receiver.hh	/^class GPS_Receiver {$/;"	c
PHI	dm/include/GPS_receiver.hh	/^    arma::mat PHI;            \/* *o (--)      Constant*\/$/;"	m	class:GPS_Receiver
PP	dm/include/GPS_receiver.hh	/^    arma::mat PP;               \/* *o (--)      Covariance Matrix *\/$/;"	m	class:GPS_Receiver
PR_BIAS	dm/include/GPS_receiver.hh	/^    double PR_BIAS[4];      \/* *i (m)       Pseudo-range bias GAUSS *\/$/;"	m	class:GPS_Receiver
PR_NOISE	dm/include/GPS_receiver.hh	/^    double PR_NOISE[4];     \/* *i (m)       Pseudo-range bias *\/$/;"	m	class:GPS_Receiver
PR_NOISE_bcor	dm/include/GPS_receiver.hh	/^    double PR_NOISE_bcor[4];     \/* *i (--)       Pseudo-range bias bcor *\/$/;"	m	class:GPS_Receiver
PR_NOISE_sigma	dm/include/GPS_receiver.hh	/^    double PR_NOISE_sigma[4];    \/* *i (--)       Pseudo-range bias sigma *\/$/;"	m	class:GPS_Receiver
SXH	dm/include/GPS_receiver.hh	/^    arma::vec SXH;       \/* *o (m)        Position state (inertial coor) *\/$/;"	m	class:GPS_Receiver
VXH	dm/include/GPS_receiver.hh	/^    arma::vec VXH;      \/* *o (m)        Velocity state (inertial coor) *\/$/;"	m	class:GPS_Receiver
_CXH	dm/include/GPS_receiver.hh	/^    double   _CXH[3];   \/* *o (--)       CLock state *\/$/;"	m	class:GPS_Receiver
_FF	dm/include/GPS_receiver.hh	/^    double _FF[8][8];             \/* *o (--)      Constant*\/$/;"	m	class:GPS_Receiver
_PHI	dm/include/GPS_receiver.hh	/^    double _PHI[8][8];            \/* *o (--)      Constant*\/$/;"	m	class:GPS_Receiver
_PP	dm/include/GPS_receiver.hh	/^    double _PP[8][8];           \/* *o (--)      Covariance Matrix *\/$/;"	m	class:GPS_Receiver
_SXH	dm/include/GPS_receiver.hh	/^    double   _SXH[3];    \/* *o (m)        Position state (inertial coor) *\/$/;"	m	class:GPS_Receiver
_VXH	dm/include/GPS_receiver.hh	/^    double   _VXH[3];   \/* *o (m)        Velocity state (inertial coor) *\/$/;"	m	class:GPS_Receiver
__GPS_R_HH__	dm/include/GPS_receiver.hh	2;"	d
alt1	dm/include/GPS_receiver.hh	/^    double alt1;            \/* *o (m)        Quadriga 1st alt *\/$/;"	m	class:GPS_Receiver
alt2	dm/include/GPS_receiver.hh	/^    double alt2;            \/* *o (m)        Quadriga 2nd alt *\/$/;"	m	class:GPS_Receiver
alt3	dm/include/GPS_receiver.hh	/^    double alt3;            \/* *o (m)        Quadriga 3rd alt *\/$/;"	m	class:GPS_Receiver
alt4	dm/include/GPS_receiver.hh	/^    double alt4;            \/* *o (m)        quadriga 4th alt *\/$/;"	m	class:GPS_Receiver
clear_gps_flag	dm/include/GPS_receiver.hh	/^    void clear_gps_flag() { gps_update--; }$/;"	f	class:GPS_Receiver
del_rearth	dm/include/GPS_receiver.hh	/^    double del_rearth;      \/* *i (m)       GPS Receiver LOS Minimum distance *\/$/;"	m	class:GPS_Receiver
euler	dm/include/GPS_receiver.hh	/^    _Euler_        * euler;$/;"	m	class:GPS_Receiver
factq	dm/include/GPS_receiver.hh	/^    double factq;               \/* *o (--)      Factor to modifiy the Q-matrix Q(1+factq) *\/$/;"	m	class:GPS_Receiver
factr	dm/include/GPS_receiver.hh	/^    double factr;           \/* *i (--)      Factor to modifiy the R-matrix R(1+factr) *\/$/;"	m	class:GPS_Receiver
gdop	dm/include/GPS_receiver.hh	/^    double gdop;            \/* *o (m)        Geometric dillution of precision of quadriga *\/$/;"	m	class:GPS_Receiver
get_gps_update	dm/include/GPS_receiver.hh	/^    int get_gps_update() { return gps_update; }$/;"	f	class:GPS_Receiver
gps_acq	dm/include/GPS_receiver.hh	/^    bool gps_acq;               \/* ** (--)      GPS Signal Acquired? *\/$/;"	m	class:GPS_Receiver
gps_acqtime	dm/include/GPS_receiver.hh	/^    double gps_acqtime;     \/* *i (s)       Time to Acquire GPS Signal *\/$/;"	m	class:GPS_Receiver
gps_epoch	dm/include/GPS_receiver.hh	/^    double gps_epoch;           \/* ** (s)       GPS update epoch time since launch *\/$/;"	m	class:GPS_Receiver
gps_pos_meas	dm/include/GPS_receiver.hh	/^    double gps_pos_meas;    \/* *o (m)        *\/$/;"	m	class:GPS_Receiver
gps_sats	dm/include/GPS_receiver.hh	/^    GPS_Satellites * gps_sats;$/;"	m	class:GPS_Receiver
gps_step	dm/include/GPS_receiver.hh	/^    double gps_step;        \/* *i (s)       GPS Update Interval *\/$/;"	m	class:GPS_Receiver
gps_update	dm/include/GPS_receiver.hh	/^    int gps_update;       \/* *o (--)       GPS update? > 0 updated *\/$/;"	m	class:GPS_Receiver
gps_vel_meas	dm/include/GPS_receiver.hh	/^    double gps_vel_meas;    \/* *o (m)        *\/$/;"	m	class:GPS_Receiver
grab_SBIIC	dm/include/GPS_receiver.hh	/^    std::function<arma::vec3()> grab_SBIIC;$/;"	m	class:GPS_Receiver
grab_VBIIC	dm/include/GPS_receiver.hh	/^    std::function<arma::vec3()> grab_VBIIC;$/;"	m	class:GPS_Receiver
grab_WBICI	dm/include/GPS_receiver.hh	/^    std::function<arma::vec3()> grab_WBICI;$/;"	m	class:GPS_Receiver
lat1	dm/include/GPS_receiver.hh	/^    double lat1;            \/* *o (d)        Quadriga 1st lat *\/$/;"	m	class:GPS_Receiver
lat2	dm/include/GPS_receiver.hh	/^    double lat2;            \/* *o (d)        Quadriga 2nd lat *\/$/;"	m	class:GPS_Receiver
lat3	dm/include/GPS_receiver.hh	/^    double lat3;            \/* *o (d)        Quadriga 3rd lat *\/$/;"	m	class:GPS_Receiver
lat4	dm/include/GPS_receiver.hh	/^    double lat4;            \/* *o (d)        Quadriga 4th lat *\/$/;"	m	class:GPS_Receiver
lon1	dm/include/GPS_receiver.hh	/^    double lon1;            \/* *o (d)        Quadriga 1st lon *\/$/;"	m	class:GPS_Receiver
lon2	dm/include/GPS_receiver.hh	/^    double lon2;            \/* *o (d)        Quadriga 2nd lon *\/$/;"	m	class:GPS_Receiver
lon3	dm/include/GPS_receiver.hh	/^    double lon3;            \/* *o (d)        Quadriga 3rd lon *\/$/;"	m	class:GPS_Receiver
lon4	dm/include/GPS_receiver.hh	/^    double lon4;            \/* *o (d)        Quadriga 4th lon *\/$/;"	m	class:GPS_Receiver
newton	dm/include/GPS_receiver.hh	/^    Newton         * newton;$/;"	m	class:GPS_Receiver
ppos	dm/include/GPS_receiver.hh	/^    double ppos;            \/* *i (m)       Init 1sig pos values of state cov matrix *\/$/;"	m	class:GPS_Receiver
pvel	dm/include/GPS_receiver.hh	/^    double pvel;            \/* *i (m\/s)     Init 1sig vel values of state cov matrix *\/$/;"	m	class:GPS_Receiver
qclockb	dm/include/GPS_receiver.hh	/^    double qclockb;             \/* *o (m)       1sig clock bias error of process cov matrix *\/$/;"	m	class:GPS_Receiver
qclockf	dm/include/GPS_receiver.hh	/^    double qclockf;             \/* *o (m\/s)     1sig clock freq error of process cov matrix *\/$/;"	m	class:GPS_Receiver
qpos	dm/include/GPS_receiver.hh	/^    double qpos;            \/* *i (m)       1sig pos values of process cov matrix *\/$/;"	m	class:GPS_Receiver
qvel	dm/include/GPS_receiver.hh	/^    double qvel;            \/* *i (m\/s)     1sig vel values of process cov matrix *\/$/;"	m	class:GPS_Receiver
rpos	dm/include/GPS_receiver.hh	/^    double rpos;            \/* *i (m)       1sig pos value of meas cov matrix *\/$/;"	m	class:GPS_Receiver
rvel	dm/include/GPS_receiver.hh	/^    double rvel;            \/* *i (m\/s)     1sig vel value of meas cov matrix *\/$/;"	m	class:GPS_Receiver
slot	dm/include/GPS_receiver.hh	/^    double slot[4];         \/* *o (--)       SV slot#  of quadriga *\/$/;"	m	class:GPS_Receiver
slotsum	dm/include/GPS_receiver.hh	/^    double slotsum;         \/* ** (--)      Sum of stored slot numbers of quadriga *\/$/;"	m	class:GPS_Receiver
ssii_quad	dm/include/GPS_receiver.hh	/^    double ssii_quad[16];   \/* *o (m)        Best quadriga inertial coordinates and their slot# *\/$/;"	m	class:GPS_Receiver
state_pos	dm/include/GPS_receiver.hh	/^    double state_pos;    \/* *o (m)        *\/$/;"	m	class:GPS_Receiver
state_vel	dm/include/GPS_receiver.hh	/^    double state_vel;    \/* *o (m)        *\/$/;"	m	class:GPS_Receiver
std_pos	dm/include/GPS_receiver.hh	/^    double std_pos;         \/* *o (m)        std deviation of position from p matrix *\/$/;"	m	class:GPS_Receiver
std_ucbias	dm/include/GPS_receiver.hh	/^    double std_ucbias;      \/* *o (m)        std deviation of user clock bias from p matrix *\/$/;"	m	class:GPS_Receiver
std_vel	dm/include/GPS_receiver.hh	/^    double std_vel;         \/* *o (m)        std deviation of velocity from p matrix *\/$/;"	m	class:GPS_Receiver
time_gps	dm/include/GPS_receiver.hh	/^    double time_gps;            \/* ** (s)       GPS time passed *\/$/;"	m	class:GPS_Receiver
ucbias_error	dm/include/GPS_receiver.hh	/^    double ucbias_error;    \/* *io (m)      User clock bias error *\/$/;"	m	class:GPS_Receiver
ucfreq_error	dm/include/GPS_receiver.hh	/^    double ucfreq_error;    \/* *o (m)        User clock frequency error *\/$/;"	m	class:GPS_Receiver
ucfreq_noise	dm/include/GPS_receiver.hh	/^    double ucfreq_noise;    \/* *i (m\/s)     User clock frequency error *\/$/;"	m	class:GPS_Receiver
ucfreq_noise_bcor	dm/include/GPS_receiver.hh	/^    double ucfreq_noise_bcor;   \/* *i (--)     User clock frequency error bcor of markov variable *\/$/;"	m	class:GPS_Receiver
ucfreq_noise_sigma	dm/include/GPS_receiver.hh	/^    double ucfreq_noise_sigma;  \/* *i (--)     User clock frequency error sigma of markov variable *\/$/;"	m	class:GPS_Receiver
ucfreqm	dm/include/GPS_receiver.hh	/^    double ucfreqm;         \/* *o (m\/s)      User clock frequency state *\/$/;"	m	class:GPS_Receiver
vsii_quad	dm/include/GPS_receiver.hh	/^    double vsii_quad[12];   \/* *o (m\/s)      Best quadriga inertial velocities *\/$/;"	m	class:GPS_Receiver
Kinematics	dm/include/Kinematics.hh	/^class Kinematics {$/;"	c
TBD	dm/include/Kinematics.hh	/^    arma::mat TBD;      \/* *io (--)    Transformation Matrix of body coord wrt geodetic coord *\/$/;"	m	class:Kinematics
TBDQ	dm/include/Kinematics.hh	/^    arma::vec TBDQ;     \/* *o  (--)     TBDQ *\/$/;"	m	class:Kinematics
TBI	dm/include/Kinematics.hh	/^    arma::mat TBI;      \/* *io (--)    Transformation Matrix of body coord wrt inertia coord *\/$/;"	m	class:Kinematics
TBID	dm/include/Kinematics.hh	/^    arma::mat TBID;     \/* *io (--)    Transformation Matrix of body coord wrt inertia coord derivative *\/$/;"	m	class:Kinematics
TBID_Q	dm/include/Kinematics.hh	/^    arma::vec TBID_Q;   \/* *io (--)    Transformation Matrix of body coord wrt inertia coord derivative (Quaternion) *\/$/;"	m	class:Kinematics
TBI_Q	dm/include/Kinematics.hh	/^    arma::vec TBI_Q;    \/* *io (--)    Transformation Matrix of body coord wrt inertia coord (Quaternion) *\/$/;"	m	class:Kinematics
VBAB	dm/include/Kinematics.hh	/^    arma::vec VBAB;$/;"	m	class:Kinematics
_TBD	dm/include/Kinematics.hh	/^    double _TBD[3][3];  \/* *io (--)    Transformation Matrix of body coord wrt geodetic coord *\/$/;"	m	class:Kinematics
_TBDQ	dm/include/Kinematics.hh	/^    double _TBDQ[4];    \/* *o  (--)     TBDQ *\/$/;"	m	class:Kinematics
_TBI	dm/include/Kinematics.hh	/^    double _TBI[3][3];  \/* *io (--)    Transformation Matrix of body coord wrt inertia coord *\/$/;"	m	class:Kinematics
_TBID	dm/include/Kinematics.hh	/^    double _TBID[3][3]; \/* *io (--)    Transformation Matrix of body coord wrt inertia coord derivative *\/$/;"	m	class:Kinematics
_TBID_Q	dm/include/Kinematics.hh	/^    double _TBID_Q[4];  \/* *io (--)    Transformation Matrix of body coord wrt inertia coord derivative (Quaternion) *\/$/;"	m	class:Kinematics
_TBI_Q	dm/include/Kinematics.hh	/^    double _TBI_Q[4];   \/* *io (--)    Transformation Matrix of body coord wrt inertia coord (Quaternion) *\/$/;"	m	class:Kinematics
_VBAB	dm/include/Kinematics.hh	/^    double _VBAB[3];$/;"	m	class:Kinematics
__kinematics_HH__	dm/include/Kinematics.hh	2;"	d
alphaix	dm/include/Kinematics.hh	/^    double alphaix;     \/* *io (d)     Angle of attack, inertia velocity*\/$/;"	m	class:Kinematics
alphax	dm/include/Kinematics.hh	/^    double alphax;      \/* *io (d)     Angle of attack *\/$/;"	m	class:Kinematics
alppx	dm/include/Kinematics.hh	/^    double alppx;       \/* *io (d)     Total angle of attack *\/$/;"	m	class:Kinematics
betaix	dm/include/Kinematics.hh	/^    double betaix;      \/* *io (d)     Sideslip angle, inertia velocity*\/$/;"	m	class:Kinematics
betax	dm/include/Kinematics.hh	/^    double betax;       \/* *io (d)     Sideslip angle *\/$/;"	m	class:Kinematics
environment	dm/include/Kinematics.hh	/^    Environment * environment;$/;"	m	class:Kinematics
euler	dm/include/Kinematics.hh	/^    _Euler_     * euler;$/;"	m	class:Kinematics
newton	dm/include/Kinematics.hh	/^    Newton      * newton;$/;"	m	class:Kinematics
ortho_error	dm/include/Kinematics.hh	/^    double ortho_error; \/* *io (--)    Direction cosine matrix orthogonality error*\/$/;"	m	class:Kinematics
phibd	dm/include/Kinematics.hh	/^    double phibd;      \/* *o (r)     Roll angle of Vehicle wrt geodetic coord - rad *\/$/;"	m	class:Kinematics
phibdx	dm/include/Kinematics.hh	/^    double phibdx;      \/* *o (d)     Roll angle of Vehicle wrt geodetic coord - deg *\/$/;"	m	class:Kinematics
phipx	dm/include/Kinematics.hh	/^    double phipx;       \/* *io (d)     Aerodynamic roll angle*\/$/;"	m	class:Kinematics
psibd	dm/include/Kinematics.hh	/^    double psibd;      \/* *o (r)     Yaw angle of Vehicle wrt geodetic coord - rad *\/$/;"	m	class:Kinematics
psibdx	dm/include/Kinematics.hh	/^    double psibdx;      \/* *o (d)     Yaw angle of Vehicle wrt geodetic coord - deg *\/$/;"	m	class:Kinematics
thtbd	dm/include/Kinematics.hh	/^    double thtbd;      \/* *o (r)     Pitch angle of Vehicle wrt geodetic coord - rad *\/$/;"	m	class:Kinematics
thtbdx	dm/include/Kinematics.hh	/^    double thtbdx;      \/* *o (d)     Pitch angle of Vehicle wrt geodetic coord - deg *\/$/;"	m	class:Kinematics
ABEE	dm/include/Newton.hh	/^    arma::vec ABEE;         \/* *o  (m\/s2)   Vehicle acceleration in ECEF *\/$/;"	m	class:Newton
ABIB	dm/include/Newton.hh	/^    arma::vec ABIB;        \/* *o  (m\/s2)   Vehicle inertia acceleration on body coordinate *\/$/;"	m	class:Newton
ABII	dm/include/Newton.hh	/^    arma::vec ABII;      \/* *o  (m\/s2)   Vehicle inertia acceleration *\/$/;"	m	class:Newton
CONING	dm/include/Newton.hh	/^    arma::vec CONING;       \/* *o (r\/s)    Coning angular rate *\/$/;"	m	class:Newton
FSPB	dm/include/Newton.hh	/^    arma::vec FSPB;       \/* *o  (m\/s2)   Specific force in body coord *\/$/;"	m	class:Newton
JBEE	dm/include/Newton.hh	/^    arma::vec JBEE;         \/* *o (m\/s3)    Vehicle Jerk in ECEF *\/$/;"	m	class:Newton
JBII	dm/include/Newton.hh	/^    arma::vec JBII;         \/* *o (m\/s3)    Vehicle Jerk in ECI*\/$/;"	m	class:Newton
NEXT_ACC	dm/include/Newton.hh	/^    arma::vec NEXT_ACC;$/;"	m	class:Newton
Newton	dm/include/Newton.hh	/^class Newton {$/;"	c
SBEE	dm/include/Newton.hh	/^    arma::vec SBEE;        \/* *o  (m)     Vehicle position in earth coord  *\/$/;"	m	class:Newton
SBII	dm/include/Newton.hh	/^    arma::vec SBII;      \/* *o  (m)      Vehicle position in inertia coord *\/$/;"	m	class:Newton
TDE	dm/include/Newton.hh	/^    arma::mat TDE;$/;"	m	class:Newton
TDI	dm/include/Newton.hh	/^    arma::mat TDI;      \/* **  (--)     Transformation Matrix of geodetic wrt inertial  coordinates *\/$/;"	m	class:Newton
TGI	dm/include/Newton.hh	/^    arma::mat TGI;      \/* **  (--)     Transformation Matrix geocentric wrt inertia coord *\/$/;"	m	class:Newton
VBED	dm/include/Newton.hh	/^    arma::vec VBED;       \/* *o (m\/s)   NED velocity *\/$/;"	m	class:Newton
VBEE	dm/include/Newton.hh	/^    arma::vec VBEE;         \/* *o  (m\/s)     Vehicle speed in earth coord  *\/$/;"	m	class:Newton
VBII	dm/include/Newton.hh	/^    arma::vec VBII;      \/* *o  (m\/s)    Vehicle inertia velocity *\/$/;"	m	class:Newton
WEII	dm/include/Newton.hh	/^    arma::mat WEII;     \/* *o  (r\/s)    Earth's angular velocity (skew-sym) *\/$/;"	m	class:Newton
_ABEE	dm/include/Newton.hh	/^    double _ABEE[3];        \/* *o  (m\/s2)   Vehicle acceleration in ECEF *\/$/;"	m	class:Newton
_ABIB	dm/include/Newton.hh	/^    double _ABIB[3];       \/* *o  (m\/s2)   Vehicle inertia acceleration on body coordinate *\/$/;"	m	class:Newton
_ABII	dm/include/Newton.hh	/^    double _ABII[3];      \/* *o  (m\/s2)   Vehicle inertia acceleration *\/$/;"	m	class:Newton
_CONING	dm/include/Newton.hh	/^    double _CONING[3];      \/* *o (r\/s)    Coning angular rate *\/$/;"	m	class:Newton
_FSPB	dm/include/Newton.hh	/^    double _FSPB[3];       \/* *o  (m\/s2)   Specific force in body coord *\/$/;"	m	class:Newton
_JBEE	dm/include/Newton.hh	/^    double _JBEE[3];        \/* *o (m\/s3)    Vehicle Jerk in ECEF *\/$/;"	m	class:Newton
_JBII	dm/include/Newton.hh	/^    double _JBII[3];        \/* *o (m\/s3)    Vehicle Jerk in ECI*\/$/;"	m	class:Newton
_NEXT_ACC	dm/include/Newton.hh	/^    double _NEXT_ACC[3];$/;"	m	class:Newton
_SBEE	dm/include/Newton.hh	/^    double _SBEE[3];           \/* *o  (m)     Vehicle position in earth coord  *\/$/;"	m	class:Newton
_SBII	dm/include/Newton.hh	/^    double _SBII[3];       \/* *o  (m)      Vehicle position in inertia coord *\/$/;"	m	class:Newton
_TDE	dm/include/Newton.hh	/^    double _TDE[3][3];$/;"	m	class:Newton
_TDI	dm/include/Newton.hh	/^    double _TDI[3][3];     \/* **  (--)     Transformation Matrix of geodetic wrt inertial  coordinates *\/$/;"	m	class:Newton
_TGI	dm/include/Newton.hh	/^    double _TGI[3][3];     \/* **  (--)     Transformation Matrix geocentric wrt inertia coord *\/$/;"	m	class:Newton
_TVD	dm/include/Newton.hh	/^    double _TVD[3][3];     \/* **  (--)    Transformation Matrix of geographic velocity wrt geodetic coord *\/$/;"	m	class:Newton
_VBED	dm/include/Newton.hh	/^    double _VBED[3];      \/* *o (m\/s)   NED velocity *\/$/;"	m	class:Newton
_VBEE	dm/include/Newton.hh	/^    double _VBEE[3];           \/* *o  (m\/s)     Vehicle speed in earth coord  *\/$/;"	m	class:Newton
_VBII	dm/include/Newton.hh	/^    double _VBII[3];       \/* *o  (m\/s)    Vehicle inertia velocity *\/$/;"	m	class:Newton
_WEII	dm/include/Newton.hh	/^    double _WEII[3][3];    \/* **  (r\/s)    Earth's angular velocity (skew-sym) *\/$/;"	m	class:Newton
__newton_HH__	dm/include/Newton.hh	2;"	d
_anx	dm/include/Newton.hh	/^    double _anx;           \/* *o  (m\/s2)  [DIAG] Achieved normal acceleration *\/$/;"	m	class:Newton
_arg_perix	dm/include/Newton.hh	/^    double _arg_perix;     \/* *o  (deg)   [DIAG] The argument of periapsis (also called argument of perifocus or argument of pericenter), symbolized as ω, is one of the orbital elements of an orbiting body. Parametrically, ω is the angle from the body's ascending node to its periapsis, measured in the direction of motion *\/$/;"	m	class:Newton
_ayx	dm/include/Newton.hh	/^    double _ayx;           \/* *o  (m\/s2)  [DIAG] Achieved side acceleration *\/$/;"	m	class:Newton
_dbi	dm/include/Newton.hh	/^    double _dbi;           \/* *o  (m)     [DIAG] Vehicle distance from center of earth *\/$/;"	m	class:Newton
_dvbe	dm/include/Newton.hh	/^    double _dvbe;          \/* *o  (m\/s)   [DIAG] Vehicle geographic speed *\/$/;"	m	class:Newton
_dvbi	dm/include/Newton.hh	/^    double _dvbi;          \/* *o  (m\/s)   [DIAG] Vehicle inertia speed *\/$/;"	m	class:Newton
_eccentricity	dm/include/Newton.hh	/^    double _eccentricity;  \/* *o  (--)    [DIAG] Determines the amount by which its orbit around another body deviates from a perfect circle *\/$/;"	m	class:Newton
_gndtrkmx	dm/include/Newton.hh	/^    double _gndtrkmx;      \/* *o  (km)    [DIAG] Ground track - km *\/$/;"	m	class:Newton
_gndtrnmx	dm/include/Newton.hh	/^    double _gndtrnmx;      \/* **  (nm)    [DIAG] Ground track - nm *\/$/;"	m	class:Newton
_grndtrck	dm/include/Newton.hh	/^    double _grndtrck;      \/* *o  (m)     [DIAG] Vehicle ground track on earth *\/$/;"	m	class:Newton
_ha	dm/include/Newton.hh	/^    double _ha;            \/* *o  (m)     [DIAG] Orbital Apogee *\/$/;"	m	class:Newton
_hp	dm/include/Newton.hh	/^    double _hp;            \/* *o  (m)     [DIAG] Orbital Perigee *\/$/;"	m	class:Newton
_inclination	dm/include/Newton.hh	/^    double _inclination;   \/* *o  (deg)   [DIAG] Orbital inclination is the minimun angle between reference plane and the orbital plane or direction of an object in orbit around another object *\/$/;"	m	class:Newton
_lon_anodex	dm/include/Newton.hh	/^    double _lon_anodex;    \/* *o  (deg)   [DIAG] The longitude of the ascending node (☊ or Ω) is one of the orbital elements used to specify the orbit of an object in space. It is the angle from a reference direction, called the origin of longitude, to the direction of the ascending node, measured in a reference plane *\/$/;"	m	class:Newton
_psivdx	dm/include/Newton.hh	/^    double _psivdx;        \/* *o  (d)     [DIAG] Vehicle's heading angle *\/$/;"	m	class:Newton
_ref_alt	dm/include/Newton.hh	/^    double _ref_alt;       \/* *o  (m)     [DIAG] *\/$/;"	m	class:Newton
_semi_major	dm/include/Newton.hh	/^    double _semi_major;    \/* *o  (m)     [DIAG] the major axis of an ellipse is its longest diameter *\/$/;"	m	class:Newton
_thtvdx	dm/include/Newton.hh	/^    double _thtvdx;        \/* *o  (d)     [DIAG] Vehicle's flight path angle *\/$/;"	m	class:Newton
_true_anomx	dm/include/Newton.hh	/^    double _true_anomx;    \/* *o  (deg)   [DIAG] In celestial mechanics, true anomaly is an angular parameter that defines the position of a body moving along a Keplerian orbit. It is the angle between the direction of periapsis and the current position of the body, as seen from the main focus of the ellipse (the point around which the object orbits) *\/$/;"	m	class:Newton
aero_loss	dm/include/Newton.hh	/^    double aero_loss;     \/* **  (m\/s)    Velocity loss caused by aerodynamic drag *\/$/;"	m	class:Newton
alt	dm/include/Newton.hh	/^    double alt;           \/* *o  (m)      Vehicle altitude *\/$/;"	m	class:Newton
con_ang	dm/include/Newton.hh	/^    double con_ang;         \/* *o (r)      Coning angle *\/$/;"	m	class:Newton
con_w	dm/include/Newton.hh	/^    double con_w;           \/* *o  (--)     Coning freqency *\/$/;"	m	class:Newton
environment	dm/include/Newton.hh	/^    Environment *environment;$/;"	m	class:Newton
euler	dm/include/Newton.hh	/^    _Euler_     *euler;$/;"	m	class:Newton
forces	dm/include/Newton.hh	/^    Forces      *forces;$/;"	m	class:Newton
gravity_loss	dm/include/Newton.hh	/^    double gravity_loss;  \/* **  (m\/s)    Velocity loss caused by gravity *\/$/;"	m	class:Newton
kinematics	dm/include/Newton.hh	/^    Kinematics  *kinematics;$/;"	m	class:Newton
latx	dm/include/Newton.hh	/^    double latx;          \/* *o  (d)      Vehicle latitude *\/$/;"	m	class:Newton
liftoff	dm/include/Newton.hh	/^    unsigned int liftoff;        \/* *i  (--)     To check wether the rocket liftoff or not: liftoff = 1, not liftoff = 0 *\/$/;"	m	class:Newton
lonx	dm/include/Newton.hh	/^    double lonx;          \/* *o  (d)      Vehicle longitude *\/$/;"	m	class:Newton
propulsion	dm/include/Newton.hh	/^    Propulsion  *propulsion;$/;"	m	class:Newton
t	dm/include/Newton.hh	/^    double t;               \/* *o (s)       timer *\/$/;"	m	class:Newton
IBBB	dm/include/Propulsion.hh	/^    arma::mat IBBB;             \/* *o (kg*m2)  Vehicle moment of inertia*\/$/;"	m	class:Propulsion
INPUT_THRUST	dm/include/Propulsion.hh	/^        INPUT_THRUST = 3,$/;"	e	enum:Propulsion::THRUST_TYPE
LTG_THRUST	dm/include/Propulsion.hh	/^        LTG_THRUST = 4$/;"	e	enum:Propulsion::THRUST_TYPE
NO_THRUST	dm/include/Propulsion.hh	/^        NO_THRUST = 0,$/;"	e	enum:Propulsion::THRUST_TYPE
Propulsion	dm/include/Propulsion.hh	/^class Propulsion{$/;"	c
THRUST_TYPE	dm/include/Propulsion.hh	/^    enum THRUST_TYPE {$/;"	g	class:Propulsion
_IBBB	dm/include/Propulsion.hh	/^    double _IBBB[3][3];         \/* *o (kg*m2)  Vehicle moment of inertia*\/$/;"	m	class:Propulsion
__propulsion_HH__	dm/include/Propulsion.hh	2;"	d
aexit	dm/include/Propulsion.hh	/^    double aexit;           \/* *o (m2)     Nozzle exit area*\/$/;"	m	class:Propulsion
environment	dm/include/Propulsion.hh	/^    Environment * environment;$/;"	m	class:Propulsion
fmass0	dm/include/Propulsion.hh	/^    double fmass0;          \/* *o (kg)     Initial fuel mass in stage*\/$/;"	m	class:Propulsion
fmasse	dm/include/Propulsion.hh	/^    double fmasse;              \/* *o (kg)     Fuel mass expended (zero initialization required)*\/$/;"	m	class:Propulsion
fmassed	dm/include/Propulsion.hh	/^    double fmassed;              \/* *o (kg\/s)   Fuel mass expended derivative*\/$/;"	m	class:Propulsion
fmassr	dm/include/Propulsion.hh	/^    double fmassr;              \/* *o (kg)     Remaining fuel mass*\/$/;"	m	class:Propulsion
fuel_flow_rate	dm/include/Propulsion.hh	/^    double fuel_flow_rate;  \/* *o (kg\/s)   Fuel flow rate of rocket motor*\/$/;"	m	class:Propulsion
moi_roll_0	dm/include/Propulsion.hh	/^    double moi_roll_0;      \/* *o (kg*m2)  Roll MOI of vehicle, initial*\/$/;"	m	class:Propulsion
moi_roll_1	dm/include/Propulsion.hh	/^    double moi_roll_1;      \/* *o (kg*m2)  Roll MOI of vehicle, burn-out*\/$/;"	m	class:Propulsion
moi_trans_0	dm/include/Propulsion.hh	/^    double moi_trans_0;     \/* *o (kg*m2)  Transverse MOI of vehicle, initial*\/$/;"	m	class:Propulsion
moi_trans_1	dm/include/Propulsion.hh	/^    double moi_trans_1;     \/* *o (kg*m2)  Transverse MOI of vehicle, burn-out*\/$/;"	m	class:Propulsion
payload	dm/include/Propulsion.hh	/^    double payload;         \/* *o (kg)     payload mass*\/$/;"	m	class:Propulsion
spi	dm/include/Propulsion.hh	/^    double spi;             \/* *o (s)      Specific impulse*\/$/;"	m	class:Propulsion
thrust	dm/include/Propulsion.hh	/^    double thrust;              \/* *o (N)      Thrust*\/$/;"	m	class:Propulsion
thrust_delta_v	dm/include/Propulsion.hh	/^    double thrust_delta_v;      \/* *o (m\/s)    delta v*\/$/;"	m	class:Propulsion
thrust_state	dm/include/Propulsion.hh	/^    enum THRUST_TYPE thrust_state;   \/* *o (--)     Propulsion mode, See THRUST TYPE*\/$/;"	m	class:Propulsion	typeref:enum:Propulsion::THRUST_TYPE
vmass	dm/include/Propulsion.hh	/^    double vmass;               \/* *o (kg)     Vehicle mass*\/$/;"	m	class:Propulsion
vmass0	dm/include/Propulsion.hh	/^    double vmass0;          \/* *o (kg)     Initial vehicle mass*\/$/;"	m	class:Propulsion
xcg	dm/include/Propulsion.hh	/^    double xcg;                 \/* *o (m)      Center 0f Gravity location from nose cone*\/$/;"	m	class:Propulsion
xcg_0	dm/include/Propulsion.hh	/^    double xcg_0;           \/* *o (m)      Initial cg location from nose*\/$/;"	m	class:Propulsion
xcg_1	dm/include/Propulsion.hh	/^    double xcg_1;           \/* *o (m)      Final cg location from nose*\/$/;"	m	class:Propulsion
FARCS	dm/include/Rcs.hh	/^    arma::vec  FARCS;        \/* *io  (N)    Force generated by the RCS side thrusters *\/$/;"	m	class:RCS
FMRCS	dm/include/Rcs.hh	/^    arma::vec  FMRCS;        \/* *io  (N*m)  Moment generated by the RCS thrusters *\/$/;"	m	class:RCS
RCS	dm/include/Rcs.hh	/^class RCS {$/;"	c
_FARCS	dm/include/Rcs.hh	/^    double    _FARCS[3];     \/* *io  (N)    Force generated by the RCS side thrusters *\/$/;"	m	class:RCS
_FMRCS	dm/include/Rcs.hh	/^    double    _FMRCS[3];     \/* *io  (N*m)  Moment generated by the RCS thrusters *\/$/;"	m	class:RCS
__RCS_HH__	dm/include/Rcs.hh	2;"	d
grab_e_pitch	dm/include/Rcs.hh	/^    std::function<double()> grab_e_pitch;$/;"	m	class:RCS
grab_e_roll	dm/include/Rcs.hh	/^    std::function<double()> grab_e_roll;$/;"	m	class:RCS
grab_e_yaw	dm/include/Rcs.hh	/^    std::function<double()> grab_e_yaw;$/;"	m	class:RCS
o_pitch	dm/include/Rcs.hh	/^    int     o_pitch;         \/* *o  (--)   Pitch output of Schmitt trigger *\/$/;"	m	class:RCS
o_roll	dm/include/Rcs.hh	/^    int     o_roll;          \/* *o  (--)   Roll output of Schmitt trigger *\/$/;"	m	class:RCS
o_yaw	dm/include/Rcs.hh	/^    int     o_yaw;           \/* *o  (--)   Yaw output of Schmitt trigger *\/$/;"	m	class:RCS
pitch_count	dm/include/Rcs.hh	/^    int     pitch_count;     \/* *o  (--)   Pitch thruster on\/off *\/$/;"	m	class:RCS
pitch_mom_max	dm/include/Rcs.hh	/^    double  pitch_mom_max;   \/* *o  (N*m)  RCS pitching moment max value *\/$/;"	m	class:RCS
pitch_schi	dm/include/Rcs.hh	/^    Schmitt_Trigger pitch_schi;$/;"	m	class:RCS
propulsion	dm/include/Rcs.hh	/^    Propulsion * propulsion;$/;"	m	class:RCS
rcs_pos	dm/include/Rcs.hh	/^    double  rcs_pos;         \/* *o  (m)    rcs thruster's postion from nose *\/$/;"	m	class:RCS
rcs_thrust	dm/include/Rcs.hh	/^    double  rcs_thrust;      \/* *o  (N)    rcs thrust *\/$/;"	m	class:RCS
rocket_r	dm/include/Rcs.hh	/^    double  rocket_r;        \/* *o  (m)    rocket's radius *\/$/;"	m	class:RCS
roll_count	dm/include/Rcs.hh	/^    int     roll_count;      \/* *o  (--)   Roll thruster on\/off *\/$/;"	m	class:RCS
roll_mom_max	dm/include/Rcs.hh	/^    double  roll_mom_max;    \/* *o  (N*m)  RCS rolling moment max value *\/$/;"	m	class:RCS
roll_schi	dm/include/Rcs.hh	/^    Schmitt_Trigger roll_schi;$/;"	m	class:RCS
yaw_count	dm/include/Rcs.hh	/^    int     yaw_count;       \/* *o  (--)   Yaw thruster on\/off *\/$/;"	m	class:RCS
yaw_mom_max	dm/include/Rcs.hh	/^    double  yaw_mom_max;     \/* *o  (N*m)  RCS yawing moment max value *\/$/;"	m	class:RCS
yaw_schi	dm/include/Rcs.hh	/^    Schmitt_Trigger yaw_schi;$/;"	m	class:RCS
FMPB	dm/include/Tvc.hh	/^    arma::vec FMPB;     \/* *o  (N*m)    Thrust moment in body axes *\/$/;"	m	class:TVC
FPB	dm/include/Tvc.hh	/^    arma::vec FPB;      \/* *o  (N)     Thrust force in body axes n*\/$/;"	m	class:TVC
NO_DYNAMIC_TVC	dm/include/Tvc.hh	/^        NO_DYNAMIC_TVC,$/;"	e	enum:TVC::TVC_TYPE
NO_TVC	dm/include/Tvc.hh	/^        NO_TVC = 0,$/;"	e	enum:TVC::TVC_TYPE
ONLINE_SECOND_ORDER_TVC	dm/include/Tvc.hh	/^        ONLINE_SECOND_ORDER_TVC,  \/\/ same as 2nd order but with on-line TVC gain$/;"	e	enum:TVC::TVC_TYPE
S2_TVC	dm/include/Tvc.hh	/^        S2_TVC,$/;"	e	enum:TVC::TVC_TYPE
S3_TVC	dm/include/Tvc.hh	/^        S3_TVC$/;"	e	enum:TVC::TVC_TYPE
SECON_ORDER_TVC	dm/include/Tvc.hh	/^        SECON_ORDER_TVC,         \/\/ TVC Second order dynamics with rate limiting$/;"	e	enum:TVC::TVC_TYPE
TVC	dm/include/Tvc.hh	/^class TVC {$/;"	c
TVC_TYPE	dm/include/Tvc.hh	/^    enum TVC_TYPE {$/;"	g	class:TVC
_FMPB	dm/include/Tvc.hh	/^    double   _FMPB[3];  \/* *o  (N*m)    Thrust moment in body axes *\/$/;"	m	class:TVC
_FPB	dm/include/Tvc.hh	/^    double   _FPB[3];   \/* *o  (N)     Thrust force in body axes n*\/$/;"	m	class:TVC
__TVC_HH__	dm/include/Tvc.hh	2;"	d
detas	dm/include/Tvc.hh	/^    double detas;       \/* *o  (r\/s)   Pitch nozzle rate *\/$/;"	m	class:TVC
detasd	dm/include/Tvc.hh	/^    double detasd;      \/* *o  (r\/s2)  Pitch nozzle rate derivative *\/$/;"	m	class:TVC
dtvclimx	dm/include/Tvc.hh	/^    double dtvclimx;    \/* *o  (d\/s)   Nozzle deflection rate limiter *\/$/;"	m	class:TVC
dzeta	dm/include/Tvc.hh	/^    double dzeta;       \/* *o  (r\/s)   Yaw nozzle rate *\/$/;"	m	class:TVC
dzetad	dm/include/Tvc.hh	/^    double dzetad;      \/* *o  (r\/s2)  Yaw nozzle rate derivative *\/$/;"	m	class:TVC
environment	dm/include/Tvc.hh	/^    Environment * environment;$/;"	m	class:TVC
etacx	dm/include/Tvc.hh	/^    double etacx;       \/* *io  (d)     Commanded nozzle pitch deflection *\/$/;"	m	class:TVC
etas	dm/include/Tvc.hh	/^    double etas;        \/* *o  (r)     Pitch nozzle deflection *\/$/;"	m	class:TVC
etasd	dm/include/Tvc.hh	/^    double etasd;       \/* *o  (r\/s)   Pitch nozzle derivative *\/$/;"	m	class:TVC
etax	dm/include/Tvc.hh	/^    double etax;        \/* *io  (d)     Nozzle pitch deflection *\/$/;"	m	class:TVC
factgtvc	dm/include/Tvc.hh	/^    double factgtvc;    \/* *o  (--)    Factor for TVC gain *\/$/;"	m	class:TVC
grab_delecx	dm/include/Tvc.hh	/^    std::function<double()>   grab_delecx;$/;"	m	class:TVC
grab_delrcx	dm/include/Tvc.hh	/^    std::function<double()>   grab_delrcx;$/;"	m	class:TVC
grab_theta_a_cmd	dm/include/Tvc.hh	/^    std::function<double()>   grab_theta_a_cmd;$/;"	m	class:TVC
grab_theta_b_cmd	dm/include/Tvc.hh	/^    std::function<double()>   grab_theta_b_cmd;$/;"	m	class:TVC
grab_theta_c_cmd	dm/include/Tvc.hh	/^    std::function<double()>   grab_theta_c_cmd;$/;"	m	class:TVC
grab_theta_d_cmd	dm/include/Tvc.hh	/^    std::function<double()>   grab_theta_d_cmd;$/;"	m	class:TVC
gtvc	dm/include/Tvc.hh	/^    double gtvc;        \/* *o  (--)    TVC nozzle deflection gain n*\/$/;"	m	class:TVC
kinematics	dm/include/Tvc.hh	/^    Kinematics  * kinematics;$/;"	m	class:TVC
mtvc	dm/include/Tvc.hh	/^    enum TVC_TYPE mtvc;            \/* *o  (--)      see TVC_TYPE *\/$/;"	m	class:TVC	typeref:enum:TVC::TVC_TYPE
parm	dm/include/Tvc.hh	/^    double parm;        \/* *o  (m)     Propulsion moment arm from vehicle nose n*\/$/;"	m	class:TVC
propulsion	dm/include/Tvc.hh	/^    Propulsion  * propulsion;$/;"	m	class:TVC
s2_act1_y1	dm/include/Tvc.hh	/^    double s2_act1_y1;  \/* *io  (r)     Actuator 1 post state *\/$/;"	m	class:TVC
s2_act1_y2	dm/include/Tvc.hh	/^    double s2_act1_y2;  \/* *io  (r)     Actuator 1 prior state *\/$/;"	m	class:TVC
s2_act2_y1	dm/include/Tvc.hh	/^    double s2_act2_y1;  \/* *io  (r)     Actuator 2 post state *\/$/;"	m	class:TVC
s2_act2_y2	dm/include/Tvc.hh	/^    double s2_act2_y2;  \/* *io  (r)     Actuator 2 prior state *\/$/;"	m	class:TVC
s2_act3_y1	dm/include/Tvc.hh	/^    double s2_act3_y1;  \/* *io  (r)     Actuator 3 post state *\/$/;"	m	class:TVC
s2_act3_y2	dm/include/Tvc.hh	/^    double s2_act3_y2;  \/* *io  (r)     Actuator 3 prior state *\/$/;"	m	class:TVC
s2_act4_y1	dm/include/Tvc.hh	/^    double s2_act4_y1;  \/* *io  (r)     Actuator 4 post state *\/$/;"	m	class:TVC
s2_act4_y2	dm/include/Tvc.hh	/^    double s2_act4_y2;  \/* *io  (r)     Actuator 4 prior state *\/$/;"	m	class:TVC
s2_ratelim	dm/include/Tvc.hh	/^    double s2_ratelim;  \/* *io  (r\/s)   Actuator rate limit *\/$/;"	m	class:TVC
s2_tau1	dm/include/Tvc.hh	/^    double s2_tau1;     \/* *io  (--)    Actuator 1 time constant *\/$/;"	m	class:TVC
s2_tau2	dm/include/Tvc.hh	/^    double s2_tau2;     \/* *io  (--)    Actuator 2 time constant *\/$/;"	m	class:TVC
s2_tau3	dm/include/Tvc.hh	/^    double s2_tau3;     \/* *io  (--)    Actuator 3 time constant *\/$/;"	m	class:TVC
s2_tau4	dm/include/Tvc.hh	/^    double s2_tau4;     \/* *io  (--)    Actuator 4 time constant *\/$/;"	m	class:TVC
s2_tvclim	dm/include/Tvc.hh	/^    double s2_tvclim;   \/* *io  (r)     Actuator limit *\/$/;"	m	class:TVC
tvclimx	dm/include/Tvc.hh	/^    double tvclimx;     \/* *o  (d)     Nozzle deflection limiter *\/$/;"	m	class:TVC
wntvc	dm/include/Tvc.hh	/^    double wntvc;       \/* *o  (r\/s)   Natural frequency of TVC *\/$/;"	m	class:TVC
zeta	dm/include/Tvc.hh	/^    double zeta;        \/* *o  (r)     Yaw nozzle deflection *\/$/;"	m	class:TVC
zetad	dm/include/Tvc.hh	/^    double zetad;       \/* *o  (r\/s)   Yaw nozzle derivative *\/$/;"	m	class:TVC
zetcx	dm/include/Tvc.hh	/^    double zetcx;       \/* *io  (d)     Commanded nozzle yaw deflection *\/$/;"	m	class:TVC
zettvc	dm/include/Tvc.hh	/^    double zettvc;      \/* *o  (--)    Damping of TVC *\/$/;"	m	class:TVC
zetx	dm/include/Tvc.hh	/^    double zetx;        \/* *io  (d)     Nozzle yaw deflection *\/$/;"	m	class:TVC
AeroDynamics	dm/src/Aerodynamics.cpp	/^AeroDynamics::AeroDynamics(Kinematics &kine,  Environment &env,$/;"	f	class:AeroDynamics
AeroDynamics	dm/src/Aerodynamics.cpp	/^AeroDynamics::AeroDynamics(const AeroDynamics& other)$/;"	f	class:AeroDynamics
aerodynamics_der	dm/src/Aerodynamics.cpp	/^void AeroDynamics::aerodynamics_der() {$/;"	f	class:AeroDynamics
calculate_aero	dm/src/Aerodynamics.cpp	/^void AeroDynamics::calculate_aero(double int_step) {$/;"	f	class:AeroDynamics
get_cll	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_cll() { return cll; }$/;"	f	class:AeroDynamics
get_clm	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_clm() { return clm; }$/;"	f	class:AeroDynamics
get_cln	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_cln() { return cln; }$/;"	f	class:AeroDynamics
get_cx	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_cx() { return cx; }$/;"	f	class:AeroDynamics
get_cy	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_cy() { return cy; }$/;"	f	class:AeroDynamics
get_cz	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_cz() { return cz; }$/;"	f	class:AeroDynamics
get_dla	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_dla() { return dla; }$/;"	f	class:AeroDynamics
get_dlde	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_dlde() { return dlde; }$/;"	f	class:AeroDynamics
get_dma	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_dma() { return dma; }$/;"	f	class:AeroDynamics
get_dmde	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_dmde() { return dmde; }$/;"	f	class:AeroDynamics
get_dmq	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_dmq() { return dmq; }$/;"	f	class:AeroDynamics
get_dnb	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_dnb() { return dnb; }$/;"	f	class:AeroDynamics
get_dnd	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_dnd() { return dnd; }$/;"	f	class:AeroDynamics
get_dndr	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_dndr() { return dndr; }$/;"	f	class:AeroDynamics
get_dnr	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_dnr() { return dnr; }$/;"	f	class:AeroDynamics
get_dyb	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_dyb() { return dyb; }$/;"	f	class:AeroDynamics
get_gymax	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_gymax() { return gymax; }$/;"	f	class:AeroDynamics
get_refa	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_refa() { return refa; }$/;"	f	class:AeroDynamics
get_refd	dm/src/Aerodynamics.cpp	/^double AeroDynamics::get_refd() { return refd; }$/;"	f	class:AeroDynamics
initialize	dm/src/Aerodynamics.cpp	/^void AeroDynamics::initialize() {$/;"	f	class:AeroDynamics
load_aerotable	dm/src/Aerodynamics.cpp	/^void AeroDynamics::load_aerotable(const char* filename) {$/;"	f	class:AeroDynamics
operator =	dm/src/Aerodynamics.cpp	/^AeroDynamics& AeroDynamics::operator=(const AeroDynamics& other) {$/;"	f	class:AeroDynamics
set_alimitx	dm/src/Aerodynamics.cpp	/^void AeroDynamics::set_alimitx(double in) { alimitx = in; }$/;"	f	class:AeroDynamics
set_alplimx	dm/src/Aerodynamics.cpp	/^void AeroDynamics::set_alplimx(double in) { alplimx = in; }$/;"	f	class:AeroDynamics
set_refa	dm/src/Aerodynamics.cpp	/^void AeroDynamics::set_refa(double in) { refa = in; }$/;"	f	class:AeroDynamics
set_refd	dm/src/Aerodynamics.cpp	/^void AeroDynamics::set_refd(double in) { refd = in; }$/;"	f	class:AeroDynamics
set_xcg_ref	dm/src/Aerodynamics.cpp	/^void AeroDynamics::set_xcg_ref(double in) { xcg_ref = in; }$/;"	f	class:AeroDynamics
AccelHarmonic	dm/src/Environment.cpp	/^arma::vec Environment::AccelHarmonic(arma::vec3 SBII, double CS[21][21],$/;"	f	class:Environment
CS_JGM3	dm/src/Environment.cpp	/^double CS_JGM3[N_JGM3+1][N_JGM3+1] = {$/;"	v
Environment	dm/src/Environment.cpp	/^Environment::Environment(Newton &newt, AeroDynamics &aero, Kinematics &kine)$/;"	f	class:Environment
Environment	dm/src/Environment.cpp	/^Environment::Environment(const Environment& other)$/;"	f	class:Environment
N_JGM3	dm/src/Environment.cpp	30;"	d	file:
atmosphere_use_nasa	dm/src/Environment.cpp	/^void Environment::atmosphere_use_nasa() {$/;"	f	class:Environment
atmosphere_use_public	dm/src/Environment.cpp	/^void Environment::atmosphere_use_public() {$/;"	f	class:Environment
atmosphere_use_weather_deck	dm/src/Environment.cpp	/^void Environment::atmosphere_use_weather_deck(char* filename) {$/;"	f	class:Environment
default_data	dm/src/Environment.cpp	/^void Environment::default_data() {$/;"	f	class:Environment
dm_RNP	dm/src/Environment.cpp	/^void Environment::dm_RNP() {$/;"	f	class:Environment
get_GRAVG	dm/src/Environment.cpp	/^arma::vec3 Environment::get_GRAVG() { return GRAVG; }$/;"	f	class:Environment
get_TEI	dm/src/Environment.cpp	/^arma::mat33 Environment::get_TEI() { return TEI; }$/;"	f	class:Environment
get_VAED	dm/src/Environment.cpp	/^arma::vec3 Environment::get_VAED() { return wind->get_VAED(); }$/;"	f	class:Environment
get_dvba	dm/src/Environment.cpp	/^double Environment::get_dvba() { return dvba; }$/;"	f	class:Environment
get_grav	dm/src/Environment.cpp	/^double Environment::get_grav() { return norm(GRAVG); }$/;"	f	class:Environment
get_pdynmc	dm/src/Environment.cpp	/^double Environment::get_pdynmc() { return pdynmc; }$/;"	f	class:Environment
get_press	dm/src/Environment.cpp	/^double Environment::get_press() { return atmosphere->get_pressure(); }$/;"	f	class:Environment
get_rho	dm/src/Environment.cpp	/^double Environment::get_rho() { return atmosphere->get_density(); }$/;"	f	class:Environment
get_tempk	dm/src/Environment.cpp	/^double Environment::get_tempk() { return atmosphere->get_temperature_in_kelvin(); }$/;"	f	class:Environment
get_vmach	dm/src/Environment.cpp	/^double Environment::get_vmach() { return vmach; }$/;"	f	class:Environment
initialize	dm/src/Environment.cpp	/^void Environment::initialize() {$/;"	f	class:Environment
operator =	dm/src/Environment.cpp	/^Environment& Environment::operator=(const Environment& other) {$/;"	f	class:Environment
propagate	dm/src/Environment.cpp	/^void Environment::propagate(double int_step) {$/;"	f	class:Environment
set_constant_wind	dm/src/Environment.cpp	/^void Environment::set_constant_wind(double dvae, double dir, double twind, double vertical_wind) {$/;"	f	class:Environment
set_no_wind	dm/src/Environment.cpp	/^void Environment::set_no_wind() {$/;"	f	class:Environment
set_no_wind_turbulunce	dm/src/Environment.cpp	/^void Environment::set_no_wind_turbulunce() {$/;"	f	class:Environment
set_tabular_wind	dm/src/Environment.cpp	/^void Environment::set_tabular_wind(char* filename, double twind, double vertical_wind) {$/;"	f	class:Environment
set_wind_turbulunce	dm/src/Environment.cpp	/^void Environment::set_wind_turbulunce(double turb_length, double turb_sigma,$/;"	f	class:Environment
update_diagnostic_attributes	dm/src/Environment.cpp	/^void Environment::update_diagnostic_attributes(double int_step) {$/;"	f	class:Environment
~Environment	dm/src/Environment.cpp	/^Environment::~Environment() {$/;"	f	class:Environment
_Euler_	dm/src/Euler.cpp	/^_Euler_::_Euler_(Kinematics& kine, Propulsion& prop, Forces& forc)$/;"	f	class:_Euler_
_Euler_	dm/src/Euler.cpp	/^_Euler_::_Euler_(const _Euler_& other)$/;"	f	class:_Euler_
calculate_WBEB	dm/src/Euler.cpp	/^arma::vec3 _Euler_::calculate_WBEB(arma::mat33 TBI) {$/;"	f	class:_Euler_
calculate_WBII	dm/src/Euler.cpp	/^arma::vec3 _Euler_::calculate_WBII(arma::mat33 TBI) {$/;"	f	class:_Euler_
default_data	dm/src/Euler.cpp	/^void _Euler_::default_data() {$/;"	f	class:_Euler_
get_WBIB	dm/src/Euler.cpp	/^arma::vec3 _Euler_::get_WBIB() { return this->WBIB; }$/;"	f	class:_Euler_
get_WBII	dm/src/Euler.cpp	/^arma::vec3 _Euler_::get_WBII() { return this->WBII; }$/;"	f	class:_Euler_
get_WEII	dm/src/Euler.cpp	/^arma::vec3 _Euler_::get_WEII() { return this->WEII; }$/;"	f	class:_Euler_
get_ppx	dm/src/Euler.cpp	/^double _Euler_::get_ppx() { return this->WBEB(0) * DEG; }$/;"	f	class:_Euler_
get_qqx	dm/src/Euler.cpp	/^double _Euler_::get_qqx() { return this->WBEB(1) * DEG; }$/;"	f	class:_Euler_
get_rrx	dm/src/Euler.cpp	/^double _Euler_::get_rrx() { return this->WBEB(2) * DEG; }$/;"	f	class:_Euler_
initialize	dm/src/Euler.cpp	/^void _Euler_::initialize() {$/;"	f	class:_Euler_
load_angular_velocity	dm/src/Euler.cpp	/^void _Euler_::load_angular_velocity(double ppx, double qqx, double rrx) {$/;"	f	class:_Euler_
operator =	dm/src/Euler.cpp	/^_Euler_& _Euler_::operator=(const _Euler_& other) {$/;"	f	class:_Euler_
propagate	dm/src/Euler.cpp	/^void _Euler_::propagate(double int_step) {$/;"	f	class:_Euler_
propagate_WBIB	dm/src/Euler.cpp	/^void _Euler_::propagate_WBIB(double int_step, arma::vec3 FMB, arma::mat33 IBBB) {$/;"	f	class:_Euler_
update_diagnostic_attributes	dm/src/Euler.cpp	/^void _Euler_::update_diagnostic_attributes(double int_step) {$/;"	f	class:_Euler_
Forces	dm/src/Forces.cpp	/^Forces::Forces(Environment& env, Propulsion& prop, RCS& rcs, AeroDynamics& aero, TVC& tvc)$/;"	f	class:Forces
Forces	dm/src/Forces.cpp	/^Forces::Forces(const Forces& other)$/;"	f	class:Forces
collect_forces_and_propagate	dm/src/Forces.cpp	/^void Forces::collect_forces_and_propagate() {$/;"	f	class:Forces
default_data	dm/src/Forces.cpp	/^void Forces::default_data() {$/;"	f	class:Forces
get_FAP	dm/src/Forces.cpp	/^arma::vec Forces::get_FAP() { return FAP; }$/;"	f	class:Forces
get_FAPB	dm/src/Forces.cpp	/^arma::vec Forces::get_FAPB() { return FAPB; }$/;"	f	class:Forces
get_FMB	dm/src/Forces.cpp	/^arma::vec Forces::get_FMB() { return FMB; }$/;"	f	class:Forces
initialize	dm/src/Forces.cpp	/^void Forces::initialize() {$/;"	f	class:Forces
operator =	dm/src/Forces.cpp	/^Forces& Forces::operator=(const Forces& other) {$/;"	f	class:Forces
GDOP	dm/src/GPS_constellation.cpp	/^void GPS_constellation::GDOP(channel_t *chan, arma::vec3 xyz) {$/;"	f	class:GPS_constellation
GPS_constellation	dm/src/GPS_constellation.cpp	/^GPS_constellation::GPS_constellation(Newton &newt, Environment &env, Kinematics &kine)$/;"	f	class:GPS_constellation
GPS_constellation	dm/src/GPS_constellation.cpp	/^GPS_constellation::GPS_constellation(const GPS_constellation& other)$/;"	f	class:GPS_constellation
allocateChannel	dm/src/GPS_constellation.cpp	/^int GPS_constellation::allocateChannel(channel_t *chan, ephem_t *eph, ionoutc_t ionoutc, time_util::GPS_TIME grx, arma::vec3 XYZ, double elvMask) {$/;"	f	class:GPS_constellation
checkSatVisibility	dm/src/GPS_constellation.cpp	/^int GPS_constellation::checkSatVisibility(ephem_t eph, time_util::GPS_TIME g, arma::vec3 xyz, double elvMask, arma::vec2 &azel) {$/;"	f	class:GPS_constellation
compute	dm/src/GPS_constellation.cpp	/^void GPS_constellation::compute() {$/;"	f	class:GPS_constellation
computeRange	dm/src/GPS_constellation.cpp	/^void GPS_constellation::computeRange(range_t *rho, ephem_t eph, ionoutc_t *ionoutc, time_util::GPS_TIME g, arma::vec3 xyz) {$/;"	f	class:GPS_constellation
enu2atenna	dm/src/GPS_constellation.cpp	/^arma::mat33 GPS_constellation::enu2atenna(double phi, double tht, double psi) {$/;"	f	class:GPS_constellation
enu2ecef	dm/src/GPS_constellation.cpp	/^arma::mat33 GPS_constellation::enu2ecef(arma::vec3 llh) {$/;"	f	class:GPS_constellation
get_channel	dm/src/GPS_constellation.cpp	/^channel_t *GPS_constellation::get_channel() {$/;"	f	class:GPS_constellation
get_transmit_data	dm/src/GPS_constellation.cpp	/^transmit_channel * GPS_constellation::get_transmit_data() {$/;"	f	class:GPS_constellation
initialize	dm/src/GPS_constellation.cpp	/^void GPS_constellation::initialize() {$/;"	f	class:GPS_constellation
ionosphericDelay	dm/src/GPS_constellation.cpp	/^double GPS_constellation::ionosphericDelay(const ionoutc_t *ionoutc, time_util::GPS_TIME g, arma::vec3 llh, arma::vec2 azel) {$/;"	f	class:GPS_constellation
llh2xyz	dm/src/GPS_constellation.cpp	/^arma::vec3 GPS_constellation::llh2xyz(const arma::vec3 llh) {$/;"	f	class:GPS_constellation
ltcmat	dm/src/GPS_constellation.cpp	/^arma::mat33 GPS_constellation::ltcmat(const arma::vec3 llh) {$/;"	f	class:GPS_constellation
ned2azel	dm/src/GPS_constellation.cpp	/^void GPS_constellation::ned2azel(arma::vec2 &azel, const arma::vec3 neu) {$/;"	f	class:GPS_constellation
operator =	dm/src/GPS_constellation.cpp	/^GPS_constellation& GPS_constellation::operator= (const GPS_constellation& other) {$/;"	f	class:GPS_constellation
packet	dm/src/GPS_constellation.cpp	/^void GPS_constellation::packet() {$/;"	f	class:GPS_constellation
readRinexNavAll	dm/src/GPS_constellation.cpp	/^int GPS_constellation::readRinexNavAll(ephem_t eph[][MAX_SAT], ionoutc_t *ionoutc, const char *fname) {$/;"	f	class:GPS_constellation
readfile	dm/src/GPS_constellation.cpp	/^void GPS_constellation::readfile(const char *fname) {$/;"	f	class:GPS_constellation
replaceExpDesignator	dm/src/GPS_constellation.cpp	/^int GPS_constellation::replaceExpDesignator(char *str, int len) {$/;"	f	class:GPS_constellation
satpos	dm/src/GPS_constellation.cpp	/^void GPS_constellation::satpos(ephem_t eph, time_util::GPS_TIME g, arma::vec3 &pos, arma::vec3 &vel, arma::vec2 &clk) {$/;"	f	class:GPS_constellation
show	dm/src/GPS_constellation.cpp	/^void GPS_constellation::show() {$/;"	f	class:GPS_constellation
subGpsTime	dm/src/GPS_constellation.cpp	/^double GPS_constellation::subGpsTime(time_util::GPS_TIME g1, time_util::GPS_TIME g0) {$/;"	f	class:GPS_constellation
xyz2llh	dm/src/GPS_constellation.cpp	/^void GPS_constellation::xyz2llh(const arma::vec3 xyz, arma::vec3 &llh) {$/;"	f	class:GPS_constellation
GPS_Receiver	dm/src/GPS_receiver.cpp	/^GPS_Receiver::GPS_Receiver(Newton &ntn, _Euler_ &elr)$/;"	f	class:GPS_Receiver
GPS_Receiver	dm/src/GPS_receiver.cpp	/^GPS_Receiver::GPS_Receiver(const GPS_Receiver& other)$/;"	f	class:GPS_Receiver
default_data	dm/src/GPS_receiver.cpp	/^void GPS_Receiver::default_data() {$/;"	f	class:GPS_Receiver
filter_extrapolation	dm/src/GPS_receiver.cpp	/^void GPS_Receiver::filter_extrapolation(double int_step) {$/;"	f	class:GPS_Receiver
get_CXH	dm/src/GPS_receiver.cpp	/^arma::vec3 GPS_Receiver::get_CXH() { return CXH; }$/;"	f	class:GPS_Receiver
get_SXH	dm/src/GPS_receiver.cpp	/^arma::vec3 GPS_Receiver::get_SXH() { return SXH; }$/;"	f	class:GPS_Receiver
get_VXH	dm/src/GPS_receiver.cpp	/^arma::vec3 GPS_Receiver::get_VXH() { return VXH; }$/;"	f	class:GPS_Receiver
get_quadriga	dm/src/GPS_receiver.cpp	/^void GPS_Receiver::get_quadriga() {$/;"	f	class:GPS_Receiver
initialize	dm/src/GPS_receiver.cpp	/^void GPS_Receiver::initialize(GPS_Satellites *sats, double int_step) {$/;"	f	class:GPS_Receiver
measure	dm/src/GPS_receiver.cpp	/^void GPS_Receiver::measure() {$/;"	f	class:GPS_Receiver
operator =	dm/src/GPS_receiver.cpp	/^GPS_Receiver& GPS_Receiver::operator=(const GPS_Receiver& other) {$/;"	f	class:GPS_Receiver
setup_error_covariance_matrix	dm/src/GPS_receiver.cpp	/^void GPS_Receiver::setup_error_covariance_matrix(double factq, double qclockb, double qclockf) {$/;"	f	class:GPS_Receiver
setup_fundamental_dynamic_matrix	dm/src/GPS_receiver.cpp	/^void GPS_Receiver::setup_fundamental_dynamic_matrix(double uctime_cor) {$/;"	f	class:GPS_Receiver
setup_state_covariance_matrix	dm/src/GPS_receiver.cpp	/^void GPS_Receiver::setup_state_covariance_matrix(double factp, double pclockb, double pclockf) {$/;"	f	class:GPS_Receiver
update_markov	dm/src/GPS_receiver.cpp	/^void GPS_Receiver::update_markov(double int_step) {$/;"	f	class:GPS_Receiver
Kinematics	dm/src/Kinematics.cpp	/^Kinematics::Kinematics(Newton &newt, Environment &env, _Euler_ &eul)$/;"	f	class:Kinematics
Kinematics	dm/src/Kinematics.cpp	/^Kinematics::Kinematics(const Kinematics& other)$/;"	f	class:Kinematics
calculate_TBD	dm/src/Kinematics.cpp	/^arma::mat Kinematics::calculate_TBD(double lonx, double latx, double alt) {$/;"	f	class:Kinematics
calculate_alphaix	dm/src/Kinematics.cpp	/^double Kinematics::calculate_alphaix(arma::vec3 VBIB) {$/;"	f	class:Kinematics
calculate_alphax	dm/src/Kinematics.cpp	/^double Kinematics::calculate_alphax(arma::vec3 VBAB) {$/;"	f	class:Kinematics
calculate_alppx	dm/src/Kinematics.cpp	/^double Kinematics::calculate_alppx(arma::vec3 VBAB, double dvba) {$/;"	f	class:Kinematics
calculate_betaix	dm/src/Kinematics.cpp	/^double Kinematics::calculate_betaix(arma::vec3 VBIB) {$/;"	f	class:Kinematics
calculate_betax	dm/src/Kinematics.cpp	/^double Kinematics::calculate_betax(arma::vec3 VBAB, double dvba) {$/;"	f	class:Kinematics
calculate_phipx	dm/src/Kinematics.cpp	/^double Kinematics::calculate_phipx(arma::vec3 VBAB) {$/;"	f	class:Kinematics
default_data	dm/src/Kinematics.cpp	/^void Kinematics::default_data() {$/;"	f	class:Kinematics
get_TBD	dm/src/Kinematics.cpp	/^arma::mat Kinematics::get_TBD() { return TBD; }$/;"	f	class:Kinematics
get_TBI	dm/src/Kinematics.cpp	/^arma::mat Kinematics::get_TBI() { return TBI; }$/;"	f	class:Kinematics
get_alphax	dm/src/Kinematics.cpp	/^double Kinematics::get_alphax() { return alphax; }$/;"	f	class:Kinematics
get_alppx	dm/src/Kinematics.cpp	/^double Kinematics::get_alppx() { return alppx; }$/;"	f	class:Kinematics
get_betax	dm/src/Kinematics.cpp	/^double Kinematics::get_betax() { return betax; }$/;"	f	class:Kinematics
get_phibdx	dm/src/Kinematics.cpp	/^double Kinematics::get_phibdx() {$/;"	f	class:Kinematics
get_phipx	dm/src/Kinematics.cpp	/^double Kinematics::get_phipx() { return phipx; }$/;"	f	class:Kinematics
get_psibdx	dm/src/Kinematics.cpp	/^double Kinematics::get_psibdx() {$/;"	f	class:Kinematics
get_thtbdx	dm/src/Kinematics.cpp	/^double Kinematics::get_thtbdx() {$/;"	f	class:Kinematics
get_thtbdx_in	dm/src/Kinematics.cpp	/^double Kinematics::get_thtbdx_in(double &cthtbd) {$/;"	f	class:Kinematics
initialize	dm/src/Kinematics.cpp	/^void Kinematics::initialize() {$/;"	f	class:Kinematics
load_angle	dm/src/Kinematics.cpp	/^void Kinematics::load_angle(double yaw, double roll, double pitch) {$/;"	f	class:Kinematics
operator =	dm/src/Kinematics.cpp	/^Kinematics& Kinematics::operator=(const Kinematics& other) {$/;"	f	class:Kinematics
propagate	dm/src/Kinematics.cpp	/^void Kinematics::propagate(double int_step) {$/;"	f	class:Kinematics
propagate_TBI	dm/src/Kinematics.cpp	/^void Kinematics::propagate_TBI(double int_step, arma::vec3 WBIB) {$/;"	f	class:Kinematics
propagate_TBI_Q	dm/src/Kinematics.cpp	/^void Kinematics::propagate_TBI_Q(double int_step, arma::vec3 WBIB) {$/;"	f	class:Kinematics
update_diagnostic_attributes	dm/src/Kinematics.cpp	/^void Kinematics::update_diagnostic_attributes(double int_step) {$/;"	f	class:Kinematics
Newton	dm/src/Newton.cpp	/^Newton::Newton(Kinematics &kine, _Euler_ &elr, Environment &env, Propulsion &prop, Forces &forc)$/;"	f	class:Newton
Newton	dm/src/Newton.cpp	/^Newton::Newton(const Newton& other)$/;"	f	class:Newton
build_VBEB	dm/src/Newton.cpp	/^arma::vec Newton::build_VBEB(double _alpha0x, double _beta0x, double _dvbe) {$/;"	f	class:Newton
build_WEII	dm/src/Newton.cpp	/^arma::mat Newton::build_WEII() {$/;"	f	class:Newton
calculate_fspb	dm/src/Newton.cpp	/^arma::vec3 Newton::calculate_fspb(arma::vec3 FAPB, double vmass) {$/;"	f	class:Newton
default_data	dm/src/Newton.cpp	/^void Newton::default_data() {$/;"	f	class:Newton
get_CONING	dm/src/Newton.cpp	/^arma::vec3 Newton::get_CONING() { return CONING;}$/;"	f	class:Newton
get_FSPB	dm/src/Newton.cpp	/^arma::vec3 Newton::get_FSPB() { return FSPB; }$/;"	f	class:Newton
get_SBEE	dm/src/Newton.cpp	/^arma::vec3 Newton::get_SBEE() { return SBEE; }$/;"	f	class:Newton
get_SBII	dm/src/Newton.cpp	/^arma::vec3 Newton::get_SBII() { return SBII; }$/;"	f	class:Newton
get_TDE	dm/src/Newton.cpp	/^arma::mat Newton::get_TDE() { return TDE; }$/;"	f	class:Newton
get_TGI	dm/src/Newton.cpp	/^arma::mat Newton::get_TGI() { return TGI; }$/;"	f	class:Newton
get_VBED	dm/src/Newton.cpp	/^arma::vec3 Newton::get_VBED() { return TDI * (VBII - WEII * SBII); }$/;"	f	class:Newton
get_VBEE	dm/src/Newton.cpp	/^arma::vec3 Newton::get_VBEE() { return VBEE; }$/;"	f	class:Newton
get_VBII	dm/src/Newton.cpp	/^arma::vec3 Newton::get_VBII() { return VBII; }$/;"	f	class:Newton
get_alt	dm/src/Newton.cpp	/^double Newton::get_alt() { return alt; }$/;"	f	class:Newton
get_dbi	dm/src/Newton.cpp	/^double Newton::get_dbi() { return norm(SBII); }$/;"	f	class:Newton
get_dvbe	dm/src/Newton.cpp	/^double Newton::get_dvbe() { return pol_from_cart(get_VBED())(0); }$/;"	f	class:Newton
get_dvbi	dm/src/Newton.cpp	/^double Newton::get_dvbi() { return norm(VBII); }$/;"	f	class:Newton
get_latx	dm/src/Newton.cpp	/^double Newton::get_latx() { return latx; }$/;"	f	class:Newton
get_liftoff	dm/src/Newton.cpp	/^unsigned int Newton::get_liftoff() { return liftoff; }$/;"	f	class:Newton
get_lonx	dm/src/Newton.cpp	/^double Newton::get_lonx() { return lonx; }$/;"	f	class:Newton
get_psivdx	dm/src/Newton.cpp	/^double Newton::get_psivdx() { return DEG * pol_from_cart(get_VBED())(1); }$/;"	f	class:Newton
get_thtvdx	dm/src/Newton.cpp	/^double Newton::get_thtvdx() { return DEG * pol_from_cart(get_VBED())(2); }$/;"	f	class:Newton
initialize	dm/src/Newton.cpp	/^void Newton::initialize() {$/;"	f	class:Newton
load_coning_var	dm/src/Newton.cpp	/^void Newton::load_coning_var(double ang, double w) {$/;"	f	class:Newton
load_geodetic_velocity	dm/src/Newton.cpp	/^void Newton::load_geodetic_velocity(double alpha0x, double beta0x, double dvbe) {$/;"	f	class:Newton
load_location	dm/src/Newton.cpp	/^void Newton::load_location(double lonx, double latx, double alt) {$/;"	f	class:Newton
operator =	dm/src/Newton.cpp	/^Newton& Newton::operator=(const Newton& other) {$/;"	f	class:Newton
orbital	dm/src/Newton.cpp	/^void Newton::orbital(arma::vec3 SBII, arma::vec3 VBII, double dbi) {$/;"	f	class:Newton
propagate	dm/src/Newton.cpp	/^void Newton::propagate(double int_step) {$/;"	f	class:Newton
propagate_aeroloss	dm/src/Newton.cpp	/^void Newton::propagate_aeroloss(double int_step) {$/;"	f	class:Newton
propagate_gravityloss	dm/src/Newton.cpp	/^void Newton::propagate_gravityloss(double int_step) {$/;"	f	class:Newton
propagate_position_speed_acceleration	dm/src/Newton.cpp	/^void Newton::propagate_position_speed_acceleration(double int_step) {$/;"	f	class:Newton
update_diagnostic_attributes	dm/src/Newton.cpp	/^void Newton::update_diagnostic_attributes(double int_step) {$/;"	f	class:Newton
vibration	dm/src/Newton.cpp	/^void Newton::vibration(double int_step) {$/;"	f	class:Newton
Propulsion	dm/src/Propulsion.cpp	/^Propulsion::Propulsion(Environment& env)$/;"	f	class:Propulsion
Propulsion	dm/src/Propulsion.cpp	/^Propulsion::Propulsion(const Propulsion& other)$/;"	f	class:Propulsion
calculate_IBBB	dm/src/Propulsion.cpp	/^arma::mat33 Propulsion::calculate_IBBB() {$/;"	f	class:Propulsion
calculate_fmassr	dm/src/Propulsion.cpp	/^double Propulsion::calculate_fmassr() {$/;"	f	class:Propulsion
calculate_thrust	dm/src/Propulsion.cpp	/^double Propulsion::calculate_thrust(double press, double psl) {$/;"	f	class:Propulsion
calculate_xcg	dm/src/Propulsion.cpp	/^double Propulsion::calculate_xcg() {$/;"	f	class:Propulsion
default_data	dm/src/Propulsion.cpp	/^void Propulsion::default_data() {$/;"	f	class:Propulsion
get_IBBB	dm/src/Propulsion.cpp	/^arma::mat33 Propulsion::get_IBBB() { return IBBB; }$/;"	f	class:Propulsion
get_IBBB0	dm/src/Propulsion.cpp	/^arma::mat33 Propulsion::get_IBBB0() {$/;"	f	class:Propulsion
get_IBBB1	dm/src/Propulsion.cpp	/^arma::mat33 Propulsion::get_IBBB1() {$/;"	f	class:Propulsion
get_fmassr	dm/src/Propulsion.cpp	/^double Propulsion::get_fmassr() { return fmassr; }$/;"	f	class:Propulsion
get_input_file_var	dm/src/Propulsion.cpp	/^void Propulsion::get_input_file_var(double xcg0, double xcg1,$/;"	f	class:Propulsion
get_mprop	dm/src/Propulsion.cpp	/^int Propulsion::get_mprop() { return static_cast<int>(this->thrust_state); \/*XXX work around*\/ }$/;"	f	class:Propulsion
get_thrust	dm/src/Propulsion.cpp	/^double Propulsion::get_thrust() { return thrust; }$/;"	f	class:Propulsion
get_thrust_state	dm/src/Propulsion.cpp	/^enum Propulsion::THRUST_TYPE Propulsion::get_thrust_state() { return this->thrust_state; }$/;"	f	class:Propulsion
get_vmass	dm/src/Propulsion.cpp	/^double Propulsion::get_vmass() { return vmass; }$/;"	f	class:Propulsion
get_xcg	dm/src/Propulsion.cpp	/^double Propulsion::get_xcg() { return xcg; }$/;"	f	class:Propulsion
initialize	dm/src/Propulsion.cpp	/^void Propulsion::initialize() {$/;"	f	class:Propulsion
operator =	dm/src/Propulsion.cpp	/^Propulsion& Propulsion::operator=(const Propulsion& other) {$/;"	f	class:Propulsion
propagate	dm/src/Propulsion.cpp	/^void Propulsion::propagate(double int_step) {$/;"	f	class:Propulsion
propagate_fmasse	dm/src/Propulsion.cpp	/^void Propulsion::propagate_fmasse(double int_step, double press, double psl) {$/;"	f	class:Propulsion
propagate_thrust_delta_v	dm/src/Propulsion.cpp	/^void Propulsion::propagate_thrust_delta_v(double int_step) {$/;"	f	class:Propulsion
set_aexit	dm/src/Propulsion.cpp	/^void Propulsion::set_aexit(double in) { aexit = in; }$/;"	f	class:Propulsion
set_fmass0	dm/src/Propulsion.cpp	/^void Propulsion::set_fmass0(double in) { fmass0 = in; }$/;"	f	class:Propulsion
set_input_thrust	dm/src/Propulsion.cpp	/^void Propulsion::set_input_thrust(double xcg0, double xcg1,$/;"	f	class:Propulsion
set_ltg_thrust	dm/src/Propulsion.cpp	/^void Propulsion::set_ltg_thrust() {$/;"	f	class:Propulsion
set_no_thrust	dm/src/Propulsion.cpp	/^void Propulsion::set_no_thrust() {$/;"	f	class:Propulsion
set_payload	dm/src/Propulsion.cpp	/^void Propulsion::set_payload(double in) { payload = in; }$/;"	f	class:Propulsion
set_vmass0	dm/src/Propulsion.cpp	/^void Propulsion::set_vmass0(double in) { vmass0 = in; }$/;"	f	class:Propulsion
RCS	dm/src/Rcs.cpp	/^RCS::RCS(Propulsion &plp)$/;"	f	class:RCS
RCS	dm/src/Rcs.cpp	/^RCS::RCS(const RCS& other)$/;"	f	class:RCS
default_data	dm/src/Rcs.cpp	/^void RCS::default_data() {$/;"	f	class:RCS
get_FARCS	dm/src/Rcs.cpp	/^arma::vec3 RCS::get_FARCS() { return FARCS; }$/;"	f	class:RCS
get_FMRCS	dm/src/Rcs.cpp	/^arma::vec3 RCS::get_FMRCS() { return FMRCS; }$/;"	f	class:RCS
initialize	dm/src/Rcs.cpp	/^void RCS::initialize() {$/;"	f	class:RCS
operator =	dm/src/Rcs.cpp	/^RCS& RCS::operator=(const RCS& other) {$/;"	f	class:RCS
rcs_schmitt_thrust	dm/src/Rcs.cpp	/^void RCS::rcs_schmitt_thrust() {$/;"	f	class:RCS
set_pitch_mom_max	dm/src/Rcs.cpp	/^void RCS::set_pitch_mom_max(double in) { pitch_mom_max = in; }$/;"	f	class:RCS
set_rcs_pos	dm/src/Rcs.cpp	/^void RCS::set_rcs_pos(double in) { rcs_pos = in; }$/;"	f	class:RCS
set_rcs_thrust	dm/src/Rcs.cpp	/^void RCS::set_rcs_thrust(double in) { rcs_thrust = in; }$/;"	f	class:RCS
set_rocket_r	dm/src/Rcs.cpp	/^void RCS::set_rocket_r(double in) { rocket_r = in; }$/;"	f	class:RCS
set_roll_mom_max	dm/src/Rcs.cpp	/^void RCS::set_roll_mom_max(double in) { roll_mom_max = in; }$/;"	f	class:RCS
set_yaw_mom_max	dm/src/Rcs.cpp	/^void RCS::set_yaw_mom_max(double in) { yaw_mom_max = in; }$/;"	f	class:RCS
setup_rcs_schmitt_trigger	dm/src/Rcs.cpp	/^void RCS::setup_rcs_schmitt_trigger(double dead_zone, double hysteresis) {$/;"	f	class:RCS
S2_actuator_1	dm/src/Tvc.cpp	/^void TVC::S2_actuator_1(double command, double int_step){$/;"	f	class:TVC
S2_actuator_2	dm/src/Tvc.cpp	/^void TVC::S2_actuator_2(double command, double int_step){$/;"	f	class:TVC
S2_actuator_3	dm/src/Tvc.cpp	/^void TVC::S2_actuator_3(double command, double int_step){$/;"	f	class:TVC
S2_actuator_4	dm/src/Tvc.cpp	/^void TVC::S2_actuator_4(double command, double int_step){$/;"	f	class:TVC
TVC	dm/src/Tvc.cpp	/^TVC::TVC(Environment &env, Kinematics &kins, Propulsion &plp)$/;"	f	class:TVC
TVC	dm/src/Tvc.cpp	/^TVC::TVC(const TVC& other)$/;"	f	class:TVC
actuate	dm/src/Tvc.cpp	/^void TVC::actuate(double int_step) {$/;"	f	class:TVC
calculate_FMPB	dm/src/Tvc.cpp	/^arma::vec3 TVC::calculate_FMPB(double xcg) {$/;"	f	class:TVC
calculate_FPB	dm/src/Tvc.cpp	/^arma::vec3 TVC::calculate_FPB(double eta, double zet, double thrust) {$/;"	f	class:TVC
calculate_S2_FMPB	dm/src/Tvc.cpp	/^arma::vec3 TVC::calculate_S2_FMPB (double theta_a, double theta_b, double theta_c, double theta_d, double thrust, double xcg) {$/;"	f	class:TVC
calculate_S2_FPB	dm/src/Tvc.cpp	/^arma::vec3 TVC::calculate_S2_FPB(double theta_a, double theta_b, double theta_c, double theta_d, double thrust) {$/;"	f	class:TVC
default_data	dm/src/Tvc.cpp	/^void TVC::default_data() {$/;"	f	class:TVC
get_FMPB	dm/src/Tvc.cpp	/^arma::vec3 TVC::get_FMPB() { return FMPB; }$/;"	f	class:TVC
get_FPB	dm/src/Tvc.cpp	/^arma::vec3 TVC::get_FPB() { return FPB; }$/;"	f	class:TVC
get_gtvc	dm/src/Tvc.cpp	/^double TVC::get_gtvc() { return gtvc;  }$/;"	f	class:TVC
get_mtvc	dm/src/Tvc.cpp	/^enum TVC::TVC_TYPE TVC::get_mtvc() { return mtvc; }$/;"	f	class:TVC
get_parm	dm/src/Tvc.cpp	/^double TVC::get_parm() { return parm; }$/;"	f	class:TVC
initialize	dm/src/Tvc.cpp	/^void TVC::initialize() {$/;"	f	class:TVC
operator =	dm/src/Tvc.cpp	/^TVC& TVC::operator=(const TVC& other) {$/;"	f	class:TVC
set_S2_TVC	dm/src/Tvc.cpp	/^void TVC::set_S2_TVC() {$/;"	f	class:TVC
set_dtvclimx	dm/src/Tvc.cpp	/^void TVC::set_dtvclimx(double in) { dtvclimx = in; }$/;"	f	class:TVC
set_factgtvc	dm/src/Tvc.cpp	/^void TVC::set_factgtvc(double in) { factgtvc = in; }$/;"	f	class:TVC
set_gtvc	dm/src/Tvc.cpp	/^void TVC::set_gtvc(double in) { gtvc = in; }$/;"	f	class:TVC
set_mtvc	dm/src/Tvc.cpp	/^void TVC::set_mtvc(enum TVC_TYPE in) { mtvc = in; }$/;"	f	class:TVC
set_parm	dm/src/Tvc.cpp	/^void TVC::set_parm(double in) { parm = in; }$/;"	f	class:TVC
set_s2_ratelim	dm/src/Tvc.cpp	/^void TVC::set_s2_ratelim(double in){ this->s2_ratelim = in; }$/;"	f	class:TVC
set_s2_tau1	dm/src/Tvc.cpp	/^void TVC::set_s2_tau1(double in){ this->s2_tau1 = in; }$/;"	f	class:TVC
set_s2_tau2	dm/src/Tvc.cpp	/^void TVC::set_s2_tau2(double in){ this->s2_tau2 = in; }$/;"	f	class:TVC
set_s2_tau3	dm/src/Tvc.cpp	/^void TVC::set_s2_tau3(double in){ this->s2_tau3 = in; }$/;"	f	class:TVC
set_s2_tau4	dm/src/Tvc.cpp	/^void TVC::set_s2_tau4(double in){ this->s2_tau4 = in; }$/;"	f	class:TVC
set_s2_tvclim	dm/src/Tvc.cpp	/^void TVC::set_s2_tvclim(double in){ this->s2_tvclim = in; }/;"	f	class:TVC
set_tvclimx	dm/src/Tvc.cpp	/^void TVC::set_tvclimx(double in) { tvclimx = in; }$/;"	f	class:TVC
set_wntvc	dm/src/Tvc.cpp	/^void TVC::set_wntvc(double in) { wntvc = in; }$/;"	f	class:TVC
set_zettvc	dm/src/Tvc.cpp	/^void TVC::set_zettvc(double in) { zettvc = in; }$/;"	f	class:TVC
tvc_scnd	dm/src/Tvc.cpp	/^std::tuple<double, double> TVC::tvc_scnd(double etac, double zetc, double int_step) {$/;"	f	class:TVC
AL_STATUS	driver/include/EasyCAT.h	52;"	d
BUFF_SIZE	driver/include/EasyCAT.h	110;"	d
BYTE_TEST	driver/include/EasyCAT.h	59;"	d
Byte	driver/include/EasyCAT.h	/^    uint8_t Byte[2];$/;"	m	union:__anon9
Byte	driver/include/EasyCAT.h	/^    uint8_t Byte[32];$/;"	m	union:__anon11
Byte	driver/include/EasyCAT.h	/^    uint8_t Byte[4];$/;"	m	union:__anon10
COMM_SPI_READ	driver/include/EasyCAT.h	99;"	d
COMM_SPI_WRITE	driver/include/EasyCAT.h	100;"	d
DIGITAL_RST	driver/include/EasyCAT.h	73;"	d
DUMMY_BYTE	driver/include/EasyCAT.h	102;"	d
ECAT_CSR_BUSY	driver/include/EasyCAT.h	67;"	d
ECAT_CSR_CMD	driver/include/EasyCAT.h	35;"	d
ECAT_CSR_DATA	driver/include/EasyCAT.h	34;"	d
ECAT_PRAM_RD_ADDR_LEN	driver/include/EasyCAT.h	40;"	d
ECAT_PRAM_RD_CMD	driver/include/EasyCAT.h	42;"	d
ECAT_PRAM_RD_DATA	driver/include/EasyCAT.h	47;"	d
ECAT_PRAM_WR_ADDR_LEN	driver/include/EasyCAT.h	43;"	d
ECAT_PRAM_WR_CMD	driver/include/EasyCAT.h	45;"	d
ECAT_PRAM_WR_DATA	driver/include/EasyCAT.h	48;"	d
ECAT_SPI_CLK	driver/include/EasyCAT.h	105;"	d
ECAT_SPI_CLK	driver/include/EasyCAT.h	107;"	d
ESC_READ	driver/include/EasyCAT.h	93;"	d
ESC_WRITE	driver/include/EasyCAT.h	92;"	d
ESM_BOOT	driver/include/EasyCAT.h	84;"	d
ESM_INIT	driver/include/EasyCAT.h	82;"	d
ESM_OP	driver/include/EasyCAT.h	86;"	d
ESM_PREOP	driver/include/EasyCAT.h	83;"	d
ESM_SAFEOP	driver/include/EasyCAT.h	85;"	d
ETHERCAT_RST	driver/include/EasyCAT.h	74;"	d
HW_CFG	driver/include/EasyCAT.h	58;"	d
ID_REV	driver/include/EasyCAT.h	61;"	d
Long	driver/include/EasyCAT.h	/^    uint32_t Long;$/;"	m	union:__anon10
Long	driver/include/EasyCAT.h	/^    uint32_t Long[8];$/;"	m	union:__anon11
MODELS_DRIVER_INCLUDE_EASYCAT_H_	driver/include/EasyCAT.h	2;"	d
PRAM_READ_AVAIL	driver/include/EasyCAT.h	69;"	d
PRAM_READ_BUSY	driver/include/EasyCAT.h	68;"	d
PRAM_WRITE_AVAIL	driver/include/EasyCAT.h	70;"	d
PROCBUFFER	driver/include/EasyCAT.h	/^} PROCBUFFER;$/;"	t	typeref:union:__anon11
READY	driver/include/EasyCAT.h	71;"	d
RESET_CTL	driver/include/EasyCAT.h	60;"	d
SCS_High_macro	driver/include/EasyCAT.h	117;"	d
SCS_Low_macro	driver/include/EasyCAT.h	114;"	d
SPI_fast_SS	driver/include/EasyCAT.h	23;"	d
SPI_fast_transfer	driver/include/EasyCAT.h	22;"	d
ULONG	driver/include/EasyCAT.h	/^} ULONG;$/;"	t	typeref:union:__anon10
UWORD	driver/include/EasyCAT.h	/^} UWORD;$/;"	t	typeref:union:__anon9
WDOG_STATUS	driver/include/EasyCAT.h	53;"	d
Word	driver/include/EasyCAT.h	/^    uint16_t Word;$/;"	m	union:__anon9
Word	driver/include/EasyCAT.h	/^    uint16_t Word[2];$/;"	m	union:__anon10
MODELS_DRIVER_INCLUDE_CONSOLE_H_	driver/include/console.h	2;"	d
console_init	driver/include/console.h	6;"	d
dbg_printf	driver/include/console.h	7;"	d
AL_STATUS	driver/include/driver/EasyCAT.h	52;"	d
BYTE_TEST	driver/include/driver/EasyCAT.h	59;"	d
Byte	driver/include/driver/EasyCAT.h	/^    uint8_t Byte[2];$/;"	m	union:__anon3
Byte	driver/include/driver/EasyCAT.h	/^    uint8_t Byte[32];$/;"	m	union:__anon5
Byte	driver/include/driver/EasyCAT.h	/^    uint8_t Byte[4];$/;"	m	union:__anon4
COMM_SPI_READ	driver/include/driver/EasyCAT.h	99;"	d
COMM_SPI_WRITE	driver/include/driver/EasyCAT.h	100;"	d
DIGITAL_RST	driver/include/driver/EasyCAT.h	73;"	d
DUMMY_BYTE	driver/include/driver/EasyCAT.h	102;"	d
ECAT_CSR_BUSY	driver/include/driver/EasyCAT.h	67;"	d
ECAT_CSR_CMD	driver/include/driver/EasyCAT.h	35;"	d
ECAT_CSR_DATA	driver/include/driver/EasyCAT.h	34;"	d
ECAT_PRAM_RD_ADDR_LEN	driver/include/driver/EasyCAT.h	40;"	d
ECAT_PRAM_RD_CMD	driver/include/driver/EasyCAT.h	42;"	d
ECAT_PRAM_RD_DATA	driver/include/driver/EasyCAT.h	47;"	d
ECAT_PRAM_WR_ADDR_LEN	driver/include/driver/EasyCAT.h	43;"	d
ECAT_PRAM_WR_CMD	driver/include/driver/EasyCAT.h	45;"	d
ECAT_PRAM_WR_DATA	driver/include/driver/EasyCAT.h	48;"	d
ECAT_SPI_CLK	driver/include/driver/EasyCAT.h	105;"	d
ECAT_SPI_CLK	driver/include/driver/EasyCAT.h	107;"	d
ESC_READ	driver/include/driver/EasyCAT.h	93;"	d
ESC_WRITE	driver/include/driver/EasyCAT.h	92;"	d
ESM_BOOT	driver/include/driver/EasyCAT.h	84;"	d
ESM_INIT	driver/include/driver/EasyCAT.h	82;"	d
ESM_OP	driver/include/driver/EasyCAT.h	86;"	d
ESM_PREOP	driver/include/driver/EasyCAT.h	83;"	d
ESM_SAFEOP	driver/include/driver/EasyCAT.h	85;"	d
ETHERCAT_RST	driver/include/driver/EasyCAT.h	74;"	d
HW_CFG	driver/include/driver/EasyCAT.h	58;"	d
ID_REV	driver/include/driver/EasyCAT.h	61;"	d
Long	driver/include/driver/EasyCAT.h	/^    uint32_t Long;$/;"	m	union:__anon4
Long	driver/include/driver/EasyCAT.h	/^    uint32_t Long[8];$/;"	m	union:__anon5
MODELS_DRIVER_INCLUDE_DRIVER_EASYCAT_H_	driver/include/driver/EasyCAT.h	2;"	d
PRAM_READ_AVAIL	driver/include/driver/EasyCAT.h	69;"	d
PRAM_READ_BUSY	driver/include/driver/EasyCAT.h	68;"	d
PRAM_WRITE_AVAIL	driver/include/driver/EasyCAT.h	70;"	d
PROCBUFFER	driver/include/driver/EasyCAT.h	/^} PROCBUFFER;$/;"	t	typeref:union:__anon5
READY	driver/include/driver/EasyCAT.h	71;"	d
RESET_CTL	driver/include/driver/EasyCAT.h	60;"	d
SCS_High_macro	driver/include/driver/EasyCAT.h	115;"	d
SCS_Low_macro	driver/include/driver/EasyCAT.h	112;"	d
SPI_fast_SS	driver/include/driver/EasyCAT.h	23;"	d
SPI_fast_transfer	driver/include/driver/EasyCAT.h	22;"	d
ULONG	driver/include/driver/EasyCAT.h	/^} ULONG;$/;"	t	typeref:union:__anon4
UWORD	driver/include/driver/EasyCAT.h	/^} UWORD;$/;"	t	typeref:union:__anon3
WDOG_STATUS	driver/include/driver/EasyCAT.h	53;"	d
Word	driver/include/driver/EasyCAT.h	/^    uint16_t Word;$/;"	m	union:__anon3
Word	driver/include/driver/EasyCAT.h	/^    uint16_t Word[2];$/;"	m	union:__anon4
MODELS_DRIVER_INCLUDE_DRIVER_CONSOLE_H_	driver/include/driver/console.h	2;"	d
console_init	driver/include/driver/console.h	6;"	d
dbg_printf	driver/include/driver/console.h	7;"	d
MODELS_DRIVER_INCLUDE_DRIVER_RPI_GPIO_H_	driver/include/driver/rpi/gpio.h	2;"	d
MODELS_DRIVER_INCLUDE_DRIVER_RPI_SPI_H_	driver/include/driver/rpi/spi.h	2;"	d
SPI_BIT_LSBFIRST	driver/include/driver/rpi/spi.h	/^    SPI_BIT_LSBFIRST = 0,$/;"	e	enum:__anon7
SPI_BIT_MSBFIRST	driver/include/driver/rpi/spi.h	/^    SPI_BIT_MSBFIRST,$/;"	e	enum:__anon7
SPI_CS0	driver/include/driver/rpi/spi.h	/^    SPI_CS0 = 0,$/;"	e	enum:__anon6
SPI_CS1	driver/include/driver/rpi/spi.h	/^    SPI_CS1,$/;"	e	enum:__anon6
SPI_MODE0	driver/include/driver/rpi/spi.h	/^    SPI_MODE0 = 0,$/;"	e	enum:__anon8
SPI_MODE1	driver/include/driver/rpi/spi.h	/^    SPI_MODE1 = 1,$/;"	e	enum:__anon8
SPI_MODE2	driver/include/driver/rpi/spi.h	/^    SPI_MODE2 = 2,$/;"	e	enum:__anon8
SPI_MODE3	driver/include/driver/rpi/spi.h	/^    SPI_MODE3 = 3,$/;"	e	enum:__anon8
ECAT_SPI_DEV	driver/include/driver/rpi/spi_dev.h	4;"	d
IMU_SPI_DEV	driver/include/driver/rpi/spi_dev.h	5;"	d
MODELS_DRIVER_INCLUDE_DRIVER_RPI_SPI_DEV_H_	driver/include/driver/rpi/spi_dev.h	2;"	d
MODELS_DRIVER_INCLUDE_RPI_GPIO_H_	driver/include/rpi/gpio.h	2;"	d
MODELS_DRIVER_INCLUDE_RPI_SPI_H_	driver/include/rpi/spi.h	2;"	d
SPI_BIT_LSBFIRST	driver/include/rpi/spi.h	/^    SPI_BIT_LSBFIRST = 0,$/;"	e	enum:__anon13
SPI_BIT_MSBFIRST	driver/include/rpi/spi.h	/^    SPI_BIT_MSBFIRST,$/;"	e	enum:__anon13
SPI_CS0	driver/include/rpi/spi.h	/^    SPI_CS0 = 0,$/;"	e	enum:__anon12
SPI_CS1	driver/include/rpi/spi.h	/^    SPI_CS1,$/;"	e	enum:__anon12
SPI_MODE0	driver/include/rpi/spi.h	/^    SPI_MODE0 = 0,$/;"	e	enum:__anon14
SPI_MODE1	driver/include/rpi/spi.h	/^    SPI_MODE1 = 1,$/;"	e	enum:__anon14
SPI_MODE2	driver/include/rpi/spi.h	/^    SPI_MODE2 = 2,$/;"	e	enum:__anon14
SPI_MODE3	driver/include/rpi/spi.h	/^    SPI_MODE3 = 3,$/;"	e	enum:__anon14
ECAT_SPI_DEV	driver/include/rpi/spi_dev.h	4;"	d
IMU_SPI_DEV	driver/include/rpi/spi_dev.h	5;"	d
MODELS_DRIVER_INCLUDE_RPI_SPI_DEV_H_	driver/include/rpi/spi_dev.h	2;"	d
Init	driver/src/EasyCAT.c	/^int Init(void) {$/;"	f
MAX_RETRY	driver/src/EasyCAT.c	36;"	d	file:
MainTask	driver/src/EasyCAT.c	/^void MainTask(void *MasterToSlave,$/;"	f
SPIReadProcRamFifo	driver/src/EasyCAT.c	/^void SPIReadProcRamFifo(char *data,$/;"	f
SPIReadRegisterDirect	driver/src/EasyCAT.c	/^uint32_t SPIReadRegisterDirect(uint16_t Address, uint8_t Len) {$/;"	f
SPIReadRegisterIndirect	driver/src/EasyCAT.c	/^uint32_t SPIReadRegisterIndirect(uint16_t Address, uint8_t Len) {$/;"	f
SPIWriteProcRamFifo	driver/src/EasyCAT.c	/^void SPIWriteProcRamFifo(char *data,$/;"	f
SPIWriteRegisterDirect	driver/src/EasyCAT.c	/^void SPIWriteRegisterDirect(uint16_t Address, uint32_t DataOut) {$/;"	f
SPIWriteRegisterIndirect	driver/src/EasyCAT.c	/^void SPIWriteRegisterIndirect(uint32_t DataOut, uint16_t Address) {$/;"	f
BCM2708_PERI_BASE	driver/src/rpi/gpio.c	9;"	d	file:
BLOCK_SIZE	driver/src/rpi/gpio.c	13;"	d	file:
GET_GPIO	driver/src/rpi/gpio.c	28;"	d	file:
GPIO_BASE	driver/src/rpi/gpio.c	10;"	d	file:
GPIO_CLR	driver/src/rpi/gpio.c	25;"	d	file:
GPIO_PULL	driver/src/rpi/gpio.c	30;"	d	file:
GPIO_PULLCLK0	driver/src/rpi/gpio.c	31;"	d	file:
GPIO_SET	driver/src/rpi/gpio.c	23;"	d	file:
INP_GPIO	driver/src/rpi/gpio.c	17;"	d	file:
OUT_GPIO	driver/src/rpi/gpio.c	18;"	d	file:
PAGE_SIZE	driver/src/rpi/gpio.c	12;"	d	file:
SET_GPIO_ALT	driver/src/rpi/gpio.c	19;"	d	file:
gpio	driver/src/rpi/gpio.c	/^static volatile unsigned *gpio = NULL;$/;"	v	file:
gpio_clr	driver/src/rpi/gpio.c	/^void gpio_clr(uint32_t g) {$/;"	f
gpio_config_input	driver/src/rpi/gpio.c	/^void gpio_config_input(uint32_t g) {$/;"	f
gpio_config_output	driver/src/rpi/gpio.c	/^void gpio_config_output(uint32_t g) {$/;"	f
gpio_get	driver/src/rpi/gpio.c	/^uint32_t gpio_get(uint32_t g) {$/;"	f
gpio_init	driver/src/rpi/gpio.c	/^void gpio_init(void) {$/;"	f
gpio_set	driver/src/rpi/gpio.c	/^void gpio_set(uint32_t g) {$/;"	f
bcm2835_bit_order	driver/src/rpi/spi.c	/^uint32_t bcm2835_bit_order[] = {BCM2835_SPI_BIT_ORDER_LSBFIRST,$/;"	v
bcm2835_cs	driver/src/rpi/spi.c	/^uint32_t bcm2835_cs[] = {BCM2835_SPI_CS0, BCM2835_SPI_CS1};$/;"	v
bcm2835_spi_mode	driver/src/rpi/spi.c	/^uint32_t bcm2835_spi_mode[] = {$/;"	v
spi_configure	driver/src/rpi/spi.c	/^int spi_configure(uint32_t sdev,$/;"	f
spi_exit	driver/src/rpi/spi.c	/^void spi_exit(void) {$/;"	f
spi_init	driver/src/rpi/spi.c	/^int spi_init(void) {$/;"	f
spi_transfern	driver/src/rpi/spi.c	/^int spi_transfern(uint32_t sdev, char *buff, size_t size) {$/;"	f
CONTROLCMD	gnc/include/Control.hh	/^        arma::vec CONTROLCMD;$/;"	m	class:Control
CONTROL_TYPE	gnc/include/Control.hh	/^        enum CONTROL_TYPE {$/;"	g	class:Control
Control	gnc/include/Control.hh	/^class Control {$/;"	c
GAINFP	gnc/include/Control.hh	/^        arma::vec GAINFP;       \/* *io (--)     Feedback gains of pitch accel controller *\/$/;"	m	class:Control
GAINFY	gnc/include/Control.hh	/^        arma::vec GAINFY;       \/* *io (--)     Feedback gains of yaw accel controller *\/$/;"	m	class:Control
GAINGAM	gnc/include/Control.hh	/^        arma::mat GAINGAM;      \/* *io  (--)    Gain *\/$/;"	m	class:Control
IBBB0	gnc/include/Control.hh	/^        arma::vec IBBB0;$/;"	m	class:Control
IBBB1	gnc/include/Control.hh	/^        arma::vec IBBB1;$/;"	m	class:Control
IBBB2	gnc/include/Control.hh	/^        arma::vec IBBB2;$/;"	m	class:Control
NO_CONTROL	gnc/include/Control.hh	/^            NO_CONTROL = 0,$/;"	e	enum:Control::CONTROL_TYPE
S2_PITCH_DOWN	gnc/include/Control.hh	/^            S2_PITCH_DOWN,$/;"	e	enum:Control::CONTROL_TYPE
S2_ROLL_CONTROL	gnc/include/Control.hh	/^            S2_ROLL_CONTROL$/;"	e	enum:Control::CONTROL_TYPE
_CONTROLCMD	gnc/include/Control.hh	/^        double _CONTROLCMD[3];$/;"	m	class:Control
_GAINFP	gnc/include/Control.hh	/^        double   _GAINFP[3];    \/* *io (--)     Feedback gains of pitch accel controller *\/$/;"	m	class:Control
_GAINFY	gnc/include/Control.hh	/^        double   _GAINFY[3];    \/* *io (--)     Feedback gains of yaw accel controller *\/$/;"	m	class:Control
_GAINGAM	gnc/include/Control.hh	/^        double _GAINGAM[3][1];  \/* *io  (--)    Gain *\/$/;"	m	class:Control
_IBBB0	gnc/include/Control.hh	/^        double _IBBB0[3];$/;"	m	class:Control
_IBBB1	gnc/include/Control.hh	/^        double _IBBB1[3];$/;"	m	class:Control
_IBBB2	gnc/include/Control.hh	/^        double _IBBB2[3];$/;"	m	class:Control
__CONTROL_HH__	gnc/include/Control.hh	2;"	d
alcomx	gnc/include/Control.hh	/^        double  alcomx;         \/* *io (--)     Lateral (horizontal) acceleration command *\/$/;"	m	class:Control
alcomx_actual	gnc/include/Control.hh	/^        double  alcomx_actual;  \/* *io (--)     Later accel com limited by 'betalimx' *\/$/;"	m	class:Control
ancomx	gnc/include/Control.hh	/^        double  ancomx;         \/* *io (--)     Pitch (normal) acceleration command *\/$/;"	m	class:Control
ancomx_actual	gnc/include/Control.hh	/^        double  ancomx_actual;  \/* *io (--)     Normal accel com limited by 'alplimx' *\/$/;"	m	class:Control
delecx	gnc/include/Control.hh	/^        double  delecx;         \/* *io (d)      Pitch command deflection *\/  \/\/ n$/;"	m	class:Control
delimx	gnc/include/Control.hh	/^        double  delimx;         \/* *io (d)      Pitch command limiter *\/$/;"	m	class:Control
delrcx	gnc/include/Control.hh	/^        double  delrcx;         \/* *io (d)      Yaw command deflection *\/    \/\/ n$/;"	m	class:Control
drlimx	gnc/include/Control.hh	/^        double  drlimx;         \/* *io (d)      Yaw command limiter *\/$/;"	m	class:Control
factwaclp	gnc/include/Control.hh	/^        double  factwaclp;      \/* *io (--)     Factor to mod 'waclp': waclp*(1+factwacl) *\/$/;"	m	class:Control
factwacly	gnc/include/Control.hh	/^        double  factwacly;      \/* *io (--)     Factor to mod 'wacly': wacly*(1+factwacl) *\/$/;"	m	class:Control
fmass0	gnc/include/Control.hh	/^        double fmass0;$/;"	m	class:Control
fmasse	gnc/include/Control.hh	/^        double fmasse;$/;"	m	class:Control
gainff	gnc/include/Control.hh	/^        double gainff;          \/* *io  (--)    gain *\/$/;"	m	class:Control
gainl	gnc/include/Control.hh	/^        double  gainl;          \/* *io (--)     Gain in lateral acceleration loop *\/$/;"	m	class:Control
gainp	gnc/include/Control.hh	/^        double  gainp;          \/* *io (s2\/m)   Proportional gain in pitch acceleration loop *\/$/;"	m	class:Control
gainy	gnc/include/Control.hh	/^        double  gainy;          \/* *io (--)     Gain in lateral acceleration loop *\/$/;"	m	class:Control
gkp	gnc/include/Control.hh	/^        double  gkp;            \/* *io (s)      Gain of roll rate feedback *\/$/;"	m	class:Control
gkphi	gnc/include/Control.hh	/^        double  gkphi;          \/* *io (--)     Gain of roll angle feedback *\/$/;"	m	class:Control
grab_FSPCB	gnc/include/Control.hh	/^        std::function<arma::vec3()> grab_FSPCB;$/;"	m	class:Control
grab_computed_WBIB	gnc/include/Control.hh	/^        std::function<arma::vec3()> grab_computed_WBIB;$/;"	m	class:Control
grab_dla	gnc/include/Control.hh	/^        std::function<double()> grab_dla;$/;"	m	class:Control
grab_dlde	gnc/include/Control.hh	/^        std::function<double()> grab_dlde;$/;"	m	class:Control
grab_dma	gnc/include/Control.hh	/^        std::function<double()> grab_dma;$/;"	m	class:Control
grab_dmde	gnc/include/Control.hh	/^        std::function<double()> grab_dmde;$/;"	m	class:Control
grab_dmq	gnc/include/Control.hh	/^        std::function<double()> grab_dmq;$/;"	m	class:Control
grab_dnb	gnc/include/Control.hh	/^        std::function<double()> grab_dnb;$/;"	m	class:Control
grab_dnd	gnc/include/Control.hh	/^        std::function<double()> grab_dnd;$/;"	m	class:Control
grab_dndr	gnc/include/Control.hh	/^        std::function<double()> grab_dndr;$/;"	m	class:Control
grab_dnr	gnc/include/Control.hh	/^        std::function<double()> grab_dnr;$/;"	m	class:Control
grab_dvbe	gnc/include/Control.hh	/^        std::function<double()> grab_dvbe;$/;"	m	class:Control
grab_dvbec	gnc/include/Control.hh	/^        std::function<double()> grab_dvbec;$/;"	m	class:Control
grab_dyb	gnc/include/Control.hh	/^        std::function<double()> grab_dyb;$/;"	m	class:Control
grab_gymax	gnc/include/Control.hh	/^        std::function<double()> grab_gymax;$/;"	m	class:Control
grab_mprop	gnc/include/Control.hh	/^        std::function<int()>    grab_mprop;$/;"	m	class:Control
grab_pdynmc	gnc/include/Control.hh	/^        std::function<double()> grab_pdynmc;$/;"	m	class:Control
grab_phibdcx	gnc/include/Control.hh	/^        std::function<double()> grab_phibdcx;$/;"	m	class:Control
grab_psibdcx	gnc/include/Control.hh	/^        std::function<double()> grab_psibdcx;$/;"	m	class:Control
grab_qqcx	gnc/include/Control.hh	/^        std::function<double()> grab_qqcx;$/;"	m	class:Control
grab_rrcx	gnc/include/Control.hh	/^        std::function<double()> grab_rrcx;$/;"	m	class:Control
grab_thtbdcx	gnc/include/Control.hh	/^        std::function<double()> grab_thtbdcx;$/;"	m	class:Control
grab_thtvdcx	gnc/include/Control.hh	/^        std::function<double()> grab_thtvdcx;$/;"	m	class:Control
grate	gnc/include/Control.hh	/^        double  grate;          \/* *io (--)     grate *\/$/;"	m	class:Control
isetc2	gnc/include/Control.hh	/^        double  isetc2;         \/* *io (--)     Flag to print freeze variables *\/$/;"	m	class:Control
isp	gnc/include/Control.hh	/^        double isp;$/;"	m	class:Control
kpi	gnc/include/Control.hh	/^        double kpi;$/;"	m	class:Control
kpp	gnc/include/Control.hh	/^        double kpp;$/;"	m	class:Control
kppp	gnc/include/Control.hh	/^        double kppp;$/;"	m	class:Control
kri	gnc/include/Control.hh	/^        double kri;$/;"	m	class:Control
krp	gnc/include/Control.hh	/^        double krp;$/;"	m	class:Control
krpp	gnc/include/Control.hh	/^        double krpp;$/;"	m	class:Control
kyi	gnc/include/Control.hh	/^        double kyi;$/;"	m	class:Control
kyp	gnc/include/Control.hh	/^        double kyp;$/;"	m	class:Control
kypp	gnc/include/Control.hh	/^        double kypp;$/;"	m	class:Control
lx	gnc/include/Control.hh	/^        double lx;$/;"	m	class:Control
maut	gnc/include/Control.hh	/^        enum CONTROL_TYPE maut;           \/* *io (--)     maut=|mauty|mautp| see table *\/$/;"	m	class:Control	typeref:enum:Control::CONTROL_TYPE
mdot	gnc/include/Control.hh	/^        double mdot;$/;"	m	class:Control
mfreeze	gnc/include/Control.hh	/^        int     mfreeze;        \/* *io (--)     =0:Unfreeze; =1:Freeze; increment for more *\/$/;"	m	class:Control
paclp	gnc/include/Control.hh	/^        double  paclp;          \/* *io (--)     Close loop real pole *\/$/;"	m	class:Control
pacly	gnc/include/Control.hh	/^        double  pacly;          \/* *io (--)     Close loop real pole, yaw *\/$/;"	m	class:Control
perrori	gnc/include/Control.hh	/^        double perrori;$/;"	m	class:Control
perrorp	gnc/include/Control.hh	/^        double perrorp;$/;"	m	class:Control
pgam	gnc/include/Control.hh	/^        double pgam;            \/*  *io  (--)    Gain *\/$/;"	m	class:Control
pitchcmd	gnc/include/Control.hh	/^        double pitchcmd;$/;"	m	class:Control
qqdx	gnc/include/Control.hh	/^        double  qqdx;           \/* *io (--)     Desired pitch rate", "control *\/$/;"	m	class:Control
rerrori	gnc/include/Control.hh	/^        double rerrori;$/;"	m	class:Control
rerrorp	gnc/include/Control.hh	/^        double rerrorp;$/;"	m	class:Control
rollcmd	gnc/include/Control.hh	/^        double rollcmd;$/;"	m	class:Control
rollerror	gnc/include/Control.hh	/^        double rollerror;$/;"	m	class:Control
theta_a_cmd	gnc/include/Control.hh	/^        double theta_a_cmd;$/;"	m	class:Control
theta_b_cmd	gnc/include/Control.hh	/^        double theta_b_cmd;$/;"	m	class:Control
theta_c_cmd	gnc/include/Control.hh	/^        double theta_c_cmd;$/;"	m	class:Control
theta_d_cmd	gnc/include/Control.hh	/^        double theta_d_cmd;$/;"	m	class:Control
thterror	gnc/include/Control.hh	/^        double thterror;$/;"	m	class:Control
thtvdcomx	gnc/include/Control.hh	/^        double thtvdcomx;        \/* *io (d)      Flight path angle command *\/$/;"	m	class:Control
waclp	gnc/include/Control.hh	/^        double  waclp;          \/* *io (r\/s)    Nat freq of accel close loop complex pole *\/$/;"	m	class:Control
wacly	gnc/include/Control.hh	/^        double  wacly;          \/* *io (r\/s)    Nat freq of accel close loop pole, yaw *\/$/;"	m	class:Control
wgam	gnc/include/Control.hh	/^        double wgam;            \/*  *io  (--)    Gain *\/$/;"	m	class:Control
xcg_0	gnc/include/Control.hh	/^        double xcg_0;$/;"	m	class:Control
xcg_1	gnc/include/Control.hh	/^        double xcg_1;$/;"	m	class:Control
y1	gnc/include/Control.hh	/^        double y1;$/;"	m	class:Control
y2	gnc/include/Control.hh	/^        double y2;$/;"	m	class:Control
yawcmd	gnc/include/Control.hh	/^        double yawcmd;$/;"	m	class:Control
yawerror	gnc/include/Control.hh	/^        double yawerror;$/;"	m	class:Control
yerrori	gnc/include/Control.hh	/^        double yerrori;$/;"	m	class:Control
yerrorp	gnc/include/Control.hh	/^        double yerrorp;$/;"	m	class:Control
yy	gnc/include/Control.hh	/^        double  yy;             \/* *io (m\/s)    Yaw feed-forward integration variable *\/$/;"	m	class:Control
yyd	gnc/include/Control.hh	/^        double  yyd;            \/* *io (m\/s2)   Yaw feed-forward derivative variable *\/$/;"	m	class:Control
zaclp	gnc/include/Control.hh	/^        double  zaclp;          \/* *io (--)     Damping of accel close loop complex pole *\/$/;"	m	class:Control
zacly	gnc/include/Control.hh	/^        double  zacly;          \/* *io (--)     Damping of accel close loop pole, yaw *\/$/;"	m	class:Control
zgam	gnc/include/Control.hh	/^        double zgam;            \/*  *io  (--)    Gain *\/$/;"	m	class:Control
zz	gnc/include/Control.hh	/^        double  zz;             \/* *io (m\/s)    Pitch feed-forward integration variable *\/$/;"	m	class:Control
zzd	gnc/include/Control.hh	/^        double  zzd;            \/* *io (m\/s2)   Pitch feed-forward derivative variable *\/$/;"	m	class:Control
CXH	gnc/include/GPS.hh	/^    arma::vec CXH;    \/* *o (--)       CLock state *\/$/;"	m	class:GPS_FSW
DR_NOISE	gnc/include/GPS.hh	/^    double DR_NOISE[4];     \/* *i (m\/s)     Delta-range noise *\/$/;"	m	class:GPS_FSW
DR_NOISE_bcor	gnc/include/GPS.hh	/^    double DR_NOISE_bcor[4];     \/* *i (--)     Delta-range noise bcor *\/$/;"	m	class:GPS_FSW
DR_NOISE_sigma	gnc/include/GPS.hh	/^    double DR_NOISE_sigma[4];    \/* *i (--)     Delta-range noise sigma *\/$/;"	m	class:GPS_FSW
FF	gnc/include/GPS.hh	/^    arma::mat FF;             \/* *o (--)      Constant*\/$/;"	m	class:GPS_FSW
GPS_FSW	gnc/include/GPS.hh	/^class GPS_FSW{$/;"	c
PHI	gnc/include/GPS.hh	/^    arma::mat PHI;            \/* *o (--)      Constant*\/$/;"	m	class:GPS_FSW
PP	gnc/include/GPS.hh	/^    arma::mat PP;               \/* *o (--)      Covariance Matrix *\/$/;"	m	class:GPS_FSW
PP0	gnc/include/GPS.hh	/^    arma::mat PP0;$/;"	m	class:GPS_FSW
PR_BIAS	gnc/include/GPS.hh	/^    double PR_BIAS[4];      \/* *i (m)       Pseudo-range bias GAUSS *\/$/;"	m	class:GPS_FSW
PR_NOISE	gnc/include/GPS.hh	/^    double PR_NOISE[4];     \/* *i (m)       Pseudo-range bias *\/$/;"	m	class:GPS_FSW
PR_NOISE_bcor	gnc/include/GPS.hh	/^    double PR_NOISE_bcor[4];     \/* *i (--)       Pseudo-range bias bcor *\/$/;"	m	class:GPS_FSW
PR_NOISE_sigma	gnc/include/GPS.hh	/^    double PR_NOISE_sigma[4];    \/* *i (--)       Pseudo-range bias sigma *\/$/;"	m	class:GPS_FSW
SXH	gnc/include/GPS.hh	/^    arma::vec SXH;    \/* *o (m)        Position state (inertial coor) *\/$/;"	m	class:GPS_FSW
VXH	gnc/include/GPS.hh	/^    arma::vec VXH;    \/* *o (m)        Velocity state (inertial coor) *\/$/;"	m	class:GPS_FSW
WEII	gnc/include/GPS.hh	/^    arma::vec WEII;   \/* *o  (r\/s)      Earth rate (Vector) *\/$/;"	m	class:GPS_FSW
ZZ	gnc/include/GPS.hh	/^    arma::vec ZZ;     \/* *o  (--)      *\/$/;"	m	class:GPS_FSW
_CXH	gnc/include/GPS.hh	/^    double   _CXH[3]; \/* *o (--)       CLock state *\/$/;"	m	class:GPS_FSW
_FF	gnc/include/GPS.hh	/^    double _FF[8][8];             \/* *o (--)      Constant*\/$/;"	m	class:GPS_FSW
_PHI	gnc/include/GPS.hh	/^    double _PHI[8][8];            \/* *o (--)      Constant*\/$/;"	m	class:GPS_FSW
_PP	gnc/include/GPS.hh	/^    double _PP[8][8];           \/* *o (--)      Covariance Matrix *\/$/;"	m	class:GPS_FSW
_PP0	gnc/include/GPS.hh	/^    double _PP0[8][8];$/;"	m	class:GPS_FSW
_SXH	gnc/include/GPS.hh	/^    double   _SXH[3]; \/* *o (m)        Position state (inertial coor) *\/$/;"	m	class:GPS_FSW
_VXH	gnc/include/GPS.hh	/^    double   _VXH[3]; \/* *o (m)        Velocity state (inertial coor) *\/$/;"	m	class:GPS_FSW
_WEII	gnc/include/GPS.hh	/^    double _WEII[3];  \/* *o  (r\/s)      Earth rate (Vector) *\/$/;"	m	class:GPS_FSW
_ZZ	gnc/include/GPS.hh	/^    double _ZZ[8];    \/* *o  (--)      *\/$/;"	m	class:GPS_FSW
__GPS_HH	gnc/include/GPS.hh	2;"	d
clk	gnc/include/GPS.hh	/^    double clk[2];$/;"	m	struct:transmit_channel
factq	gnc/include/GPS.hh	/^    double factq;               \/* *o (--)      Factor to modifiy the Q-matrix Q(1+factq) *\/$/;"	m	class:GPS_FSW
factr	gnc/include/GPS.hh	/^    double factr;           \/* *i (--)      Factor to modifiy the R-matrix R(1+factr) *\/$/;"	m	class:GPS_FSW
gps_acq	gnc/include/GPS.hh	/^    bool gps_acq;               \/* ** (--)      GPS Signal Acquired? *\/$/;"	m	class:GPS_FSW
gps_epoch	gnc/include/GPS.hh	/^    double gps_epoch;           \/* ** (s)       GPS update epoch time since launch *\/$/;"	m	class:GPS_FSW
gps_pos_meas	gnc/include/GPS.hh	/^    double gps_pos_meas;    \/* *o (m)        *\/$/;"	m	class:GPS_FSW
gps_step	gnc/include/GPS.hh	/^    double gps_step;  \/* *o  (s)      gps time step *\/$/;"	m	class:GPS_FSW
gps_vel_meas	gnc/include/GPS.hh	/^    double gps_vel_meas;    \/* *o (m)        *\/$/;"	m	class:GPS_FSW
grab_SBEEC	gnc/include/GPS.hh	/^    std::function<arma::vec3()>  grab_SBEEC;$/;"	m	class:GPS_FSW
grab_SBIIC	gnc/include/GPS.hh	/^    std::function<arma::vec3()> grab_SBIIC;$/;"	m	class:GPS_FSW
grab_TEIC	gnc/include/GPS.hh	/^    std::function<arma::mat33()> grab_TEIC;$/;"	m	class:GPS_FSW
grab_VBEEC	gnc/include/GPS.hh	/^    std::function<arma::vec3()>  grab_VBEEC;$/;"	m	class:GPS_FSW
grab_VBIIC	gnc/include/GPS.hh	/^    std::function<arma::vec3()> grab_VBIIC;$/;"	m	class:GPS_FSW
grab_WBICI	gnc/include/GPS.hh	/^    std::function<arma::vec3()> grab_WBICI;$/;"	m	class:GPS_FSW
grab_transmit_data	gnc/include/GPS.hh	/^    std::function<transmit_channel*()> grab_transmit_data;$/;"	m	class:GPS_FSW
pos	gnc/include/GPS.hh	/^    double pos[3];$/;"	m	struct:transmit_channel
ppos	gnc/include/GPS.hh	/^    double ppos;            \/* *i (m)       Init 1sig pos values of state cov matrix *\/$/;"	m	class:GPS_FSW
prn	gnc/include/GPS.hh	/^    int prn;$/;"	m	struct:transmit_channel
pvel	gnc/include/GPS.hh	/^    double pvel;            \/* *i (m\/s)     Init 1sig vel values of state cov matrix *\/$/;"	m	class:GPS_FSW
qclockb	gnc/include/GPS.hh	/^    double qclockb;             \/* *o (m)       1sig clock bias error of process cov matrix *\/$/;"	m	class:GPS_FSW
qclockf	gnc/include/GPS.hh	/^    double qclockf;             \/* *o (m\/s)     1sig clock freq error of process cov matrix *\/$/;"	m	class:GPS_FSW
qpos	gnc/include/GPS.hh	/^    double qpos;            \/* *i (m)       1sig pos values of process cov matrix *\/$/;"	m	class:GPS_FSW
qvel	gnc/include/GPS.hh	/^    double qvel;            \/* *i (m\/s)     1sig vel values of process cov matrix *\/$/;"	m	class:GPS_FSW
range	gnc/include/GPS.hh	/^    double range;$/;"	m	struct:transmit_channel
rpos	gnc/include/GPS.hh	/^    double rpos;            \/* *i (m)       1sig pos value of meas cov matrix *\/$/;"	m	class:GPS_FSW
rvel	gnc/include/GPS.hh	/^    double rvel;            \/* *i (m\/s)     1sig vel value of meas cov matrix *\/$/;"	m	class:GPS_FSW
state_pos	gnc/include/GPS.hh	/^    double state_pos;    \/* *o (m)        *\/$/;"	m	class:GPS_FSW
state_vel	gnc/include/GPS.hh	/^    double state_vel;    \/* *o (m)        *\/$/;"	m	class:GPS_FSW
std_pos	gnc/include/GPS.hh	/^    double std_pos;         \/* *o (m)        std deviation of position from p matrix *\/$/;"	m	class:GPS_FSW
std_ucbias	gnc/include/GPS.hh	/^    double std_ucbias;      \/* *o (m)        std deviation of user clock bias from p matrix *\/$/;"	m	class:GPS_FSW
std_vel	gnc/include/GPS.hh	/^    double std_vel;         \/* *o (m)        std deviation of velocity from p matrix *\/$/;"	m	class:GPS_FSW
time	gnc/include/GPS.hh	/^    time_management * time;$/;"	m	class:GPS_FSW
time_gps	gnc/include/GPS.hh	/^    double time_gps;            \/* ** (s)       GPS time passed *\/$/;"	m	class:GPS_FSW
transmit_channel	gnc/include/GPS.hh	/^struct __attribute__((packed)) transmit_channel {$/;"	s
ucbias_error	gnc/include/GPS.hh	/^    double ucbias_error;    \/* *io (m)      User clock bias error *\/$/;"	m	class:GPS_FSW
ucfreq_error	gnc/include/GPS.hh	/^    double ucfreq_error;    \/* *o (m)        User clock frequency error *\/$/;"	m	class:GPS_FSW
ucfreq_noise	gnc/include/GPS.hh	/^    double ucfreq_noise;    \/* *i (m\/s)     User clock frequency error *\/$/;"	m	class:GPS_FSW
ucfreq_noise_bcor	gnc/include/GPS.hh	/^    double ucfreq_noise_bcor;   \/* *i (--)     User clock frequency error bcor of markov variable *\/$/;"	m	class:GPS_FSW
ucfreq_noise_sigma	gnc/include/GPS.hh	/^    double ucfreq_noise_sigma;  \/* *i (--)     User clock frequency error sigma of markov variable *\/$/;"	m	class:GPS_FSW
ucfreqm	gnc/include/GPS.hh	/^    double ucfreqm;         \/* *o (m\/s)      User clock frequency state *\/$/;"	m	class:GPS_FSW
vel	gnc/include/GPS.hh	/^    double vel[3];$/;"	m	struct:transmit_channel
Guidance	gnc/include/Guidance.hh	/^class Guidance {$/;"	c
LAMD	gnc/include/Guidance.hh	/^    arma::vec  LAMD;       \/* *io  (1\/s)       Thrust vector turning rate *\/$/;"	m	class:Guidance
RBIAS	gnc/include/Guidance.hh	/^    arma::vec RBIAS;       \/* *io  (m)         Range-to-be-gained bias *\/$/;"	m	class:Guidance
RGO	gnc/include/Guidance.hh	/^    arma::vec  RGO;         \/* *io  (m)         Range-to-go vector *\/$/;"	m	class:Guidance
RGRAV	gnc/include/Guidance.hh	/^    arma::vec  RGRAV;       \/* *io  (m)         Postion loss due to gravity *\/$/;"	m	class:Guidance
SDII	gnc/include/Guidance.hh	/^    arma::vec  SDII;        \/* *io  (m)         Desired inertial position *\/$/;"	m	class:Guidance
UD	gnc/include/Guidance.hh	/^    arma::vec  UD;          \/* *io  (--)        Unit vector of SPII and SDII *\/$/;"	m	class:Guidance
ULAM	gnc/include/Guidance.hh	/^    arma::vec  ULAM;        \/* *io  (--)        Unit thrust vector in VGO direction *\/$/;"	m	class:Guidance
UTBC	gnc/include/Guidance.hh	/^    arma::vec  UTBC;        \/* *io  (--)        Commanded unit thrust vector in body coor *\/$/;"	m	class:Guidance
UTIC	gnc/include/Guidance.hh	/^    arma::vec  UTIC;        \/* *io  (--)        Commanded unit thrust vector in inertial coor *\/$/;"	m	class:Guidance
UY	gnc/include/Guidance.hh	/^    arma::vec  UY;          \/* *io  (--)        Unit vector normal to traj plane *\/$/;"	m	class:Guidance
UZ	gnc/include/Guidance.hh	/^    arma::vec  UZ;          \/* *io  (--)        Unit vector in traj plane, normal to SBBI_D *\/$/;"	m	class:Guidance
VGO	gnc/include/Guidance.hh	/^    arma::vec  VGO;         \/* *io  (m\/s)       Velocity still to be gained *\/$/;"	m	class:Guidance
_LAMD	gnc/include/Guidance.hh	/^    double  _LAMD[3];       \/* *io  (1\/s)       Thrust vector turning rate *\/$/;"	m	class:Guidance
_RBIAS	gnc/include/Guidance.hh	/^    double   _RBIAS[3];       \/* *io  (m)         Range-to-be-gained bias *\/$/;"	m	class:Guidance
_RGO	gnc/include/Guidance.hh	/^    double  _RGO[3];         \/* *io  (m)         Range-to-go vector *\/$/;"	m	class:Guidance
_RGRAV	gnc/include/Guidance.hh	/^    double  _RGRAV[3];       \/* *io  (m)         Postion loss due to gravity *\/$/;"	m	class:Guidance
_SDII	gnc/include/Guidance.hh	/^    double  _SDII[3];        \/* *io  (m)         Desired inertial position *\/$/;"	m	class:Guidance
_UD	gnc/include/Guidance.hh	/^    double  _UD[3];          \/* *io  (--)        Unit vector of SPII and SDII *\/$/;"	m	class:Guidance
_ULAM	gnc/include/Guidance.hh	/^    double  _ULAM[3];        \/* *io  (--)        Unit thrust vector in VGO direction *\/$/;"	m	class:Guidance
_UTBC	gnc/include/Guidance.hh	/^    double  _UTBC[3];        \/* *io  (--)        Commanded unit thrust vector in body coor *\/$/;"	m	class:Guidance
_UTIC	gnc/include/Guidance.hh	/^    double  _UTIC[3];        \/* *io  (--)        Commanded unit thrust vector in inertial coor *\/$/;"	m	class:Guidance
_UY	gnc/include/Guidance.hh	/^    double  _UY[3];          \/* *io  (--)        Unit vector normal to traj plane *\/$/;"	m	class:Guidance
_UZ	gnc/include/Guidance.hh	/^    double  _UZ[3];          \/* *io  (--)        Unit vector in traj plane, normal to SBBI_D *\/$/;"	m	class:Guidance
_VGO	gnc/include/Guidance.hh	/^    double  _VGO[3];         \/* *io  (m\/s)       Velocity still to be gained *\/$/;"	m	class:Guidance
__GUIDANCE_HH__	gnc/include/Guidance.hh	2;"	d
alphacomx	gnc/include/Guidance.hh	/^    double  alphacomx;      \/* *io  (d)         Alpha command *\/$/;"	m	class:Guidance
amin	gnc/include/Guidance.hh	/^    double  amin;           \/* *io  (m\/s2)      Minimum longitudinal acceleration *\/$/;"	m	class:Guidance
beco_flag	gnc/include/Guidance.hh	/^    int     beco_flag;      \/* *io  (--)        Boost engine cut-off flag *\/$/;"	m	class:Guidance
betacomx	gnc/include/Guidance.hh	/^    double  betacomx;       \/* *io  (d)         Beta command *\/$/;"	m	class:Guidance
burnout_epoch1	gnc/include/Guidance.hh	/^    double  burnout_epoch1; \/* *io  (s)         Burn out of stage 1 at 'time_ltg' *\/$/;"	m	class:Guidance
burnout_epoch2	gnc/include/Guidance.hh	/^    double  burnout_epoch2; \/* *io  (s)         Burn out of stage 2 at 'time_ltg' *\/$/;"	m	class:Guidance
burnout_epoch3	gnc/include/Guidance.hh	/^    double  burnout_epoch3; \/* *io  (s)         Burn out of stage 3 at 'time_ltg' *\/$/;"	m	class:Guidance
char_time1	gnc/include/Guidance.hh	/^    double  char_time1;     \/* *io  (s)         Characteristic time 'tau' of stage 1 *\/$/;"	m	class:Guidance
char_time2	gnc/include/Guidance.hh	/^    double  char_time2;     \/* *io  (s)         Characteristic time 'tau' of stage 2 *\/$/;"	m	class:Guidance
char_time3	gnc/include/Guidance.hh	/^    double  char_time3;     \/* *io  (s)         Characteristic time 'tau' of stage 3 *\/$/;"	m	class:Guidance
dbd	gnc/include/Guidance.hh	/^    double  dbd;            \/* *io  (m)         Distance of vehicle from the desired end-point *\/$/;"	m	class:Guidance
dbi_desired	gnc/include/Guidance.hh	/^    double  dbi_desired;    \/* *io  (m)         Desired orbital end position *\/$/;"	m	class:Guidance
ddb	gnc/include/Guidance.hh	/^    double  ddb;            \/* *io  (m)         Position error at BECO *\/$/;"	m	class:Guidance
delay_ignition	gnc/include/Guidance.hh	/^    double  delay_ignition; \/* *io  (s)         Delay of motor ignition after staging *\/$/;"	m	class:Guidance
dpd	gnc/include/Guidance.hh	/^    double  dpd;            \/* *io  (m)         Distance of the predicted from the desired end-point *\/$/;"	m	class:Guidance
dvbi_desired	gnc/include/Guidance.hh	/^    double  dvbi_desired;   \/* *io  (m\/s)       Desired orbital end velocity *\/$/;"	m	class:Guidance
dvdb	gnc/include/Guidance.hh	/^    double  dvdb;           \/* *io  (m\/s)       Distance of vehicle from the desired end-point *\/$/;"	m	class:Guidance
exhaust_vel1	gnc/include/Guidance.hh	/^    double  exhaust_vel1;   \/* *io  (m\/s)       Exhaust velocity of stage 1 *\/$/;"	m	class:Guidance
exhaust_vel2	gnc/include/Guidance.hh	/^    double  exhaust_vel2;   \/* *io  (m\/s)       Exhaust velocity of stage 2 *\/$/;"	m	class:Guidance
exhaust_vel3	gnc/include/Guidance.hh	/^    double  exhaust_vel3;   \/* *io  (m\/s)       Exhaust velocity of stage 3 *\/$/;"	m	class:Guidance
grab_FSPCB	gnc/include/Guidance.hh	/^    std::function<arma::vec3()>     grab_FSPCB;$/;"	m	class:Guidance
grab_SBIIC	gnc/include/Guidance.hh	/^    std::function<arma::vec3()>     grab_SBIIC;$/;"	m	class:Guidance
grab_TBIC	gnc/include/Guidance.hh	/^    std::function<arma::mat33()>    grab_TBIC;$/;"	m	class:Guidance
grab_VBIIC	gnc/include/Guidance.hh	/^    std::function<arma::vec3()>     grab_VBIIC;$/;"	m	class:Guidance
grab_dbi	gnc/include/Guidance.hh	/^    std::function<double()>         grab_dbi;$/;"	m	class:Guidance
grab_dvbi	gnc/include/Guidance.hh	/^    std::function<double()>         grab_dvbi;$/;"	m	class:Guidance
grab_fmassr	gnc/include/Guidance.hh	/^    std::function<double()>         grab_fmassr;$/;"	m	class:Guidance
grab_mprop	gnc/include/Guidance.hh	/^    std::function<int()>            grab_mprop;$/;"	m	class:Guidance
grab_thtvdx	gnc/include/Guidance.hh	/^    std::function<double()>         grab_thtvdx;$/;"	m	class:Guidance
inisw_flag	gnc/include/Guidance.hh	/^    int     inisw_flag;     \/* *io  (--)        Flag to initialize '..._intl()' *\/$/;"	m	class:Guidance
init_flag	gnc/include/Guidance.hh	/^    int     init_flag;      \/* *io  (--)        Flag for initializing LTG flags *\/$/;"	m	class:Guidance
ipas2_flag	gnc/include/Guidance.hh	/^    int     ipas2_flag;     \/* *io  (--)        Flag to initialize in '..._trat()'  *\/$/;"	m	class:Guidance
ipas_flag	gnc/include/Guidance.hh	/^    int     ipas_flag;      \/* *io  (--)        Flag to initialize in '..._tgo()'  *\/$/;"	m	class:Guidance
lamd	gnc/include/Guidance.hh	/^    double  lamd;           \/* *io  (1\/s)       Magnitude of LAMD *\/$/;"	m	class:Guidance
lamd_limit	gnc/include/Guidance.hh	/^    double  lamd_limit;     \/* *io  (1\/s)       Limiter on 'lamd' *\/$/;"	m	class:Guidance
ltg_count	gnc/include/Guidance.hh	/^    int     ltg_count;      \/* *io  (--)        Counter of LTG guidance cycles  *\/$/;"	m	class:Guidance
ltg_step	gnc/include/Guidance.hh	/^    double  ltg_step;       \/* *io  (s)         LTG guidance time step *\/$/;"	m	class:Guidance
mguide	gnc/include/Guidance.hh	/^    int     mguide;         \/* *io  (--)        Guidance modes, see table *\/$/;"	m	class:Guidance
nst	gnc/include/Guidance.hh	/^    int     nst;            \/* *io  (--)        N-th stage number *\/$/;"	m	class:Guidance
nstmax	gnc/include/Guidance.hh	/^    int     nstmax;         \/* *io  (--)        # of stages needed to meet end state *\/$/;"	m	class:Guidance
num_stages	gnc/include/Guidance.hh	/^    int     num_stages;     \/* *io  (s)         Number of stages in boost phase *\/$/;"	m	class:Guidance
print_flag	gnc/include/Guidance.hh	/^    int     print_flag;     \/* *io  (--)        Flag to cause print-out  *\/$/;"	m	class:Guidance
set_ltg_thrust	gnc/include/Guidance.hh	/^    std::function<void()>           set_ltg_thrust;$/;"	m	class:Guidance
set_no_thrust	gnc/include/Guidance.hh	/^    std::function<void()>           set_no_thrust;$/;"	m	class:Guidance
skip_flag	gnc/include/Guidance.hh	/^    int     skip_flag;      \/* *io  (--)        Flag to delay output *\/$/;"	m	class:Guidance
tgo	gnc/include/Guidance.hh	/^    double  tgo;            \/* *io  (s)         Time to go to desired end state *\/$/;"	m	class:Guidance
thtvddbx	gnc/include/Guidance.hh	/^    double  thtvddbx;       \/* *io  (d)         Angle error at BECO *\/$/;"	m	class:Guidance
thtvdx_desired	gnc/include/Guidance.hh	/^    double  thtvdx_desired; \/* *io  (d)         Desired orbital flight path angle *\/$/;"	m	class:Guidance
time_ltg	gnc/include/Guidance.hh	/^    double  time_ltg;       \/* *io  (s)         Time since initiating LTG *\/$/;"	m	class:Guidance
vgom	gnc/include/Guidance.hh	/^    double  vgom;           \/* *io  (m\/s)       Velocity to be gained magnitude *\/$/;"	m	class:Guidance
EGRAVI	gnc/include/Ins.hh	/^    arma::vec EGRAVI;      \/* *o  (--)    error by gravity *\/$/;"	m	class:INS
ESBI	gnc/include/Ins.hh	/^    arma::vec ESBI;        \/* *o  (m)     INS pos error *\/$/;"	m	class:INS
ESBID	gnc/include/Ins.hh	/^    arma::vec ESBID;       \/* *o  (m)     INS pos error derivative *\/$/;"	m	class:INS
EVBI	gnc/include/Ins.hh	/^    arma::vec EVBI;        \/* *o  (m\/s)   INS vel error *\/$/;"	m	class:INS
EVBID	gnc/include/Ins.hh	/^    arma::vec EVBID;       \/* *o  (m\/s)   INS vel error derivative *\/$/;"	m	class:INS
GRAVGI	gnc/include/Ins.hh	/^    arma::vec GRAVGI;       \/* *o (m\/s2)  Gravity acceleration wrt inertial frame *\/$/;"	m	class:INS
INS	gnc/include/Ins.hh	/^class INS {$/;"	c
INS_I_ATT_ERR	gnc/include/Ins.hh	/^    arma::vec INS_I_ATT_ERR;$/;"	m	class:INS
POS_ERR	gnc/include/Ins.hh	/^    arma::vec POS_ERR;$/;"	m	class:INS
RICI	gnc/include/Ins.hh	/^    arma::vec RICI;        \/* *o  (r)     INS tilt error derivative *\/$/;"	m	class:INS
RICID	gnc/include/Ins.hh	/^    arma::vec RICID;       \/* *o  (r)     INS tilt error derivative *\/$/;"	m	class:INS
SBEEC	gnc/include/Ins.hh	/^    arma::vec SBEEC;       \/* *o   (m)    Computed body position in ECEF *\/$/;"	m	class:INS
SBIIC	gnc/include/Ins.hh	/^    arma::vec SBIIC;       \/* *o  (m)     Computed pos of body wrt inertia reference point*\/$/;"	m	class:INS
TBIC	gnc/include/Ins.hh	/^    arma::mat TBIC;        \/* *o  (--)    Computed T.M. of body wrt inertia coordinate *\/$/;"	m	class:INS
TBIC_Q	gnc/include/Ins.hh	/^    arma::vec TBIC_Q;      \/* *o  (--)    Computed T.M of body wrt inertia coordinate quaterion *\/$/;"	m	class:INS
TBIDC_Q	gnc/include/Ins.hh	/^    arma::vec TBIDC_Q;   \/* *io (--)    Transformation Matrix of body coord wrt inertia coord derivative (Quaternion) *\/$/;"	m	class:INS
TDCI	gnc/include/Ins.hh	/^    arma::mat TDCI;        \/* *o  (--)    Comp T.M. of geodetic wrt inertial *\/$/;"	m	class:INS
TEIC	gnc/include/Ins.hh	/^    arma::mat TEIC;         \/* *o  (--)   T.M. of inertia to ECEF *\/$/;"	m	class:INS
TESTV	gnc/include/Ins.hh	/^    arma::vec TESTV;$/;"	m	class:INS
TMP_old	gnc/include/Ins.hh	/^    arma::vec TMP_old;$/;"	m	class:INS
VBECD	gnc/include/Ins.hh	/^    arma::vec VBECD;       \/* *o  (m\/s)   Geodetic velocity *\/$/;"	m	class:INS
VBEEC	gnc/include/Ins.hh	/^    arma::vec VBEEC;       \/* *o   (m)    Computed body velocity in ECEF *\/$/;"	m	class:INS
VBIIC	gnc/include/Ins.hh	/^    arma::vec VBIIC;       \/* *o  (m\/s)   Computed body vel in inertia coor *\/$/;"	m	class:INS
VBIIC_old	gnc/include/Ins.hh	/^    arma::vec VBIIC_old;$/;"	m	class:INS
WBICI	gnc/include/Ins.hh	/^    arma::vec WBICI;       \/* *o  (r\/s)   Computed inertial body rate in inert coordinate *\/$/;"	m	class:INS
WEII	gnc/include/Ins.hh	/^    arma::mat WEII;        \/* *o  (r\/s)    Earth's angular velocity (skew-sym) *\/$/;"	m	class:INS
_EGRAVI	gnc/include/Ins.hh	/^    double   _EGRAVI[3];   \/* *o  (--)    error by gravity *\/$/;"	m	class:INS
_ESBI	gnc/include/Ins.hh	/^    double   _ESBI[3];     \/* *o  (m)     INS pos error *\/$/;"	m	class:INS
_ESBID	gnc/include/Ins.hh	/^    double   _ESBID[3];    \/* *o  (m)     INS pos error derivative *\/$/;"	m	class:INS
_EVBI	gnc/include/Ins.hh	/^    double   _EVBI[3];     \/* *o  (m\/s)   INS vel error *\/$/;"	m	class:INS
_EVBID	gnc/include/Ins.hh	/^    double   _EVBID[3];    \/* *o  (m\/s)   INS vel error derivative *\/$/;"	m	class:INS
_GRAVGI	gnc/include/Ins.hh	/^    double _GRAVGI[3];      \/* *o (m\/s2)  Gravity acceleration wrt inertial frame *\/$/;"	m	class:INS
_INS_I_ATT_ERR	gnc/include/Ins.hh	/^    double _INS_I_ATT_ERR[3];$/;"	m	class:INS
_POS_ERR	gnc/include/Ins.hh	/^    double _POS_ERR[3];$/;"	m	class:INS
_RICI	gnc/include/Ins.hh	/^    double   _RICI[3];     \/* *o  (r)     INS tilt error *\/$/;"	m	class:INS
_RICID	gnc/include/Ins.hh	/^    double   _RICID[3];    \/* *o  (r)     INS tilt error derivative *\/$/;"	m	class:INS
_SBEEC	gnc/include/Ins.hh	/^    double _SBEEC[3];      \/* *o   (m)    Computed body position in ECEF *\/$/;"	m	class:INS
_SBIIC	gnc/include/Ins.hh	/^    double   _SBIIC[3];    \/* *o  (m)     Computed pos of body wrt inertia reference point*\/$/;"	m	class:INS
_TBIC	gnc/include/Ins.hh	/^    double _TBIC[3][3];    \/* *o  (--)    Computed T.M. of body wrt inertia coordinate *\/$/;"	m	class:INS
_TBIC_Q	gnc/include/Ins.hh	/^    double _TBIC_Q[4];     \/* *o  (--)    Computed T.M of body wrt inertia coordinate quaterion *\/$/;"	m	class:INS
_TBIDC_Q	gnc/include/Ins.hh	/^    double _TBIDC_Q[4];  \/* *io (--)    Transformation Matrix of body coord wrt inertia coord derivative (Quaternion) *\/$/;"	m	class:INS
_TDCI	gnc/include/Ins.hh	/^    double   _TDCI[3][3];  \/* *o  (--)    Comp T.M. of geodetic wrt inertial *\/$/;"	m	class:INS
_TEIC	gnc/include/Ins.hh	/^    double _TEIC[3][3];     \/* *o  (--)   T.M. of inertia to ECEF *\/$/;"	m	class:INS
_TESTV	gnc/include/Ins.hh	/^    double _TESTV[3];$/;"	m	class:INS
_TMP_old	gnc/include/Ins.hh	/^    double _TMP_old[3];$/;"	m	class:INS
_VBECD	gnc/include/Ins.hh	/^    double   _VBECD[3];    \/* *o  (m\/s)   Geodetic velocity *\/$/;"	m	class:INS
_VBEEC	gnc/include/Ins.hh	/^    double _VBEEC[3];      \/* *o   (m)    Computed body velocity in ECEF *\/$/;"	m	class:INS
_VBIIC	gnc/include/Ins.hh	/^    double   _VBIIC[3];    \/* *o  (m\/s)   Computed body vel in inertia coor *\/$/;"	m	class:INS
_VBIIC_old	gnc/include/Ins.hh	/^    double _VBIIC_old[3];$/;"	m	class:INS
_WBICI	gnc/include/Ins.hh	/^    double   _WBICI[3];    \/* *o  (r\/s)   Computed inertial body rate in inert coordinate *\/$/;"	m	class:INS
_WEII	gnc/include/Ins.hh	/^    double   _WEII[3][3];  \/* *o  (r\/s)    Earth's angular velocity (skew-sym) *\/$/;"	m	class:INS
__INS_HH__	gnc/include/Ins.hh	2;"	d
alphacx	gnc/include/Ins.hh	/^    double alphacx;     \/* *io  (d)     INS computed angle of attack *\/$/;"	m	class:INS
alppcx	gnc/include/Ins.hh	/^    double alppcx;      \/* *io  (d)     INS computed total angle of attack *\/$/;"	m	class:INS
altc	gnc/include/Ins.hh	/^    double altc;        \/* *io  (m)     INS derived altitude *\/$/;"	m	class:INS
betacx	gnc/include/Ins.hh	/^    double betacx;      \/* *io  (d)     INS computed sideslip angle *\/$/;"	m	class:INS
clear_gps_flag	gnc/include/Ins.hh	/^    std::function<void()>         clear_gps_flag;$/;"	m	class:INS
dbic	gnc/include/Ins.hh	/^    double dbic;        \/* *io  (m)     INS computed vehicle distance from Earth center *\/$/;"	m	class:INS
dvbec	gnc/include/Ins.hh	/^    double dvbec;       \/* *io  (m\/s)   Computed body speed wrt earth *\/$/;"	m	class:INS
gpsupdate	gnc/include/Ins.hh	/^    unsigned int gpsupdate; \/* *o (--)   Set wether use gps correction or not *\/$/;"	m	class:INS
grab_DELTA_VEL	gnc/include/Ins.hh	/^    std::function<arma::vec3()>   grab_DELTA_VEL;$/;"	m	class:INS
grab_PHI	gnc/include/Ins.hh	/^    std::function<arma::vec3()>   grab_PHI;$/;"	m	class:INS
grab_PHI_HIGH	gnc/include/Ins.hh	/^    std::function<arma::vec3()>   grab_PHI_HIGH;$/;"	m	class:INS
grab_PHI_LOW	gnc/include/Ins.hh	/^    std::function<arma::vec3()>   grab_PHI_LOW;$/;"	m	class:INS
grab_SBEE	gnc/include/Ins.hh	/^    std::function<arma::vec3()>   grab_SBEE;$/;"	m	class:INS
grab_SBII	gnc/include/Ins.hh	/^    std::function<arma::vec3()>   grab_SBII;$/;"	m	class:INS
grab_SXH	gnc/include/Ins.hh	/^    std::function<arma::vec3()>   grab_SXH;$/;"	m	class:INS
grab_TBI	gnc/include/Ins.hh	/^    std::function<arma::mat33()>  grab_TBI;$/;"	m	class:INS
grab_TEI	gnc/include/Ins.hh	/^    std::function<arma::mat33()>  grab_TEI;  \/\/ Only for testing$/;"	m	class:INS
grab_VBEE	gnc/include/Ins.hh	/^    std::function<arma::vec3()>   grab_VBEE;$/;"	m	class:INS
grab_VBII	gnc/include/Ins.hh	/^    std::function<arma::vec3()>   grab_VBII;$/;"	m	class:INS
grab_VXH	gnc/include/Ins.hh	/^    std::function<arma::vec3()>   grab_VXH;$/;"	m	class:INS
grab_computed_FSPB	gnc/include/Ins.hh	/^    std::function<arma::vec3()> grab_computed_FSPB;$/;"	m	class:INS
grab_computed_WBIB	gnc/include/Ins.hh	/^    std::function<arma::vec3()> grab_computed_WBIB;$/;"	m	class:INS
grab_dbi	gnc/include/Ins.hh	/^    std::function<double()>       grab_dbi;$/;"	m	class:INS
grab_error_of_computed_FSPB	gnc/include/Ins.hh	/^    std::function<arma::vec3()> grab_error_of_computed_FSPB;$/;"	m	class:INS
grab_error_of_computed_WBIB	gnc/include/Ins.hh	/^    std::function<arma::vec3()> grab_error_of_computed_WBIB;$/;"	m	class:INS
grab_gps_update	gnc/include/Ins.hh	/^    std::function<int()>          grab_gps_update;$/;"	m	class:INS
grab_phibdx	gnc/include/Ins.hh	/^    std::function<double()>   grab_phibdx;$/;"	m	class:INS
grab_psibdx	gnc/include/Ins.hh	/^    std::function<double()>   grab_psibdx;$/;"	m	class:INS
grab_thtbdx	gnc/include/Ins.hh	/^    std::function<double()>   grab_thtbdx;$/;"	m	class:INS
ideal	gnc/include/Ins.hh	/^    unsigned int ideal;     \/* *o (--)  choose which extropolate algorithm to use *\/$/;"	m	class:INS
ins_phi_err	gnc/include/Ins.hh	/^    double ins_phi_err;  \/* *o (d)      INS absolute phi angle error *\/$/;"	m	class:INS
ins_pos_err	gnc/include/Ins.hh	/^    double ins_pos_err; \/* *io  (m)     INS absolute postion error *\/$/;"	m	class:INS
ins_pose_err	gnc/include/Ins.hh	/^    double ins_pose_err; \/* *io  (m)     INS absolute postion error *\/$/;"	m	class:INS
ins_psi_err	gnc/include/Ins.hh	/^    double ins_psi_err;  \/* *o  (d)     INS absolute psi angle error *\/$/;"	m	class:INS
ins_tht_err	gnc/include/Ins.hh	/^    double ins_tht_err;   \/* *o (d)     INS absolute tht angle error *\/$/;"	m	class:INS
ins_tilt_err	gnc/include/Ins.hh	/^    double ins_tilt_err; \/* *o  (r)     INS absolute tilt error *\/$/;"	m	class:INS
ins_vel_err	gnc/include/Ins.hh	/^    double ins_vel_err; \/* *io  (m\/s)   INS absolute velocity error *\/$/;"	m	class:INS
ins_vele_err	gnc/include/Ins.hh	/^    double ins_vele_err; \/* *io  (m\/s)   INS absolute velocity error *\/$/;"	m	class:INS
latcx	gnc/include/Ins.hh	/^    double latcx;       \/* *io  (d)     INS derived latitude *\/$/;"	m	class:INS
liftoff	gnc/include/Ins.hh	/^    unsigned int liftoff;   \/* *o (--)  set LV liftoff *\/$/;"	m	class:INS
loncx	gnc/include/Ins.hh	/^    double loncx;       \/* *io  (d)     INS derived longitude *\/$/;"	m	class:INS
phibdcx	gnc/include/Ins.hh	/^    double phibdcx;     \/* *io  (d)     INS computed geodetic Euler roll angle *\/$/;"	m	class:INS
phipcx	gnc/include/Ins.hh	/^    double phipcx;      \/* *io  (d)     INS computed aero roll angle *\/$/;"	m	class:INS
psibdcx	gnc/include/Ins.hh	/^    double psibdcx;     \/* *io  (d)     INS computed geodetic Euler yaw angle *\/$/;"	m	class:INS
psivdcx	gnc/include/Ins.hh	/^    double psivdcx;     \/* *io  (d)     INS computed heading angle *\/$/;"	m	class:INS
thtbdcx	gnc/include/Ins.hh	/^    double thtbdcx;     \/* *io  (d)     INS computed geodetic Euler pitch angle *\/$/;"	m	class:INS
thtvdcx	gnc/include/Ins.hh	/^    double thtvdcx;     \/* *io  (d)     INS computed vertical flight path angle *\/$/;"	m	class:INS
time	gnc/include/Ins.hh	/^    time_management *time;$/;"	m	class:INS
ALL_GEODETIC_EULUR_ANGLE_CONTROL	gnc/include/RcsFc.hh	/^        ALL_GEODETIC_EULUR_ANGLE_CONTROL = 1,$/;"	e	enum:RCS_FC::RCS_MODE
GEODETIC_YAW_ANGLE_CONTROL	gnc/include/RcsFc.hh	/^        GEODETIC_YAW_ANGLE_CONTROL = 4$/;"	e	enum:RCS_FC::RCS_MODE
INCIDENCE_AND_ROLL_ANGLE_CONTROL	gnc/include/RcsFc.hh	/^        INCIDENCE_AND_ROLL_ANGLE_CONTROL = 3,$/;"	e	enum:RCS_FC::RCS_MODE
NO_CONTROL	gnc/include/RcsFc.hh	/^        NO_CONTROL = 0,$/;"	e	enum:RCS_FC::RCS_MODE
NO_RCS	gnc/include/RcsFc.hh	/^        NO_RCS = 0,$/;"	e	enum:RCS_FC::RCS_TYPE
ON_OFF_RCS	gnc/include/RcsFc.hh	/^        ON_OFF_RCS = 2$/;"	e	enum:RCS_FC::RCS_TYPE
RCS_FC	gnc/include/RcsFc.hh	/^class RCS_FC {$/;"	c
RCS_MODE	gnc/include/RcsFc.hh	/^    enum RCS_MODE {$/;"	g	class:RCS_FC
RCS_TYPE	gnc/include/RcsFc.hh	/^    enum RCS_TYPE {$/;"	g	class:RCS_FC
THRUST_VECTOR_DIRECTION_AND_ROLL_ANGLE_CONTROL	gnc/include/RcsFc.hh	/^        THRUST_VECTOR_DIRECTION_AND_ROLL_ANGLE_CONTROL = 2,$/;"	e	enum:RCS_FC::RCS_MODE
__RCS_FC_HH__	gnc/include/RcsFc.hh	2;"	d
e_pitch	gnc/include/RcsFc.hh	/^    double  e_pitch;         \/* *o  (--)   Pitch error signal *\/$/;"	m	class:RCS_FC
e_roll	gnc/include/RcsFc.hh	/^    double  e_roll;          \/* *o  (--)   Roll error signal *\/$/;"	m	class:RCS_FC
e_yaw	gnc/include/RcsFc.hh	/^    double  e_yaw;           \/* *o  (--)   Yaw error signal *\/$/;"	m	class:RCS_FC
grab_UTBC	gnc/include/RcsFc.hh	/^    std::function<arma::vec3()>   grab_UTBC;$/;"	m	class:RCS_FC
grab_alphacomx	gnc/include/RcsFc.hh	/^    std::function<double()>       grab_alphacomx;$/;"	m	class:RCS_FC
grab_alphacx	gnc/include/RcsFc.hh	/^    std::function<double()> grab_alphacx;$/;"	m	class:RCS_FC
grab_betacomx	gnc/include/RcsFc.hh	/^    std::function<double()>       grab_betacomx;$/;"	m	class:RCS_FC
grab_betacx	gnc/include/RcsFc.hh	/^    std::function<double()> grab_betacx;$/;"	m	class:RCS_FC
grab_phibdcx	gnc/include/RcsFc.hh	/^    std::function<double()> grab_phibdcx;$/;"	m	class:RCS_FC
grab_ppcx	gnc/include/RcsFc.hh	/^    std::function<double()> grab_ppcx;$/;"	m	class:RCS_FC
grab_psibdcx	gnc/include/RcsFc.hh	/^    std::function<double()> grab_psibdcx;$/;"	m	class:RCS_FC
grab_qqcx	gnc/include/RcsFc.hh	/^    std::function<double()> grab_qqcx;$/;"	m	class:RCS_FC
grab_rrcx	gnc/include/RcsFc.hh	/^    std::function<double()> grab_rrcx;$/;"	m	class:RCS_FC
grab_thtbdcx	gnc/include/RcsFc.hh	/^    std::function<double()> grab_thtbdcx;$/;"	m	class:RCS_FC
phibdcomx	gnc/include/RcsFc.hh	/^    double  phibdcomx;       \/* *o  (d)    Roll angle command *\/$/;"	m	class:RCS_FC
psibdcomx	gnc/include/RcsFc.hh	/^    double  psibdcomx;       \/* *o  (d)    Yaw angle command *\/$/;"	m	class:RCS_FC
rcs_mode	gnc/include/RcsFc.hh	/^    enum RCS_MODE rcs_mode;  \/* *o  (--)   Attitude control, see RCS_MODE *\/$/;"	m	class:RCS_FC	typeref:enum:RCS_FC::RCS_MODE
rcs_tau	gnc/include/RcsFc.hh	/^    double  rcs_tau;         \/* *o  (s)    Slope of the switching function *\/$/;"	m	class:RCS_FC
rcs_type	gnc/include/RcsFc.hh	/^    enum RCS_TYPE rcs_type;  \/* *o  (--)   Attitude control, see RCS_TYPE *\/$/;"	m	class:RCS_FC	typeref:enum:RCS_FC::RCS_TYPE
thtbdcomx	gnc/include/RcsFc.hh	/^    double  thtbdcomx;       \/* *o  (d)    Pitch angle command *\/$/;"	m	class:RCS_FC
B_pseudo_G	gnc/src/Control.cpp	/^void Control::B_pseudo_G(arma::vec3 cmd, double int_step) {$/;"	f	class:Control
Control	gnc/src/Control.cpp	/^Control::Control()$/;"	f	class:Control
Control	gnc/src/Control.cpp	/^Control::Control(const Control& other)$/;"	f	class:Control
control	gnc/src/Control.cpp	/^void Control::control(double int_step) {$/;"	f	class:Control
control_gamma	gnc/src/Control.cpp	/^double Control::control_gamma(double thtvdcomx) {$/;"	f	class:Control
control_normal_accel	gnc/src/Control.cpp	/^double Control::control_normal_accel(double ancomx, double int_step) {$/;"	f	class:Control
control_pitch_rate	gnc/src/Control.cpp	/^double Control::control_pitch_rate(double qqdx) {$/;"	f	class:Control
control_yaw_accel	gnc/src/Control.cpp	/^double Control::control_yaw_accel(double alcomx, double int_step) {$/;"	f	class:Control
default_data	gnc/src/Control.cpp	/^void Control::default_data() {$/;"	f	class:Control
get_delecx	gnc/src/Control.cpp	/^double  Control::get_delecx() { return delecx; }$/;"	f	class:Control
get_delrcx	gnc/src/Control.cpp	/^double  Control::get_delrcx() { return delrcx; }$/;"	f	class:Control
get_theta_a_cmd	gnc/src/Control.cpp	/^double Control::get_theta_a_cmd() { return theta_a_cmd; }$/;"	f	class:Control
get_theta_b_cmd	gnc/src/Control.cpp	/^double Control::get_theta_b_cmd() { return theta_b_cmd; }$/;"	f	class:Control
get_theta_c_cmd	gnc/src/Control.cpp	/^double Control::get_theta_c_cmd() { return theta_c_cmd; }$/;"	f	class:Control
get_theta_d_cmd	gnc/src/Control.cpp	/^double Control::get_theta_d_cmd() { return theta_d_cmd; }$/;"	f	class:Control
initialize	gnc/src/Control.cpp	/^void Control::initialize() {$/;"	f	class:Control
operator =	gnc/src/Control.cpp	/^Control& Control::operator=(const Control& other) {$/;"	f	class:Control
pitch_down	gnc/src/Control.cpp	/^void Control::pitch_down(double pitchcmd, double int_step) {$/;"	f	class:Control
roll_control	gnc/src/Control.cpp	/^void Control::roll_control(double rollcmd, double int_step) {$/;"	f	class:Control
set_IBBB0	gnc/src/Control.cpp	/^void Control::set_IBBB0(double in1, double in2, double in3) {$/;"	f	class:Control
set_IBBB1	gnc/src/Control.cpp	/^void Control::set_IBBB1(double in1, double in2, double in3) {$/;"	f	class:Control
set_S2_PITCH_DOWN	gnc/src/Control.cpp	/^void Control::set_S2_PITCH_DOWN() { maut = S2_PITCH_DOWN; }$/;"	f	class:Control
set_S2_ROLL_CONTROL	gnc/src/Control.cpp	/^void Control::set_S2_ROLL_CONTROL() { maut = S2_ROLL_CONTROL; }$/;"	f	class:Control
set_attcmd	gnc/src/Control.cpp	/^void Control::set_attcmd(double in1, double in2, double in3) { $/;"	f	class:Control
set_controller_var	gnc/src/Control.cpp	/^void Control::set_controller_var(double in1, double in2, double in3, double in4, double in5) {$/;"	f	class:Control
set_delimx	gnc/src/Control.cpp	/^void Control::set_delimx(double in) { this->delimx = in; }$/;"	f	class:Control
set_drlimx	gnc/src/Control.cpp	/^void Control::set_drlimx(double in) { this->drlimx = in; }$/;"	f	class:Control
set_kpi	gnc/src/Control.cpp	/^void Control::set_kpi(double in) { this->kpi = in; }$/;"	f	class:Control
set_kpp	gnc/src/Control.cpp	/^void Control::set_kpp(double in) { this->kpp = in; }$/;"	f	class:Control
set_kppp	gnc/src/Control.cpp	/^void Control::set_kppp(double in) { this->kppp = in; }$/;"	f	class:Control
set_kri	gnc/src/Control.cpp	/^void Control::set_kri(double in) { this->kri = in; }$/;"	f	class:Control
set_krp	gnc/src/Control.cpp	/^void Control::set_krp(double in) { this->krp = in; }$/;"	f	class:Control
set_krpp	gnc/src/Control.cpp	/^void Control::set_krpp(double in) { this->krpp = in; }$/;"	f	class:Control
set_kyi	gnc/src/Control.cpp	/^void Control::set_kyi(double in) { this->kyi = in; }$/;"	f	class:Control
set_kyp	gnc/src/Control.cpp	/^void Control::set_kyp(double in) { this->kyp = in; }$/;"	f	class:Control
set_kypp	gnc/src/Control.cpp	/^void Control::set_kypp(double in) { this->kypp = in; }$/;"	f	class:Control
set_pgam	gnc/src/Control.cpp	/^void Control::set_pgam(double in) { this->pgam = in; }$/;"	f	class:Control
set_thtvdcomx	gnc/src/Control.cpp	/^void Control::set_thtvdcomx(double in) { this->thtvdcomx = in; }$/;"	f	class:Control
set_wgam	gnc/src/Control.cpp	/^void Control::set_wgam(double in) { this->wgam = in; }$/;"	f	class:Control
set_zgam	gnc/src/Control.cpp	/^void Control::set_zgam(double in) { this->zgam = in; }$/;"	f	class:Control
yaw_control	gnc/src/Control.cpp	/^void Control::yaw_control(double yawcmd, double int_step) {$/;"	f	class:Control
GPS_FSW	gnc/src/GPS.cpp	/^GPS_FSW::GPS_FSW()$/;"	f	class:GPS_FSW
GPS_FSW	gnc/src/GPS.cpp	/^GPS_FSW::GPS_FSW(const GPS_FSW &other)$/;"	f	class:GPS_FSW
filter_extrapolation	gnc/src/GPS.cpp	/^void GPS_FSW::filter_extrapolation(double int_step) {$/;"	f	class:GPS_FSW
get_CXH	gnc/src/GPS.cpp	/^arma::vec3 GPS_FSW::get_CXH() { return CXH; }$/;"	f	class:GPS_FSW
get_SXH	gnc/src/GPS.cpp	/^arma::vec3 GPS_FSW::get_SXH() { return SXH; }$/;"	f	class:GPS_FSW
get_VXH	gnc/src/GPS.cpp	/^arma::vec3 GPS_FSW::get_VXH() { return VXH; }$/;"	f	class:GPS_FSW
initialize	gnc/src/GPS.cpp	/^void GPS_FSW::initialize(double int_step) {$/;"	f	class:GPS_FSW
measure	gnc/src/GPS.cpp	/^void GPS_FSW::measure(double int_step) {$/;"	f	class:GPS_FSW
operator =	gnc/src/GPS.cpp	/^GPS_FSW & GPS_FSW::operator= (const GPS_FSW &other) {$/;"	f	class:GPS_FSW
setup_error_covariance_matrix	gnc/src/GPS.cpp	/^void GPS_FSW::setup_error_covariance_matrix(double factq, double qclockb, double qclockf) {$/;"	f	class:GPS_FSW
setup_fundamental_dynamic_matrix	gnc/src/GPS.cpp	/^void GPS_FSW::setup_fundamental_dynamic_matrix(double uctime_cor) {$/;"	f	class:GPS_FSW
setup_state_covariance_matrix	gnc/src/GPS.cpp	/^void GPS_FSW::setup_state_covariance_matrix(double factp, double pclockb, double pclockf) {$/;"	f	class:GPS_FSW
Guidance	gnc/src/Guidance.cpp	/^Guidance::Guidance()$/;"	f	class:Guidance
Guidance	gnc/src/Guidance.cpp	/^Guidance::Guidance(const Guidance& other)$/;"	f	class:Guidance
default_data	gnc/src/Guidance.cpp	/^void Guidance::default_data() {$/;"	f	class:Guidance
get_UTBC	gnc/src/Guidance.cpp	/^arma::vec3  Guidance::get_UTBC() {$/;"	f	class:Guidance
get_alphacomx	gnc/src/Guidance.cpp	/^double  Guidance::get_alphacomx() { return alphacomx; }$/;"	f	class:Guidance
get_betacomx	gnc/src/Guidance.cpp	/^double  Guidance::get_betacomx() { return betacomx; }$/;"	f	class:Guidance
guidance	gnc/src/Guidance.cpp	/^void Guidance::guidance(double int_step) {$/;"	f	class:Guidance
guidance_ltg	gnc/src/Guidance.cpp	/^arma::vec3 Guidance::guidance_ltg(int &mprop, double int_step, double time_ltg) {$/;"	f	class:Guidance
guidance_ltg_crct	gnc/src/Guidance.cpp	/^void Guidance::guidance_ltg_crct(arma::mat &SDII,$/;"	f	class:Guidance
guidance_ltg_igrl	gnc/src/Guidance.cpp	/^void Guidance::guidance_ltg_igrl(double &s_igrl,$/;"	f	class:Guidance
guidance_ltg_pdct	gnc/src/Guidance.cpp	/^void Guidance::guidance_ltg_pdct(arma::mat &SPII,$/;"	f	class:Guidance
guidance_ltg_tgo	gnc/src/Guidance.cpp	/^void Guidance::guidance_ltg_tgo(double &tgop,$/;"	f	class:Guidance
guidance_ltg_trate	gnc/src/Guidance.cpp	/^void Guidance::guidance_ltg_trate(arma::mat &ULAM,$/;"	f	class:Guidance
guidance_ltg_trate_rtgo	gnc/src/Guidance.cpp	/^void Guidance::guidance_ltg_trate_rtgo(arma::mat &RGO,$/;"	f	class:Guidance
initialize	gnc/src/Guidance.cpp	/^void Guidance::initialize() {$/;"	f	class:Guidance
operator =	gnc/src/Guidance.cpp	/^Guidance& Guidance::operator= (const Guidance& other) {$/;"	f	class:Guidance
set_degree	gnc/src/Guidance.cpp	/^void Guidance::set_degree(double a, double b) {$/;"	f	class:Guidance
AccelHarmonic	gnc/src/Ins.cpp	/^arma::vec INS::AccelHarmonic(arma::vec3 SBII, double CS[21][21], int n_max, int m_max, arma::mat33 TEIC) {$/;"	f	class:INS
GPS_update	gnc/src/Ins.cpp	/^bool INS::GPS_update() {$/;"	f	class:INS
INS	gnc/src/Ins.cpp	/^INS::INS()$/;"	f	class:INS
INS	gnc/src/Ins.cpp	/^INS::INS(const INS& other) {$/;"	f	class:INS
INS_CS_JGM3	gnc/src/Ins.cpp	/^double INS_CS_JGM3[N_JGM3+1][N_JGM3+1] = {$/;"	v
N_JGM3	gnc/src/Ins.cpp	29;"	d	file:
build_321_rotation_matrix	gnc/src/Ins.cpp	/^arma::mat33 INS::build_321_rotation_matrix(arma::vec3 angle) {$/;"	f	class:INS
build_VBEB	gnc/src/Ins.cpp	/^arma::vec INS::build_VBEB(double _alpha0x, double _beta0x, double _dvbe) {$/;"	f	class:INS
build_WEII	gnc/src/Ins.cpp	/^arma::mat INS::build_WEII() {$/;"	f	class:INS
calculate_INS_derived_TBI	gnc/src/Ins.cpp	/^arma::mat33 INS::calculate_INS_derived_TBI(arma::mat33 TBI) {$/;"	f	class:INS
calculate_INS_derived_TEI	gnc/src/Ins.cpp	/^void INS::calculate_INS_derived_TEI() {$/;"	f	class:INS
calculate_INS_derived_alpha	gnc/src/Ins.cpp	/^double INS::calculate_INS_derived_alpha(arma::vec3 VBECB) {$/;"	f	class:INS
calculate_INS_derived_alpp	gnc/src/Ins.cpp	/^double INS::calculate_INS_derived_alpp(arma::vec3 VBECB) {$/;"	f	class:INS
calculate_INS_derived_beta	gnc/src/Ins.cpp	/^double INS::calculate_INS_derived_beta(arma::vec3 VBECB) {$/;"	f	class:INS
calculate_INS_derived_bodyrate	gnc/src/Ins.cpp	/^arma::vec3 INS::calculate_INS_derived_bodyrate(arma::mat33 TBIC, arma::vec3 WBICB) {$/;"	f	class:INS
calculate_INS_derived_dvbe	gnc/src/Ins.cpp	/^double INS::calculate_INS_derived_dvbe() {$/;"	f	class:INS
calculate_INS_derived_euler_angles	gnc/src/Ins.cpp	/^void INS::calculate_INS_derived_euler_angles(arma::mat33 TBD) {$/;"	f	class:INS
calculate_INS_derived_phip	gnc/src/Ins.cpp	/^double INS::calculate_INS_derived_phip(arma::vec3 VBECB) {$/;"	f	class:INS
calculate_INS_derived_postion	gnc/src/Ins.cpp	/^arma::vec3 INS::calculate_INS_derived_postion(arma::vec3 SBII) {$/;"	f	class:INS
calculate_INS_derived_psivd	gnc/src/Ins.cpp	/^double INS::calculate_INS_derived_psivd(arma::vec3 VBECD) {$/;"	f	class:INS
calculate_INS_derived_thtvd	gnc/src/Ins.cpp	/^double INS::calculate_INS_derived_thtvd(arma::vec3 VBECD) {$/;"	f	class:INS
calculate_INS_derived_velocity	gnc/src/Ins.cpp	/^arma::vec3 INS::calculate_INS_derived_velocity(arma::vec3 VBII) {$/;"	f	class:INS
calculate_gravity_error	gnc/src/Ins.cpp	/^arma::vec3 INS::calculate_gravity_error(double dbi) {$/;"	f	class:INS
default_data	gnc/src/Ins.cpp	/^void INS::default_data() {$/;"	f	class:INS
error_diagnostics	gnc/src/Ins.cpp	/^void INS::error_diagnostics() {$/;"	f	class:INS
euler_angle	gnc/src/Ins.cpp	/^arma::vec3 INS::euler_angle(arma::mat33 TBD) {$/;"	f	class:INS
get_EGRAVI	gnc/src/Ins.cpp	/^arma::vec3 INS::get_EGRAVI() { return EGRAVI; }$/;"	f	class:INS
get_SBEEC	gnc/src/Ins.cpp	/^arma::vec3 INS::get_SBEEC() { return SBEEC; }$/;"	f	class:INS
get_SBIIC	gnc/src/Ins.cpp	/^arma::vec3 INS::get_SBIIC() { return SBIIC; }$/;"	f	class:INS
get_TBIC	gnc/src/Ins.cpp	/^arma::mat33 INS::get_TBIC() { return TBIC; }$/;"	f	class:INS
get_TEIC	gnc/src/Ins.cpp	/^arma::mat33 INS::get_TEIC() { return TEIC; }$/;"	f	class:INS
get_VBEEC	gnc/src/Ins.cpp	/^arma::vec3 INS::get_VBEEC() { return VBEEC; }$/;"	f	class:INS
get_VBIIC	gnc/src/Ins.cpp	/^arma::vec3 INS::get_VBIIC() { return VBIIC; }$/;"	f	class:INS
get_WBICI	gnc/src/Ins.cpp	/^arma::vec3 INS::get_WBICI() { return WBICI; }$/;"	f	class:INS
get_alphacx	gnc/src/Ins.cpp	/^double INS::get_alphacx() { return alphacx; }$/;"	f	class:INS
get_betacx	gnc/src/Ins.cpp	/^double INS::get_betacx() { return betacx; }$/;"	f	class:INS
get_dvbec	gnc/src/Ins.cpp	/^double INS::get_dvbec() { return dvbec; }$/;"	f	class:INS
get_phibdcx	gnc/src/Ins.cpp	/^double INS::get_phibdcx() { return phibdcx; }$/;"	f	class:INS
get_psibdcx	gnc/src/Ins.cpp	/^double INS::get_psibdcx() { return psibdcx; }$/;"	f	class:INS
get_thtbdcx	gnc/src/Ins.cpp	/^double INS::get_thtbdcx() { return thtbdcx; }$/;"	f	class:INS
get_thtvdcx	gnc/src/Ins.cpp	/^double INS::get_thtvdcx() { return thtvdcx; }$/;"	f	class:INS
initialize	gnc/src/Ins.cpp	/^void INS::initialize() {$/;"	f	class:INS
load_angle	gnc/src/Ins.cpp	/^void INS::load_angle(double yaw, double roll, double pitch) {$/;"	f	class:INS
load_geodetic_velocity	gnc/src/Ins.cpp	/^void INS::load_geodetic_velocity(double alpha0x, double beta0x, double dvbe) {$/;"	f	class:INS
load_location	gnc/src/Ins.cpp	/^void INS::load_location(double lonx, double latx, double alt) {$/;"	f	class:INS
operator =	gnc/src/Ins.cpp	/^INS& INS::operator=(const INS& other) {$/;"	f	class:INS
propagate_TBI_Q	gnc/src/Ins.cpp	/^void INS::propagate_TBI_Q(double int_step, arma::vec3 WBICB) {$/;"	f	class:INS
set_gps_correction	gnc/src/Ins.cpp	/^void INS::set_gps_correction(unsigned int index) { gpsupdate = index; }$/;"	f	class:INS
set_ideal	gnc/src/Ins.cpp	/^void INS::set_ideal() {$/;"	f	class:INS
set_liftoff	gnc/src/Ins.cpp	/^void INS::set_liftoff(unsigned int index) {$/;"	f	class:INS
set_non_ideal	gnc/src/Ins.cpp	/^void INS::set_non_ideal() {$/;"	f	class:INS
update	gnc/src/Ins.cpp	/^void INS::update(double int_step) {$/;"	f	class:INS
RCS_FC	gnc/src/RcsFc.cpp	/^RCS_FC::RCS_FC() {$/;"	f	class:RCS_FC
RCS_FC	gnc/src/RcsFc.cpp	/^RCS_FC::RCS_FC(const RCS_FC& other) {$/;"	f	class:RCS_FC
actuate	gnc/src/RcsFc.cpp	/^void RCS_FC::actuate() {$/;"	f	class:RCS_FC
default_data	gnc/src/RcsFc.cpp	/^void RCS_FC::default_data() {$/;"	f	class:RCS_FC
disable_rcs	gnc/src/RcsFc.cpp	/^void RCS_FC::disable_rcs() {$/;"	f	class:RCS_FC
enable_rcs	gnc/src/RcsFc.cpp	/^void RCS_FC::enable_rcs() {$/;"	f	class:RCS_FC
get_e_pitch	gnc/src/RcsFc.cpp	/^double RCS_FC::get_e_pitch() { return e_pitch; }$/;"	f	class:RCS_FC
get_e_roll	gnc/src/RcsFc.cpp	/^double RCS_FC::get_e_roll() { return e_roll; }$/;"	f	class:RCS_FC
get_e_yaw	gnc/src/RcsFc.cpp	/^double RCS_FC::get_e_yaw() { return e_yaw; }$/;"	f	class:RCS_FC
get_rcs_mode	gnc/src/RcsFc.cpp	/^enum RCS_FC::RCS_MODE RCS_FC::get_rcs_mode() { return rcs_mode; }$/;"	f	class:RCS_FC
initialize	gnc/src/RcsFc.cpp	/^void RCS_FC::initialize() {$/;"	f	class:RCS_FC
isEnabled	gnc/src/RcsFc.cpp	/^bool RCS_FC::isEnabled() {$/;"	f	class:RCS_FC
operator =	gnc/src/RcsFc.cpp	/^RCS_FC& RCS_FC::operator=(const RCS_FC& other) {$/;"	f	class:RCS_FC
set_mode	gnc/src/RcsFc.cpp	/^void RCS_FC::set_mode(enum RCS_FC::RCS_MODE in) {$/;"	f	class:RCS_FC
set_psibdcomx	gnc/src/RcsFc.cpp	/^void RCS_FC::set_psibdcomx(double in) { psibdcomx = in; }$/;"	f	class:RCS_FC
set_rcs_tau	gnc/src/RcsFc.cpp	/^void RCS_FC::set_rcs_tau(double in) { rcs_tau = in; }$/;"	f	class:RCS_FC
set_thtbdcomx	gnc/src/RcsFc.cpp	/^void RCS_FC::set_thtbdcomx(double in) { thtbdcomx = in; }$/;"	f	class:RCS_FC
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
DM_UT1_UT	math/include/dm_delta_ut.hh	/^const double DM_UT1_UT[Max_DM_UT1_UT_Index] = {$/;"	v
Max_DM_UT1_UT_Index	math/include/dm_delta_ut.hh	30;"	d
dm_delta_ut__hh	math/include/dm_delta_ut.hh	2;"	d
INTEGRATE	math/include/integrate.hh	14;"	d
INTEGRATE_MAT	math/include/integrate.hh	21;"	d
__INTEGRATE_UTIL_HH__	math/include/integrate.hh	2;"	d
__MATH_UTIL_HH__	math/include/math_utility.hh	2;"	d
__MATRIX_UTIL_HH__	math/include/matrix/utility.hh	2;"	d
__STOCHASTIC_UTIL_HH__	math/include/stochastic.hh	2;"	d
C1	math/include/time_utility.hh	/^    uint8_t C1;  \/* *io (--) Coarse time part 1 *\/$/;"	m	class:time_util::CCSDS_CUC
C2	math/include/time_utility.hh	/^    uint8_t C2;  \/* *io (--) Coarse time part 2 *\/$/;"	m	class:time_util::CCSDS_CUC
C3	math/include/time_utility.hh	/^    uint8_t C3;  \/* *io (--) Coarse time part 3 *\/$/;"	m	class:time_util::CCSDS_CUC
C4	math/include/time_utility.hh	/^    uint8_t C4;  \/* *io (--) Coarse time part 4 *\/$/;"	m	class:time_util::CCSDS_CUC
CCSDS_CUC	math/include/time_utility.hh	/^    CCSDS_CUC() {};$/;"	f	class:time_util::CCSDS_CUC
CCSDS_CUC	math/include/time_utility.hh	/^class CCSDS_CUC {$/;"	c	namespace:time_util
D2PI	math/include/time_utility.hh	/^const double D2PI = 6.283185307179586476925287; \/* 2Pi *\/$/;"	m	namespace:time_util
DAS2R	math/include/time_utility.hh	/^const double DAS2R = 4.848136811095359935899141e-6; \/* Arcseconds to radians *\/$/;"	m	namespace:time_util
DJ00	math/include/time_utility.hh	/^const double DJ00 = 2451545.0;$/;"	m	namespace:time_util
DJC	math/include/time_utility.hh	/^const double DJC = 36525.0;$/;"	m	namespace:time_util
DMAS2R	math/include/time_utility.hh	/^const double DMAS2R = 4.848136811095359935899141e-9; \/* Milliarcseconds to radians *\/$/;"	m	namespace:time_util
F1	math/include/time_utility.hh	/^    uint8_t F1;  \/* *io (--) Fine time part 1 *\/$/;"	m	class:time_util::CCSDS_CUC
F2	math/include/time_utility.hh	/^    uint8_t F2;  \/* *io (--) Fine time part 2 *\/$/;"	m	class:time_util::CCSDS_CUC
GPS_TIME	math/include/time_utility.hh	/^    GPS_TIME() {};$/;"	f	class:time_util::GPS_TIME
GPS_TIME	math/include/time_utility.hh	/^class GPS_TIME {$/;"	c	namespace:time_util
MJD_JAN11901	math/include/time_utility.hh	/^const double MJD_JAN11901 = 15385.0;$/;"	m	namespace:time_util
MJD_JAN61980	math/include/time_utility.hh	/^const double MJD_JAN61980 = 44244.0;$/;"	m	namespace:time_util
MJD_UNIX	math/include/time_utility.hh	/^const uint32_t MJD_UNIX = 40587;$/;"	m	namespace:time_util
Modified_julian_date	math/include/time_utility.hh	/^    Modified_julian_date() {}$/;"	f	class:time_util::Modified_julian_date
Modified_julian_date	math/include/time_utility.hh	/^class Modified_julian_date {$/;"	c	namespace:time_util
SEC_PER_DAY	math/include/time_utility.hh	/^const double SEC_PER_DAY = 86400.0;$/;"	m	namespace:time_util
SEC_PER_WEEK	math/include/time_utility.hh	/^const double SEC_PER_WEEK = 604800.0;$/;"	m	namespace:time_util
SOW	math/include/time_utility.hh	/^    double   SOW;   \/* *io (s)  GPS seconds of week *\/$/;"	m	class:time_util::GPS_TIME
TAI_GPS_DIFF	math/include/time_utility.hh	/^const uint32_t TAI_GPS_DIFF = 19;$/;"	m	namespace:time_util
TT_TAI	math/include/time_utility.hh	/^const double TT_TAI = 32.184;$/;"	m	namespace:time_util
TURNAS	math/include/time_utility.hh	/^const double TURNAS = 1296000.0; \/* Arcseconds in a full circle *\/$/;"	m	namespace:time_util
UTC_TIME	math/include/time_utility.hh	/^    UTC_TIME() {};$/;"	f	class:time_util::UTC_TIME
UTC_TIME	math/include/time_utility.hh	/^class UTC_TIME {$/;"	c	namespace:time_util
__TIME_UTIL_HH__	math/include/time_utility.hh	2;"	d
day	math/include/time_utility.hh	/^    uint32_t day;       \/* *io (--) Day     *\/$/;"	m	class:time_util::UTC_TIME
get_C1	math/include/time_utility.hh	/^    uint8_t get_C1() { return C1; }$/;"	f	class:time_util::CCSDS_CUC
get_C2	math/include/time_utility.hh	/^    uint8_t get_C2() { return C2; }$/;"	f	class:time_util::CCSDS_CUC
get_C3	math/include/time_utility.hh	/^    uint8_t get_C3() { return C3; }$/;"	f	class:time_util::CCSDS_CUC
get_C4	math/include/time_utility.hh	/^    uint8_t get_C4() { return C4; }$/;"	f	class:time_util::CCSDS_CUC
get_F1	math/include/time_utility.hh	/^    uint8_t get_F1() { return F1; }$/;"	f	class:time_util::CCSDS_CUC
get_F2	math/include/time_utility.hh	/^    uint8_t get_F2() { return F2; }$/;"	f	class:time_util::CCSDS_CUC
get_SOW	math/include/time_utility.hh	/^    double get_SOW() { return SOW; }$/;"	f	class:time_util::GPS_TIME
get_day	math/include/time_utility.hh	/^    uint32_t get_day() { return day; }$/;"	f	class:time_util::UTC_TIME
get_hour	math/include/time_utility.hh	/^    uint32_t get_hour() { return hour; }$/;"	f	class:time_util::UTC_TIME
get_jd	math/include/time_utility.hh	/^    double get_jd() { return modified_julian_date + 2400000.5; }$/;"	f	class:time_util::Modified_julian_date
get_min	math/include/time_utility.hh	/^    uint32_t get_min() { return min; }$/;"	f	class:time_util::UTC_TIME
get_mjd	math/include/time_utility.hh	/^    double get_mjd() { return modified_julian_date; }$/;"	f	class:time_util::Modified_julian_date
get_month	math/include/time_utility.hh	/^    uint32_t get_month() { return month; }$/;"	f	class:time_util::UTC_TIME
get_sec	math/include/time_utility.hh	/^    double get_sec() { return sec; }$/;"	f	class:time_util::UTC_TIME
get_week	math/include/time_utility.hh	/^    uint32_t get_week() { return week; }$/;"	f	class:time_util::GPS_TIME
get_year	math/include/time_utility.hh	/^    uint32_t get_year() { return year; }$/;"	f	class:time_util::UTC_TIME
hour	math/include/time_utility.hh	/^    uint32_t hour;      \/* *io (--) Hours.  *\/$/;"	m	class:time_util::UTC_TIME
min	math/include/time_utility.hh	/^    uint32_t min;       \/* *io (--) Minutes *\/$/;"	m	class:time_util::UTC_TIME
modified_julian_date	math/include/time_utility.hh	/^    double modified_julian_date;  \/* *io (s) julian date *\/$/;"	m	class:time_util::Modified_julian_date
month	math/include/time_utility.hh	/^    uint32_t month;     \/* *io (--) Month   *\/$/;"	m	class:time_util::UTC_TIME
sec	math/include/time_utility.hh	/^    double sec;         \/* *io (--) Seconds *\/$/;"	m	class:time_util::UTC_TIME
set_C1	math/include/time_utility.hh	/^    void set_C1(uint8_t in) { C1 = in; }$/;"	f	class:time_util::CCSDS_CUC
set_C2	math/include/time_utility.hh	/^    void set_C2(uint8_t in) { C2 = in; }$/;"	f	class:time_util::CCSDS_CUC
set_C3	math/include/time_utility.hh	/^    void set_C3(uint8_t in) { C3 = in; }$/;"	f	class:time_util::CCSDS_CUC
set_C4	math/include/time_utility.hh	/^    void set_C4(uint8_t in) { C4 = in; }$/;"	f	class:time_util::CCSDS_CUC
set_F1	math/include/time_utility.hh	/^    void set_F1(uint8_t in) { F1 = in; }$/;"	f	class:time_util::CCSDS_CUC
set_F2	math/include/time_utility.hh	/^    void set_F2(uint8_t in) { F2 = in; }$/;"	f	class:time_util::CCSDS_CUC
set_SOW	math/include/time_utility.hh	/^    void set_SOW(double in) { SOW = in; }$/;"	f	class:time_util::GPS_TIME
set_day	math/include/time_utility.hh	/^    void set_day(uint32_t in) { day = in; }$/;"	f	class:time_util::UTC_TIME
set_hour	math/include/time_utility.hh	/^    void set_hour(uint32_t in) { hour = in; }$/;"	f	class:time_util::UTC_TIME
set_min	math/include/time_utility.hh	/^    void set_min(uint32_t in) { min = in; }$/;"	f	class:time_util::UTC_TIME
set_mjd	math/include/time_utility.hh	/^    void set_mjd(double in) { modified_julian_date = in; }$/;"	f	class:time_util::Modified_julian_date
set_month	math/include/time_utility.hh	/^    void set_month(uint32_t in) { month = in; }$/;"	f	class:time_util::UTC_TIME
set_sec	math/include/time_utility.hh	/^    void set_sec(double in) { sec = in; }$/;"	f	class:time_util::UTC_TIME
set_week	math/include/time_utility.hh	/^    void set_week(uint32_t in) { week = in; }$/;"	f	class:time_util::GPS_TIME
set_year	math/include/time_utility.hh	/^    void set_year(uint32_t in) { year = in; }$/;"	f	class:time_util::UTC_TIME
time_util	math/include/time_utility.hh	/^namespace time_util {$/;"	n
week	math/include/time_utility.hh	/^    uint32_t week;  \/* *io (--) GPS week *\/$/;"	m	class:time_util::GPS_TIME
year	math/include/time_utility.hh	/^    uint32_t year;      \/* *io (--) Year    *\/$/;"	m	class:time_util::UTC_TIME
integrate	math/src/integrate.cpp	/^arma::mat integrate(arma::mat &DYDX_NEW,$/;"	f
integrate	math/src/integrate.cpp	/^double integrate(const double &dydx_new,$/;"	f
sign	math/src/math_utility.cpp	/^int sign(const double &variable) {$/;"	f
Matrix2Quaternion	math/src/matrix/utility.cpp	/^arma::vec4 Matrix2Quaternion(arma::mat33 Matrix_in) {$/;"	f
Quaternion2Matrix	math/src/matrix/utility.cpp	/^arma::mat33 Quaternion2Matrix(arma::vec4 Quaternion_in) {$/;"	f
angle	math/src/matrix/utility.cpp	/^double angle(arma::vec3 VEC1, arma::vec3 VEC2) {$/;"	f
build_psi_tht_phi_TM	math/src/matrix/utility.cpp	/^arma::mat33 build_psi_tht_phi_TM(const double &psi, const double &tht, const double &phi) {$/;"	f
build_psivg_thtvg_TM	math/src/matrix/utility.cpp	/^arma::mat33 build_psivg_thtvg_TM(const double &psivg, const double &thtvg) {$/;"	f
pol_from_cart	math/src/matrix/utility.cpp	/^arma::vec3 pol_from_cart(arma::vec3 in) {$/;"	f
skew_sym	math/src/matrix/utility.cpp	/^arma::mat33 skew_sym(arma::vec3 vec) {$/;"	f
exponential	math/src/stochastic.cpp	/^double exponential(double density) {$/;"	f
gauss	math/src/stochastic.cpp	/^double gauss(double mean, double sig) {$/;"	f
markov	math/src/stochastic.cpp	/^double markov(double sigma,$/;"	f
rayleigh	math/src/stochastic.cpp	/^double rayleigh(double mode) {$/;"	f
uniform	math/src/stochastic.cpp	/^double uniform(double min, double max) {$/;"	f
unituni	math/src/stochastic.cpp	/^double unituni() {$/;"	f
CCSDS_CUC	math/src/time_utility.cpp	/^time_util::CCSDS_CUC::CCSDS_CUC(GPS_TIME in) {$/;"	f	class:time_util::CCSDS_CUC
GPS_TIME	math/src/time_utility.cpp	/^time_util::GPS_TIME::GPS_TIME(CCSDS_CUC in) {$/;"	f	class:time_util::GPS_TIME
GPS_TIME	math/src/time_utility.cpp	/^time_util::GPS_TIME::GPS_TIME(Modified_julian_date in) {$/;"	f	class:time_util::GPS_TIME
GPS_TIME	math/src/time_utility.cpp	/^time_util::GPS_TIME::GPS_TIME(UTC_TIME in) {$/;"	f	class:time_util::GPS_TIME
GPS_TIME	math/src/time_utility.cpp	/^time_util::GPS_TIME::GPS_TIME(time_t in) : time_util::GPS_TIME(Modified_julian_date(in)) {$/;"	f	class:time_util::GPS_TIME
Modified_julian_date	math/src/time_utility.cpp	/^time_util::Modified_julian_date::Modified_julian_date(GPS_TIME in) {$/;"	f	class:time_util::Modified_julian_date
Modified_julian_date	math/src/time_utility.cpp	/^time_util::Modified_julian_date::Modified_julian_date(UTC_TIME in) {$/;"	f	class:time_util::Modified_julian_date
Modified_julian_date	math/src/time_utility.cpp	/^time_util::Modified_julian_date::Modified_julian_date(time_t in) {$/;"	f	class:time_util::Modified_julian_date
UTC_TIME	math/src/time_utility.cpp	/^time_util::UTC_TIME::UTC_TIME(GPS_TIME in) {$/;"	f	class:time_util::UTC_TIME
UTC_TIME	math/src/time_utility.cpp	/^time_util::UTC_TIME::UTC_TIME(Modified_julian_date in) {$/;"	f	class:time_util::UTC_TIME
get_day_of_year	math/src/time_utility.cpp	/^uint32_t time_util::UTC_TIME::get_day_of_year() {$/;"	f	class:time_util::UTC_TIME
operator +	math/src/time_utility.cpp	/^time_util::GPS_TIME time_util::GPS_TIME::operator+(double in) {$/;"	f	class:time_util::GPS_TIME
operator +=	math/src/time_utility.cpp	/^time_util::GPS_TIME& time_util::GPS_TIME::operator+=(double in) {$/;"	f	class:time_util::GPS_TIME
operator -	math/src/time_utility.cpp	/^float time_util::CCSDS_CUC::operator-(time_util::CCSDS_CUC& in) {$/;"	f	class:time_util::CCSDS_CUC
operator -	math/src/time_utility.cpp	/^time_util::GPS_TIME time_util::GPS_TIME::operator-(double in) {$/;"	f	class:time_util::GPS_TIME
operator -	math/src/time_utility.cpp	/^time_util::GPS_TIME time_util::GPS_TIME::operator-(time_util::GPS_TIME& in) {$/;"	f	class:time_util::GPS_TIME
operator -=	math/src/time_utility.cpp	/^time_util::GPS_TIME& time_util::GPS_TIME::operator-=(double in) {$/;"	f	class:time_util::GPS_TIME
operator -=	math/src/time_utility.cpp	/^time_util::GPS_TIME& time_util::GPS_TIME::operator-=(time_util::GPS_TIME& in) {$/;"	f	class:time_util::GPS_TIME
set_day_of_year	math/src/time_utility.cpp	/^void time_util::UTC_TIME::set_day_of_year(uint32_t year_in, uint32_t doy) {$/;"	f	class:time_util::UTC_TIME
tai_leap_second	math/src/time_utility.cpp	/^uint32_t time_util::Modified_julian_date::tai_leap_second() {$/;"	f	class:time_util::Modified_julian_date
time_fmod	math/src/time_utility.cpp	/^double time_util::time_fmod(double a, double b) {$/;"	f	class:time_util
to_unix	math/src/time_utility.cpp	/^time_t time_util::GPS_TIME::to_unix() {$/;"	f	class:time_util::GPS_TIME
to_unix	math/src/time_utility.cpp	/^time_t time_util::Modified_julian_date::to_unix() {$/;"	f	class:time_util::Modified_julian_date
~CCSDS_CUC	math/src/time_utility.cpp	/^time_util::CCSDS_CUC::~CCSDS_CUC() {}$/;"	f	class:time_util::CCSDS_CUC
~GPS_TIME	math/src/time_utility.cpp	/^time_util::GPS_TIME::~GPS_TIME() {$/;"	f	class:time_util::GPS_TIME
~Modified_julian_date	math/src/time_utility.cpp	/^time_util::Modified_julian_date::~Modified_julian_date() {$/;"	f	class:time_util::Modified_julian_date
~UTC_TIME	math/src/time_utility.cpp	/^time_util::UTC_TIME::~UTC_TIME() {$/;"	f	class:time_util::UTC_TIME
GTEST_DIR	math/unit_test/Makefile	/^GTEST_DIR = ..\/googletest\/googletest$/;"	m
GTEST_HEADERS	math/unit_test/Makefile	/^GTEST_HEADERS = $(GTEST_DIR)\/include\/gtest\/*.h \\$/;"	m
GTEST_SRCS_	math/unit_test/Makefile	/^GTEST_SRCS_ = $(GTEST_DIR)\/src\/*.cc $(GTEST_DIR)\/src\/*.h $(GTEST_HEADERS)$/;"	m
MODELS_DIR	math/unit_test/Makefile	/^MODELS_DIR = ..\/..\/$/;"	m
TESTS	math/unit_test/Makefile	/^TESTS = timeTest mathTest stochasticTest$/;"	m
TEST	math/unit_test/mathTest.cc	/^TEST(mathTest, SignFunction) {$/;"	f
TEST	math/unit_test/stochasticTest.cc	/^TEST(stochasticTest, General) {$/;"	f
TEST	math/unit_test/timeTest.cc	/^TEST(timeTest, GPStoOther) {$/;"	f
TEST	math/unit_test/timeTest.cc	/^TEST(timeTest, JuliantoOther) {$/;"	f
TEST	math/unit_test/timeTest.cc	/^TEST(timeTest, UTCtoOther) {$/;"	f
time_util	math/unit_test/timeTest.cc	/^namespace time_util {$/;"	n	file:
Accelerometer	sensor/include/accel/accelerometer.hh	/^    Accelerometer() : VECTOR_INIT(FSPCB, 3), VECTOR_INIT(EFSPB, 3) {};$/;"	f	class:sensor::Accelerometer
Accelerometer	sensor/include/accel/accelerometer.hh	/^class Accelerometer {$/;"	c	namespace:sensor
EFSPB	sensor/include/accel/accelerometer.hh	/^    arma::vec EFSPB;     \/* *o   (N\/kg)  Error in specific force on body in body coordinate *\/$/;"	m	class:sensor::Accelerometer
FSPCB	sensor/include/accel/accelerometer.hh	/^    arma::vec FSPCB;     \/* *o  (N\/kg)  Computed specific force on body *\/$/;"	m	class:sensor::Accelerometer
_EFSPB	sensor/include/accel/accelerometer.hh	/^    double _EFSPB[3];    \/* *o   (N\/kg)  Error in specific force on body in body coordinate *\/$/;"	m	class:sensor::Accelerometer
_FSPCB	sensor/include/accel/accelerometer.hh	/^    double _FSPCB[3];    \/* *o  (N\/kg)  Computed specific force on body *\/$/;"	m	class:sensor::Accelerometer
__ACCEL_HH__	sensor/include/accel/accelerometer.hh	2;"	d
get_computed_FSPB	sensor/include/accel/accelerometer.hh	/^    virtual arma::vec3 get_computed_FSPB() { return FSPCB; }$/;"	f	class:sensor::Accelerometer
get_error_of_computed_FSPB	sensor/include/accel/accelerometer.hh	/^    virtual arma::vec3 get_error_of_computed_FSPB() { return EFSPB; }$/;"	f	class:sensor::Accelerometer
name	sensor/include/accel/accelerometer.hh	/^    char name[256];$/;"	m	class:sensor::Accelerometer
propagate_error	sensor/include/accel/accelerometer.hh	/^    virtual void propagate_error(double int_step) {}$/;"	f	class:sensor::Accelerometer
sensor	sensor/include/accel/accelerometer.hh	/^namespace sensor {$/;"	n
update_diagnostic_attributes	sensor/include/accel/accelerometer.hh	/^    virtual void update_diagnostic_attributes(double int_step) {}$/;"	f	class:sensor::Accelerometer
~Accelerometer	sensor/include/accel/accelerometer.hh	/^    virtual ~Accelerometer() {}$/;"	f	class:sensor::Accelerometer
AccelerometerIdeal	sensor/include/accel/accelerometer_ideal.hh	/^class AccelerometerIdeal : public Accelerometer {$/;"	c	namespace:sensor
__ACCEL_IDEAL_HH__	sensor/include/accel/accelerometer_ideal.hh	2;"	d
newton	sensor/include/accel/accelerometer_ideal.hh	/^    Newton * newton;$/;"	m	class:sensor::AccelerometerIdeal
sensor	sensor/include/accel/accelerometer_ideal.hh	/^namespace sensor {$/;"	n
~AccelerometerIdeal	sensor/include/accel/accelerometer_ideal.hh	/^    virtual ~AccelerometerIdeal() {}$/;"	f	class:sensor::AccelerometerIdeal
AccelerometerRocket6G	sensor/include/accel/accelerometer_rocket6g.hh	/^class AccelerometerRocket6G : public Accelerometer {$/;"	c	namespace:sensor
BETA	sensor/include/accel/accelerometer_rocket6g.hh	/^    arma::vec BETA;$/;"	m	class:sensor::AccelerometerRocket6G
EBIASA	sensor/include/accel/accelerometer_rocket6g.hh	/^    arma::vec EBIASA;    \/* *o   (m\/s2)  Acceleration bias *\/$/;"	m	class:sensor::AccelerometerRocket6G
EMISA	sensor/include/accel/accelerometer_rocket6g.hh	/^    arma::vec EMISA;     \/* *o   (r)     Acceleration misalignment *\/$/;"	m	class:sensor::AccelerometerRocket6G
ESCALA	sensor/include/accel/accelerometer_rocket6g.hh	/^    arma::vec ESCALA;    \/* *o   (--)    Acceleration scale factor *\/$/;"	m	class:sensor::AccelerometerRocket6G
EWALKA	sensor/include/accel/accelerometer_rocket6g.hh	/^    arma::vec EWALKA;    \/* *o   (m\/s2)  Acceleration random noise *\/$/;"	m	class:sensor::AccelerometerRocket6G
ITA1	sensor/include/accel/accelerometer_rocket6g.hh	/^    arma::vec ITA1;$/;"	m	class:sensor::AccelerometerRocket6G
ITA2	sensor/include/accel/accelerometer_rocket6g.hh	/^    arma::vec ITA2;$/;"	m	class:sensor::AccelerometerRocket6G
_BETA	sensor/include/accel/accelerometer_rocket6g.hh	/^    double _BETA[3];$/;"	m	class:sensor::AccelerometerRocket6G
_EBIASA	sensor/include/accel/accelerometer_rocket6g.hh	/^    double _EBIASA[3];   \/* *o   (m\/s2)  Acceleration bias *\/$/;"	m	class:sensor::AccelerometerRocket6G
_EMISA	sensor/include/accel/accelerometer_rocket6g.hh	/^    double _EMISA[3];    \/* *o   (r)     Acceleration misalignment *\/$/;"	m	class:sensor::AccelerometerRocket6G
_ESCALA	sensor/include/accel/accelerometer_rocket6g.hh	/^    double _ESCALA[3];   \/* *o   (--)    Acceleration scale factor *\/$/;"	m	class:sensor::AccelerometerRocket6G
_EWALKA	sensor/include/accel/accelerometer_rocket6g.hh	/^    double _EWALKA[3];   \/* *o   (m\/s2)  Acceleration random noise *\/$/;"	m	class:sensor::AccelerometerRocket6G
_ITA1	sensor/include/accel/accelerometer_rocket6g.hh	/^    double _ITA1[3];$/;"	m	class:sensor::AccelerometerRocket6G
_ITA2	sensor/include/accel/accelerometer_rocket6g.hh	/^    double _ITA2[3];$/;"	m	class:sensor::AccelerometerRocket6G
__ACCEL_6G_HH__	sensor/include/accel/accelerometer_rocket6g.hh	2;"	d
newton	sensor/include/accel/accelerometer_rocket6g.hh	/^    Newton * newton;$/;"	m	class:sensor::AccelerometerRocket6G
sensor	sensor/include/accel/accelerometer_rocket6g.hh	/^namespace sensor {$/;"	n
~AccelerometerRocket6G	sensor/include/accel/accelerometer_rocket6g.hh	/^    virtual ~AccelerometerRocket6G() {}$/;"	f	class:sensor::AccelerometerRocket6G
MOT_t	sensor/include/gps/gps_emulator.hh	/^struct MOT_t {$/;"	s	namespace:sensor
__EMU_GPS_HH__	sensor/include/gps/gps_emulator.hh	2;"	d
acceleration	sensor/include/gps/gps_emulator.hh	/^    double_xyz_t    acceleration;                   \/* *io  (m\/s2)  Acceleration in X, Y, Z axes *\/$/;"	m	struct:sensor::MOT_t
angular_acceleration	sensor/include/gps/gps_emulator.hh	/^    double_xyz_t    angular_acceleration;           \/* *io  (r\/s2)  Angular acceleration about X, Y, Z body axes *\/$/;"	m	struct:sensor::MOT_t
angular_jerk	sensor/include/gps/gps_emulator.hh	/^    double_xyz_t    angular_jerk;                   \/* *io  (r\/s3)  Angular jerk about X, Y, Z body axes *\/$/;"	m	struct:sensor::MOT_t
angular_velocity	sensor/include/gps/gps_emulator.hh	/^    double_xyz_t    angular_velocity;               \/* *io  (r\/s)   Angular velocity about X, Y, Z body axes *\/$/;"	m	struct:sensor::MOT_t
bank	sensor/include/gps/gps_emulator.hh	/^    double          bank;                           \/* *io  (r)     Bank, range +\/- PI *\/$/;"	m	struct:sensor::MOT_t
double_xyz_t	sensor/include/gps/gps_emulator.hh	/^struct double_xyz_t {$/;"	s	namespace:sensor
elevation	sensor/include/gps/gps_emulator.hh	/^    double          elevation;                      \/* *io  (r)     Elevation, range +\/- PI\/2 *\/$/;"	m	struct:sensor::MOT_t
heading	sensor/include/gps/gps_emulator.hh	/^    double          heading;                        \/* *io  (r)     Heading, range +\/- PI *\/$/;"	m	struct:sensor::MOT_t
jerk	sensor/include/gps/gps_emulator.hh	/^    double_xyz_t    jerk;                           \/* *io  (m\/s3)  Jerk in X, Y, Z axes *\/$/;"	m	struct:sensor::MOT_t
position	sensor/include/gps/gps_emulator.hh	/^    double_xyz_t    position;                       \/* *io  (m)     X, Y, Z position *\/$/;"	m	struct:sensor::MOT_t
sensor	sensor/include/gps/gps_emulator.hh	/^namespace sensor {$/;"	n
timestamp	sensor/include/gps/gps_emulator.hh	/^    double          timestamp;                      \/* *io  (--)    Timestamp *\/$/;"	m	struct:sensor::MOT_t
velocity	sensor/include/gps/gps_emulator.hh	/^    double_xyz_t    velocity;                       \/* *io  (m\/s)   Velocity in X, Y, Z axes *\/$/;"	m	struct:sensor::MOT_t
x	sensor/include/gps/gps_emulator.hh	/^    double x;$/;"	m	struct:sensor::double_xyz_t
y	sensor/include/gps/gps_emulator.hh	/^    double y;$/;"	m	struct:sensor::double_xyz_t
z	sensor/include/gps/gps_emulator.hh	/^    double z;$/;"	m	struct:sensor::double_xyz_t
C_NO_threshold_for_tracking	sensor/include/gps/nspo_gps.hh	/^    uint8_t         C_NO_threshold_for_tracking;    \/* *io  (dB) *\/$/;"	m	struct:sensor::configuration_setup_message_t
ECEF_OP_navigation_and_status	sensor/include/gps/nspo_gps.hh	/^    ECEF_OP_navigation_and_status_t         ECEF_OP_navigation_and_status;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
ECEF_OP_navigation_and_status_t	sensor/include/gps/nspo_gps.hh	/^struct ECEF_OP_navigation_and_status_t {$/;"	s	namespace:sensor
ECEF_navigation_and_status_data	sensor/include/gps/nspo_gps.hh	/^    ECEF_navigation_and_status_data_t       ECEF_navigation_and_status_data;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
ECEF_navigation_and_status_data_t	sensor/include/gps/nspo_gps.hh	/^struct ECEF_navigation_and_status_data_t {$/;"	s	namespace:sensor
GPS_UTC_clock_correction_parameter	sensor/include/gps/nspo_gps.hh	/^    GPS_UTC_clock_correction_parameter_t    GPS_UTC_clock_correction_parameter;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
GPS_UTC_clock_correction_parameter_t	sensor/include/gps/nspo_gps.hh	/^struct GPS_UTC_clock_correction_parameter_t {$/;"	s	namespace:sensor
GPS_time	sensor/include/gps/nspo_gps.hh	/^    uint32_t        GPS_time;                       \/* *io  (ms)    GPS time tag from start of the week *\/$/;"	m	struct:sensor::ECEF_navigation_and_status_data_t
GPS_week_number	sensor/include/gps/nspo_gps.hh	/^    uint16_t        GPS_week_number;                \/* *io  (--)    GPS week number since Epoch *\/$/;"	m	struct:sensor::ECEF_navigation_and_status_data_t
NSPO_GPSR_SCI_TLM_t	sensor/include/gps/nspo_gps.hh	/^struct NSPO_GPSR_SCI_TLM_t {$/;"	s	namespace:sensor
PDOP	sensor/include/gps/nspo_gps.hh	/^    uint16_t        PDOP;                           \/* *io  (one-2) Positon PDOP; Max 32767 *\/$/;"	m	struct:sensor::ECEF_navigation_and_status_data_t
RAIM_threshold	sensor/include/gps/nspo_gps.hh	/^    uint8_t         RAIM_threshold;                 \/* *io  (m) *\/$/;"	m	struct:sensor::configuration_setup_message_t
SNR	sensor/include/gps/nspo_gps.hh	/^    uint8_t         SNR;                            \/* *io  (dB*Hz) SNR *\/$/;"	m	struct:sensor::time_and_channel_status_data_t
SV_ID	sensor/include/gps/nspo_gps.hh	/^    uint8_t         SV_ID;                          \/* *io  (--)    SV ID *\/$/;"	m	struct:sensor::time_and_channel_status_data_t
_0	sensor/include/gps/nspo_gps.hh	/^    uint32_t _0  : 1;$/;"	m	struct:sensor::bitfield_16_t
_0	sensor/include/gps/nspo_gps.hh	/^    uint32_t _0  : 1;$/;"	m	struct:sensor::bitfield_32_t
_1	sensor/include/gps/nspo_gps.hh	/^    uint32_t _1  : 1;$/;"	m	struct:sensor::bitfield_16_t
_1	sensor/include/gps/nspo_gps.hh	/^    uint32_t _1  : 1;$/;"	m	struct:sensor::bitfield_32_t
_10	sensor/include/gps/nspo_gps.hh	/^    uint32_t _10 : 1;$/;"	m	struct:sensor::bitfield_16_t
_10	sensor/include/gps/nspo_gps.hh	/^    uint32_t _10 : 1;$/;"	m	struct:sensor::bitfield_32_t
_11	sensor/include/gps/nspo_gps.hh	/^    uint32_t _11 : 1;$/;"	m	struct:sensor::bitfield_16_t
_11	sensor/include/gps/nspo_gps.hh	/^    uint32_t _11 : 1;$/;"	m	struct:sensor::bitfield_32_t
_12	sensor/include/gps/nspo_gps.hh	/^    uint32_t _12 : 1;$/;"	m	struct:sensor::bitfield_16_t
_12	sensor/include/gps/nspo_gps.hh	/^    uint32_t _12 : 1;$/;"	m	struct:sensor::bitfield_32_t
_13	sensor/include/gps/nspo_gps.hh	/^    uint32_t _13 : 1;$/;"	m	struct:sensor::bitfield_16_t
_13	sensor/include/gps/nspo_gps.hh	/^    uint32_t _13 : 1;$/;"	m	struct:sensor::bitfield_32_t
_14	sensor/include/gps/nspo_gps.hh	/^    uint32_t _14 : 1;$/;"	m	struct:sensor::bitfield_16_t
_14	sensor/include/gps/nspo_gps.hh	/^    uint32_t _14 : 1;$/;"	m	struct:sensor::bitfield_32_t
_15	sensor/include/gps/nspo_gps.hh	/^    uint32_t _15 : 1;$/;"	m	struct:sensor::bitfield_16_t
_15	sensor/include/gps/nspo_gps.hh	/^    uint32_t _15 : 1;$/;"	m	struct:sensor::bitfield_32_t
_16	sensor/include/gps/nspo_gps.hh	/^    uint32_t _16 : 1;$/;"	m	struct:sensor::bitfield_32_t
_17	sensor/include/gps/nspo_gps.hh	/^    uint32_t _17 : 1;$/;"	m	struct:sensor::bitfield_32_t
_18	sensor/include/gps/nspo_gps.hh	/^    uint32_t _18 : 1;$/;"	m	struct:sensor::bitfield_32_t
_19	sensor/include/gps/nspo_gps.hh	/^    uint32_t _19 : 1;$/;"	m	struct:sensor::bitfield_32_t
_2	sensor/include/gps/nspo_gps.hh	/^    uint32_t _2  : 1;$/;"	m	struct:sensor::bitfield_16_t
_2	sensor/include/gps/nspo_gps.hh	/^    uint32_t _2  : 1;$/;"	m	struct:sensor::bitfield_32_t
_20	sensor/include/gps/nspo_gps.hh	/^    uint32_t _20 : 1;$/;"	m	struct:sensor::bitfield_32_t
_21	sensor/include/gps/nspo_gps.hh	/^    uint32_t _21 : 1;$/;"	m	struct:sensor::bitfield_32_t
_22	sensor/include/gps/nspo_gps.hh	/^    uint32_t _22 : 1;$/;"	m	struct:sensor::bitfield_32_t
_23	sensor/include/gps/nspo_gps.hh	/^    uint32_t _23 : 1;$/;"	m	struct:sensor::bitfield_32_t
_24	sensor/include/gps/nspo_gps.hh	/^    uint32_t _24 : 1;$/;"	m	struct:sensor::bitfield_32_t
_25	sensor/include/gps/nspo_gps.hh	/^    uint32_t _25 : 1;$/;"	m	struct:sensor::bitfield_32_t
_26	sensor/include/gps/nspo_gps.hh	/^    uint32_t _26 : 1;$/;"	m	struct:sensor::bitfield_32_t
_27	sensor/include/gps/nspo_gps.hh	/^    uint32_t _27 : 1;$/;"	m	struct:sensor::bitfield_32_t
_28	sensor/include/gps/nspo_gps.hh	/^    uint32_t _28 : 1;$/;"	m	struct:sensor::bitfield_32_t
_29	sensor/include/gps/nspo_gps.hh	/^    uint32_t _29 : 1;$/;"	m	struct:sensor::bitfield_32_t
_3	sensor/include/gps/nspo_gps.hh	/^    uint32_t _3  : 1;$/;"	m	struct:sensor::bitfield_16_t
_3	sensor/include/gps/nspo_gps.hh	/^    uint32_t _3  : 1;$/;"	m	struct:sensor::bitfield_32_t
_30	sensor/include/gps/nspo_gps.hh	/^    uint32_t _30 : 1;$/;"	m	struct:sensor::bitfield_32_t
_31	sensor/include/gps/nspo_gps.hh	/^    uint32_t _31 : 1;$/;"	m	struct:sensor::bitfield_32_t
_4	sensor/include/gps/nspo_gps.hh	/^    uint32_t _4  : 1;$/;"	m	struct:sensor::bitfield_16_t
_4	sensor/include/gps/nspo_gps.hh	/^    uint32_t _4  : 1;$/;"	m	struct:sensor::bitfield_32_t
_5	sensor/include/gps/nspo_gps.hh	/^    uint32_t _5  : 1;$/;"	m	struct:sensor::bitfield_16_t
_5	sensor/include/gps/nspo_gps.hh	/^    uint32_t _5  : 1;$/;"	m	struct:sensor::bitfield_32_t
_6	sensor/include/gps/nspo_gps.hh	/^    uint32_t _6  : 1;$/;"	m	struct:sensor::bitfield_16_t
_6	sensor/include/gps/nspo_gps.hh	/^    uint32_t _6  : 1;$/;"	m	struct:sensor::bitfield_32_t
_7	sensor/include/gps/nspo_gps.hh	/^    uint32_t _7  : 1;$/;"	m	struct:sensor::bitfield_16_t
_7	sensor/include/gps/nspo_gps.hh	/^    uint32_t _7  : 1;$/;"	m	struct:sensor::bitfield_32_t
_8	sensor/include/gps/nspo_gps.hh	/^    uint32_t _8  : 1;$/;"	m	struct:sensor::bitfield_16_t
_8	sensor/include/gps/nspo_gps.hh	/^    uint32_t _8  : 1;$/;"	m	struct:sensor::bitfield_32_t
_9	sensor/include/gps/nspo_gps.hh	/^    uint32_t _9  : 1;$/;"	m	struct:sensor::bitfield_16_t
_9	sensor/include/gps/nspo_gps.hh	/^    uint32_t _9  : 1;$/;"	m	struct:sensor::bitfield_32_t
__NSPO_GPS_HH__	sensor/include/gps/nspo_gps.hh	2;"	d
azimuth	sensor/include/gps/nspo_gps.hh	/^    int16_t         azimuth;                        \/* *io  (d)     Azimuth (0 ~ 360) *\/$/;"	m	struct:sensor::time_and_channel_status_data_t
bitfield_16_t	sensor/include/gps/nspo_gps.hh	/^struct bitfield_16_t {$/;"	s	namespace:sensor
bitfield_32_t	sensor/include/gps/nspo_gps.hh	/^struct bitfield_32_t {$/;"	s	namespace:sensor
channel_1	sensor/include/gps/nspo_gps.hh	/^    time_and_channel_status_data_t          channel_1;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
channel_10	sensor/include/gps/nspo_gps.hh	/^    time_and_channel_status_data_t          channel_10;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
channel_11	sensor/include/gps/nspo_gps.hh	/^    time_and_channel_status_data_t          channel_11;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
channel_12	sensor/include/gps/nspo_gps.hh	/^    time_and_channel_status_data_t          channel_12;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
channel_2	sensor/include/gps/nspo_gps.hh	/^    time_and_channel_status_data_t          channel_2;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
channel_3	sensor/include/gps/nspo_gps.hh	/^    time_and_channel_status_data_t          channel_3;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
channel_4	sensor/include/gps/nspo_gps.hh	/^    time_and_channel_status_data_t          channel_4;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
channel_5	sensor/include/gps/nspo_gps.hh	/^    time_and_channel_status_data_t          channel_5;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
channel_6	sensor/include/gps/nspo_gps.hh	/^    time_and_channel_status_data_t          channel_6;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
channel_7	sensor/include/gps/nspo_gps.hh	/^    time_and_channel_status_data_t          channel_7;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
channel_8	sensor/include/gps/nspo_gps.hh	/^    time_and_channel_status_data_t          channel_8;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
channel_9	sensor/include/gps/nspo_gps.hh	/^    time_and_channel_status_data_t          channel_9;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
clock_bias	sensor/include/gps/nspo_gps.hh	/^    int64_t         clock_bias;                     \/* *io  (s-12)  Device clock bias *\/$/;"	m	struct:sensor::ECEF_navigation_and_status_data_t
configuration_setup_message	sensor/include/gps/nspo_gps.hh	/^    configuration_setup_message_t           configuration_setup_message;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
configuration_setup_message_t	sensor/include/gps/nspo_gps.hh	/^struct configuration_setup_message_t {$/;"	s	namespace:sensor
delay	sensor/include/gps/nspo_gps.hh	/^    uint32_t        delay;                          \/* *io  (m)     pseudo delay (0 ~ 30,000,000) *\/$/;"	m	struct:sensor::time_and_channel_status_data_t
delta_t_LS	sensor/include/gps/nspo_gps.hh	/^    uint16_t        delta_t_LS;                     \/* *io  (s)     Delta time due to leap seconds *\/$/;"	m	struct:sensor::GPS_UTC_clock_correction_parameter_t
doopler	sensor/include/gps/nspo_gps.hh	/^    int32_t         doopler;                        \/* *io  (--)    Doppler  (-60000 ~ 60000)*\/$/;"	m	struct:sensor::time_and_channel_status_data_t
elevation	sensor/include/gps/nspo_gps.hh	/^    int16_t         elevation;                      \/* *io  (d)     Elevation (-90 ~ 90) *\/$/;"	m	struct:sensor::time_and_channel_status_data_t
elevation_mask	sensor/include/gps/nspo_gps.hh	/^    int16_t         elevation_mask;                 \/* *io  (d)     Satellite elevation mask (-90 ~ +90) *\/$/;"	m	struct:sensor::configuration_setup_message_t
float_xyz_t	sensor/include/gps/nspo_gps.hh	/^struct float_xyz_t {$/;"	s	namespace:sensor
health_of_satellites_map	sensor/include/gps/nspo_gps.hh	/^    bitfield_32_t   health_of_satellites_map;       \/* *io  (--)    If bit n set, (n + 1) satellite is healthy *\/$/;"	m	struct:sensor::ECEF_navigation_and_status_data_t
nav_status	sensor/include/gps/nspo_gps.hh	/^    bitfield_16_t   nav_status;                     \/* *io  (--)    See Technical Manual *\/$/;"	m	struct:sensor::ECEF_OP_navigation_and_status_t
oscillator_offset	sensor/include/gps/nspo_gps.hh	/^    int32_t         oscillator_offset;              \/* *io  (--)    Device oscillator offset *\/$/;"	m	struct:sensor::ECEF_navigation_and_status_data_t
phase	sensor/include/gps/nspo_gps.hh	/^    uint16_t        phase;                          \/* *io  (d)     carrier phase (0 ~ 360) *\/$/;"	m	struct:sensor::time_and_channel_status_data_t
pos	sensor/include/gps/nspo_gps.hh	/^    float_xyz_t     pos;                            \/* *io  (m)     Host vehicle position in ECEF frame *\/$/;"	m	struct:sensor::ECEF_navigation_and_status_data_t
pos	sensor/include/gps/nspo_gps.hh	/^    float_xyz_t     pos;                            \/* *io  (m)     position *\/$/;"	m	struct:sensor::time_and_channel_status_data_t
position	sensor/include/gps/nspo_gps.hh	/^    uint16_t        position;                       \/* *io  (--)    code position (0 ~ 8184) *\/$/;"	m	struct:sensor::time_and_channel_status_data_t
reserved_0	sensor/include/gps/nspo_gps.hh	/^    float                                   reserved_0;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
reserved_1	sensor/include/gps/nspo_gps.hh	/^    float                                   reserved_1;$/;"	m	struct:sensor::NSPO_GPSR_SCI_TLM_t
sensor	sensor/include/gps/nspo_gps.hh	/^namespace sensor {$/;"	n
time_and_channel_status_data_t	sensor/include/gps/nspo_gps.hh	/^struct time_and_channel_status_data_t {$/;"	s	namespace:sensor
time_shift	sensor/include/gps/nspo_gps.hh	/^    float           time_shift;                     \/* *io  (s)     time shift *\/$/;"	m	struct:sensor::time_and_channel_status_data_t
validity	sensor/include/gps/nspo_gps.hh	/^    uint16_t        validity;                       \/* *io  (--)    Navigation data vaild? 0:invalid, 1:valid *\/$/;"	m	struct:sensor::ECEF_navigation_and_status_data_t
vel	sensor/include/gps/nspo_gps.hh	/^    float_xyz_t     vel;                            \/* *io  (m\/s)   Host vehicle velocity in ECEF frame *\/$/;"	m	struct:sensor::ECEF_navigation_and_status_data_t
vel	sensor/include/gps/nspo_gps.hh	/^    float_xyz_t     vel;                            \/* *io  (m\/s)   velocity *\/$/;"	m	struct:sensor::time_and_channel_status_data_t
visibility_of_satellites_map	sensor/include/gps/nspo_gps.hh	/^    bitfield_32_t   visibility_of_satellites_map;   \/* *io  (--)    If bit n set, (n + 1) satellite is visible *\/$/;"	m	struct:sensor::ECEF_navigation_and_status_data_t
x	sensor/include/gps/nspo_gps.hh	/^    float x;$/;"	m	struct:sensor::float_xyz_t
y	sensor/include/gps/nspo_gps.hh	/^    float y;$/;"	m	struct:sensor::float_xyz_t
z	sensor/include/gps/nspo_gps.hh	/^    float z;$/;"	m	struct:sensor::float_xyz_t
EWBIB	sensor/include/gyro/gyro.hh	/^    arma::vec EWBIB;     \/* *o  (r\/s)   Error in angular vel of body wrt earth *\/$/;"	m	class:sensor::Gyro
Gyro	sensor/include/gyro/gyro.hh	/^    Gyro() : VECTOR_INIT(EWBIB, 3), VECTOR_INIT(WBICB, 3), VECTOR_INIT(HIGH, 3), VECTOR_INIT(LOW, 3) {};$/;"	f	class:sensor::Gyro
Gyro	sensor/include/gyro/gyro.hh	/^class Gyro {$/;"	c	namespace:sensor
HIGH	sensor/include/gyro/gyro.hh	/^    arma::vec HIGH;$/;"	m	class:sensor::Gyro
LOW	sensor/include/gyro/gyro.hh	/^    arma::vec LOW;$/;"	m	class:sensor::Gyro
WBICB	sensor/include/gyro/gyro.hh	/^    arma::vec WBICB;     \/* *o  (r\/s)   Computed inertial body rate in body coordinate *\/$/;"	m	class:sensor::Gyro
_EWBIB	sensor/include/gyro/gyro.hh	/^    double _EWBIB[3];    \/* *o  (r\/s)   Error in angular vel of body wrt earth *\/$/;"	m	class:sensor::Gyro
_HIGH	sensor/include/gyro/gyro.hh	/^    double _HIGH[3];$/;"	m	class:sensor::Gyro
_LOW	sensor/include/gyro/gyro.hh	/^    double _LOW[3];$/;"	m	class:sensor::Gyro
_WBICB	sensor/include/gyro/gyro.hh	/^    double _WBICB[3];    \/* *o  (r\/s)   Computed inertial body rate in body coordinate *\/$/;"	m	class:sensor::Gyro
__GYRO_HH__	sensor/include/gyro/gyro.hh	2;"	d
get_HIGH	sensor/include/gyro/gyro.hh	/^    virtual arma::vec3 get_HIGH() { return HIGH; }$/;"	f	class:sensor::Gyro
get_LOW	sensor/include/gyro/gyro.hh	/^    virtual arma::vec3 get_LOW() { return LOW; }$/;"	f	class:sensor::Gyro
get_computed_WBIB	sensor/include/gyro/gyro.hh	/^    virtual arma::vec3 get_computed_WBIB() { return WBICB; }$/;"	f	class:sensor::Gyro
get_error_of_computed_WBIB	sensor/include/gyro/gyro.hh	/^    virtual arma::vec3 get_error_of_computed_WBIB() { return EWBIB; }$/;"	f	class:sensor::Gyro
get_ppcx	sensor/include/gyro/gyro.hh	/^    virtual double get_ppcx() { return WBICB(0) * DEG; }$/;"	f	class:sensor::Gyro
get_qqcx	sensor/include/gyro/gyro.hh	/^    virtual double get_qqcx() { return WBICB(1) * DEG; }$/;"	f	class:sensor::Gyro
get_rrcx	sensor/include/gyro/gyro.hh	/^    virtual double get_rrcx() { return WBICB(2) * DEG; }$/;"	f	class:sensor::Gyro
name	sensor/include/gyro/gyro.hh	/^    char name[256];$/;"	m	class:sensor::Gyro
ppcx	sensor/include/gyro/gyro.hh	/^    double ppcx;        \/* *o  (d\/s)   INS computed roll rate *\/$/;"	m	class:sensor::Gyro
propagate_error	sensor/include/gyro/gyro.hh	/^    virtual void propagate_error(double int_step) {}$/;"	f	class:sensor::Gyro
qqcx	sensor/include/gyro/gyro.hh	/^    double qqcx;        \/* *o  (d\/s)   INS computed pitch rate *\/$/;"	m	class:sensor::Gyro
rrcx	sensor/include/gyro/gyro.hh	/^    double rrcx;        \/* *o  (d\/s)   INS computed yaw rate *\/$/;"	m	class:sensor::Gyro
sensor	sensor/include/gyro/gyro.hh	/^namespace sensor {$/;"	n
update_diagnostic_attributes	sensor/include/gyro/gyro.hh	/^    virtual void update_diagnostic_attributes(double int_step) {$/;"	f	class:sensor::Gyro
~Gyro	sensor/include/gyro/gyro.hh	/^    virtual ~Gyro() {}$/;"	f	class:sensor::Gyro
GyroIdeal	sensor/include/gyro/gyro_ideal.hh	/^class GyroIdeal : public Gyro {$/;"	c	namespace:sensor
__GYRO_IDEAL_HH__	sensor/include/gyro/gyro_ideal.hh	2;"	d
euler	sensor/include/gyro/gyro_ideal.hh	/^    _Euler_ * euler;$/;"	m	class:sensor::GyroIdeal
sensor	sensor/include/gyro/gyro_ideal.hh	/^namespace sensor {$/;"	n
~GyroIdeal	sensor/include/gyro/gyro_ideal.hh	/^    virtual ~GyroIdeal() {}$/;"	f	class:sensor::GyroIdeal
BETA	sensor/include/gyro/gyro_rocket6g.hh	/^    arma::vec BETA;$/;"	m	class:sensor::GyroRocket6G
EBIASG	sensor/include/gyro/gyro_rocket6g.hh	/^    arma::vec EBIASG;    \/* *o   (r\/s)    Gyro bias *\/$/;"	m	class:sensor::GyroRocket6G
EMISG	sensor/include/gyro/gyro_rocket6g.hh	/^    arma::vec EMISG;     \/* *o   (r)      Gyro misalignmt *\/$/;"	m	class:sensor::GyroRocket6G
ESCALG	sensor/include/gyro/gyro_rocket6g.hh	/^    arma::vec ESCALG;    \/* *o   (--)     Gyro scale factor *\/$/;"	m	class:sensor::GyroRocket6G
EUG	sensor/include/gyro/gyro_rocket6g.hh	/^    arma::vec EUG;       \/* *o   (r\/s)    Gyro spin axis accel sensitivity *\/$/;"	m	class:sensor::GyroRocket6G
EUNBG	sensor/include/gyro/gyro_rocket6g.hh	/^    arma::vec EUNBG;     \/* *o   (r)      Gyro cluster misalignment *\/$/;"	m	class:sensor::GyroRocket6G
EWALKG	sensor/include/gyro/gyro_rocket6g.hh	/^    arma::vec EWALKG;    \/* *o   (r\/s0.5) Random walk *\/$/;"	m	class:sensor::GyroRocket6G
EWG	sensor/include/gyro/gyro_rocket6g.hh	/^    arma::vec EWG;       \/* *o   (r\/s)    Gyro random walk errors *\/$/;"	m	class:sensor::GyroRocket6G
GyroRocket6G	sensor/include/gyro/gyro_rocket6g.hh	/^class GyroRocket6G : public Gyro {$/;"	c	namespace:sensor
ITA1	sensor/include/gyro/gyro_rocket6g.hh	/^    arma::vec ITA1;$/;"	m	class:sensor::GyroRocket6G
ITA2	sensor/include/gyro/gyro_rocket6g.hh	/^    arma::vec ITA2;$/;"	m	class:sensor::GyroRocket6G
_BETA	sensor/include/gyro/gyro_rocket6g.hh	/^    double _BETA[3];$/;"	m	class:sensor::GyroRocket6G
_EBIASG	sensor/include/gyro/gyro_rocket6g.hh	/^    double _EBIASG[3];   \/* *o   (r\/s)    Gyro bias *\/$/;"	m	class:sensor::GyroRocket6G
_EMISG	sensor/include/gyro/gyro_rocket6g.hh	/^    double _EMISG[3];    \/* *o   (r)      Gyro misalignmt *\/$/;"	m	class:sensor::GyroRocket6G
_ESCALG	sensor/include/gyro/gyro_rocket6g.hh	/^    double _ESCALG[3];   \/* *o   (--)     Gyro scale factor *\/$/;"	m	class:sensor::GyroRocket6G
_EUG	sensor/include/gyro/gyro_rocket6g.hh	/^    double _EUG[3];      \/* *o   (r\/s)    Gyro spin axis accel sensitivity *\/$/;"	m	class:sensor::GyroRocket6G
_EUNBG	sensor/include/gyro/gyro_rocket6g.hh	/^    double _EUNBG[3];    \/* *o   (r)      Gyro cluster misalignment *\/$/;"	m	class:sensor::GyroRocket6G
_EWALKG	sensor/include/gyro/gyro_rocket6g.hh	/^    double _EWALKG[3];   \/* *o   (r\/s0.5) Random walk *\/$/;"	m	class:sensor::GyroRocket6G
_EWG	sensor/include/gyro/gyro_rocket6g.hh	/^    double _EWG[3];      \/* *o   (r\/s)    Gyro random walk errors *\/$/;"	m	class:sensor::GyroRocket6G
_ITA1	sensor/include/gyro/gyro_rocket6g.hh	/^    double _ITA1[3];$/;"	m	class:sensor::GyroRocket6G
_ITA2	sensor/include/gyro/gyro_rocket6g.hh	/^    double _ITA2[3];$/;"	m	class:sensor::GyroRocket6G
__GYRO_ROCKET6G_HH__	sensor/include/gyro/gyro_rocket6g.hh	2;"	d
euler	sensor/include/gyro/gyro_rocket6g.hh	/^    _Euler_    * euler;$/;"	m	class:sensor::GyroRocket6G
generator	sensor/include/gyro/gyro_rocket6g.hh	/^    std::default_random_engine generator;$/;"	m	class:sensor::GyroRocket6G
kinematics	sensor/include/gyro/gyro_rocket6g.hh	/^    Kinematics * kinematics;$/;"	m	class:sensor::GyroRocket6G
newton	sensor/include/gyro/gyro_rocket6g.hh	/^    Newton     * newton;$/;"	m	class:sensor::GyroRocket6G
sensor	sensor/include/gyro/gyro_rocket6g.hh	/^namespace sensor {$/;"	n
~GyroRocket6G	sensor/include/gyro/gyro_rocket6g.hh	/^    virtual ~GyroRocket6G() {}$/;"	f	class:sensor::GyroRocket6G
IMU_filtered_data_t	sensor/include/imu/imu_interface.hh	/^struct IMU_filtered_data_t {$/;"	s	namespace:sensor
__IMU_INTERFACE_HH__	sensor/include/imu/imu_interface.hh	2;"	d
q1	sensor/include/imu/imu_interface.hh	/^    int32_t q1;$/;"	m	struct:sensor::IMU_filtered_data_t
q10	sensor/include/imu/imu_interface.hh	/^    int32_t q10;$/;"	m	struct:sensor::IMU_filtered_data_t
q11	sensor/include/imu/imu_interface.hh	/^    int32_t q11;$/;"	m	struct:sensor::IMU_filtered_data_t
q12	sensor/include/imu/imu_interface.hh	/^    int32_t q12;$/;"	m	struct:sensor::IMU_filtered_data_t
q2	sensor/include/imu/imu_interface.hh	/^    int32_t q2;$/;"	m	struct:sensor::IMU_filtered_data_t
q3	sensor/include/imu/imu_interface.hh	/^    int32_t q3;$/;"	m	struct:sensor::IMU_filtered_data_t
q4	sensor/include/imu/imu_interface.hh	/^    int32_t q4;$/;"	m	struct:sensor::IMU_filtered_data_t
q5	sensor/include/imu/imu_interface.hh	/^    int32_t q5;$/;"	m	struct:sensor::IMU_filtered_data_t
q6	sensor/include/imu/imu_interface.hh	/^    int32_t q6;$/;"	m	struct:sensor::IMU_filtered_data_t
q7	sensor/include/imu/imu_interface.hh	/^    int32_t q7;$/;"	m	struct:sensor::IMU_filtered_data_t
q8	sensor/include/imu/imu_interface.hh	/^    int32_t q8;$/;"	m	struct:sensor::IMU_filtered_data_t
q9	sensor/include/imu/imu_interface.hh	/^    int32_t q9;$/;"	m	struct:sensor::IMU_filtered_data_t
r1	sensor/include/imu/imu_interface.hh	/^    int32_t r1;$/;"	m	struct:sensor::IMU_filtered_data_t
r10	sensor/include/imu/imu_interface.hh	/^    int32_t r10;$/;"	m	struct:sensor::IMU_filtered_data_t
r11	sensor/include/imu/imu_interface.hh	/^    int32_t r11;$/;"	m	struct:sensor::IMU_filtered_data_t
r12	sensor/include/imu/imu_interface.hh	/^    int32_t r12;$/;"	m	struct:sensor::IMU_filtered_data_t
r2	sensor/include/imu/imu_interface.hh	/^    int32_t r2;$/;"	m	struct:sensor::IMU_filtered_data_t
r3	sensor/include/imu/imu_interface.hh	/^    int32_t r3;$/;"	m	struct:sensor::IMU_filtered_data_t
r4	sensor/include/imu/imu_interface.hh	/^    int32_t r4;$/;"	m	struct:sensor::IMU_filtered_data_t
r5	sensor/include/imu/imu_interface.hh	/^    int32_t r5;$/;"	m	struct:sensor::IMU_filtered_data_t
r6	sensor/include/imu/imu_interface.hh	/^    int32_t r6;$/;"	m	struct:sensor::IMU_filtered_data_t
r7	sensor/include/imu/imu_interface.hh	/^    int32_t r7;$/;"	m	struct:sensor::IMU_filtered_data_t
r8	sensor/include/imu/imu_interface.hh	/^    int32_t r8;$/;"	m	struct:sensor::IMU_filtered_data_t
r9	sensor/include/imu/imu_interface.hh	/^    int32_t r9;$/;"	m	struct:sensor::IMU_filtered_data_t
sensor	sensor/include/imu/imu_interface.hh	/^namespace sensor {$/;"	n
ProAxeSE_data_t	sensor/include/rate_table/proaxese.hh	/^struct ProAxeSE_data_t {$/;"	s	namespace:sensor
__PROAXESE_INTERFACE_HH__	sensor/include/rate_table/proaxese.hh	2;"	d
int32_xyz_t	sensor/include/rate_table/proaxese.hh	/^struct int32_xyz_t {$/;"	s	namespace:sensor
rate	sensor/include/rate_table/proaxese.hh	/^    int32_xyz_t    rate;            \/* *io  (r\/s)     X, Y, Z Rate *\/$/;"	m	struct:sensor::ProAxeSE_data_t
sensor	sensor/include/rate_table/proaxese.hh	/^namespace sensor {$/;"	n
x	sensor/include/rate_table/proaxese.hh	/^    int32_t x;$/;"	m	struct:sensor::int32_xyz_t
y	sensor/include/rate_table/proaxese.hh	/^    int32_t y;$/;"	m	struct:sensor::int32_xyz_t
z	sensor/include/rate_table/proaxese.hh	/^    int32_t z;$/;"	m	struct:sensor::int32_xyz_t
DELTA_VEL	sensor/include/sdt/SDT.hh	/^    arma::vec DELTA_VEL;    \/* *o (m\/s)     Delta V *\/$/;"	m	class:SDT
PHI	sensor/include/sdt/SDT.hh	/^    arma::vec PHI;          \/* *o (r)       PHI = DELTA_ALPHA + 0.5 * DELTA_BETA *\/$/;"	m	class:SDT
PHI_HIGH	sensor/include/sdt/SDT.hh	/^    arma::vec PHI_HIGH;$/;"	m	class:SDT
PHI_LOW	sensor/include/sdt/SDT.hh	/^    arma::vec PHI_LOW;$/;"	m	class:SDT
SDT	sensor/include/sdt/SDT.hh	/^    SDT() :         VECTOR_INIT(PHI, 3), VECTOR_INIT(DELTA_VEL, 3), VECTOR_INIT(PHI_HIGH, 3), VECTOR_INIT(PHI_LOW, 3) {};$/;"	f	class:SDT
SDT	sensor/include/sdt/SDT.hh	/^class SDT {$/;"	c
_DELTA_VEL	sensor/include/sdt/SDT.hh	/^    double _DELTA_VEL[3];   \/* *o (m\/s)     Delta V *\/$/;"	m	class:SDT
_PHI	sensor/include/sdt/SDT.hh	/^    double _PHI[3];          \/* *o (r)       PHI = DELTA_ALPHA + 0.5 * DELTA_BETA *\/$/;"	m	class:SDT
_PHI_HIGH	sensor/include/sdt/SDT.hh	/^    double _PHI_HIGH[3];$/;"	m	class:SDT
_PHI_LOW	sensor/include/sdt/SDT.hh	/^    double _PHI_LOW[3];$/;"	m	class:SDT
__SDT_HH	sensor/include/sdt/SDT.hh	2;"	d
build_321_rotation_matrix	sensor/include/sdt/SDT.hh	/^    virtual arma::mat33 build_321_rotation_matrix(arma::vec3 angle) {}$/;"	f	class:SDT
compute	sensor/include/sdt/SDT.hh	/^    virtual void compute(double int_step) {}$/;"	f	class:SDT
get_DELTA_VEL	sensor/include/sdt/SDT.hh	/^    virtual arma::vec3 get_DELTA_VEL() { return DELTA_VEL; }$/;"	f	class:SDT
get_PHI	sensor/include/sdt/SDT.hh	/^    virtual arma::vec3 get_PHI() { return PHI; }$/;"	f	class:SDT
get_PHI_HIGH	sensor/include/sdt/SDT.hh	/^    virtual arma::vec3 get_PHI_HIGH() { return PHI_HIGH; }$/;"	f	class:SDT
get_PHI_LOW	sensor/include/sdt/SDT.hh	/^    virtual arma::vec3 get_PHI_LOW() { return PHI_LOW; }$/;"	f	class:SDT
grab_CONING	sensor/include/sdt/SDT.hh	/^    std::function<arma::vec3()> grab_CONING;$/;"	m	class:SDT
grab_FSPCB	sensor/include/sdt/SDT.hh	/^    std::function<arma::vec3()> grab_FSPCB;$/;"	m	class:SDT
grab_HIGH	sensor/include/sdt/SDT.hh	/^    std::function<arma::vec3()> grab_HIGH;$/;"	m	class:SDT
grab_LOW	sensor/include/sdt/SDT.hh	/^    std::function<arma::vec3()> grab_LOW;$/;"	m	class:SDT
grab_WBICB	sensor/include/sdt/SDT.hh	/^    std::function<arma::vec3()> grab_WBICB;$/;"	m	class:SDT
~SDT	sensor/include/sdt/SDT.hh	/^    virtual ~SDT() {};$/;"	f	class:SDT
ALPHA	sensor/include/sdt/SDT_IDEAL.hh	/^    arma::vec ALPHA;        \/* *o (r)       Alpha *\/$/;"	m	class:SDT_ideal
BETA	sensor/include/sdt/SDT_IDEAL.hh	/^    arma::vec BETA;         \/* *o (r)       Beta *\/$/;"	m	class:SDT_ideal
DELTA_ALPHA	sensor/include/sdt/SDT_IDEAL.hh	/^    arma::vec DELTA_ALPHA;  \/* *o  (r)      Delta theta *\/$/;"	m	class:SDT_ideal
DELTA_ALPHA_old	sensor/include/sdt/SDT_IDEAL.hh	/^    arma::vec DELTA_ALPHA_old;  \/* *o (r)   Delta theta (previous time step) *\/$/;"	m	class:SDT_ideal
DELTA_BETA	sensor/include/sdt/SDT_IDEAL.hh	/^    arma::vec DELTA_BETA;   \/* *o (r)       Delta beta *\/$/;"	m	class:SDT_ideal
FSPSB	sensor/include/sdt/SDT_IDEAL.hh	/^    arma::vec FSPSB;        \/* *o (m\/s2)    Specific force of body frame sensed by accelerometer *\/$/;"	m	class:SDT_ideal
FSPSB_old	sensor/include/sdt/SDT_IDEAL.hh	/^    arma::vec FSPSB_old;$/;"	m	class:SDT_ideal
SDT_ideal	sensor/include/sdt/SDT_IDEAL.hh	/^class SDT_ideal : public SDT {$/;"	c
VEL	sensor/include/sdt/SDT_IDEAL.hh	/^    arma::vec VEL;$/;"	m	class:SDT_ideal
WBISB	sensor/include/sdt/SDT_IDEAL.hh	/^    arma::vec WBISB;        \/* *o  (r\/s)    Angular rate of body frame relative inertial frame as described in body frame sensed by gyro *\/$/;"	m	class:SDT_ideal
WBISB_old	sensor/include/sdt/SDT_IDEAL.hh	/^    arma::vec WBISB_old;    \/* *o  (r\/s)    Angular rate of body frame relative inertial frame as described in body frame (previous time step) *\/$/;"	m	class:SDT_ideal
_ALPHA	sensor/include/sdt/SDT_IDEAL.hh	/^    double _ALPHA[3];       \/* *o (r)       Alpha *\/$/;"	m	class:SDT_ideal
_BETA	sensor/include/sdt/SDT_IDEAL.hh	/^    double _BETA[3];        \/* *o (r)       Beta *\/$/;"	m	class:SDT_ideal
_DELTA_ALPHA	sensor/include/sdt/SDT_IDEAL.hh	/^    double _DELTA_ALPHA[3]; \/* *o  (r)      Delta theta *\/$/;"	m	class:SDT_ideal
_DELTA_ALPHA_old	sensor/include/sdt/SDT_IDEAL.hh	/^    double _DELTA_ALPHA_old[3]; \/* *o (r)   Delta theta (previous time step) *\/$/;"	m	class:SDT_ideal
_DELTA_BETA	sensor/include/sdt/SDT_IDEAL.hh	/^    double _DELTA_BETA[3];  \/* *o (r)       Delta beta *\/$/;"	m	class:SDT_ideal
_FSPSB	sensor/include/sdt/SDT_IDEAL.hh	/^    double _FSPSB[3];       \/* *o (m\/s2)    Specific force of body frame sensed by accelerometer *\/$/;"	m	class:SDT_ideal
_FSPSB_old	sensor/include/sdt/SDT_IDEAL.hh	/^    double _FSPSB_old[3];$/;"	m	class:SDT_ideal
_VEL	sensor/include/sdt/SDT_IDEAL.hh	/^    double _VEL[3];$/;"	m	class:SDT_ideal
_WBISB	sensor/include/sdt/SDT_IDEAL.hh	/^    double _WBISB[3];       \/* *o  (r\/s)    Angular rate of body frame relative inertial frame as described in body frame sensed by gyro *\/$/;"	m	class:SDT_ideal
_WBISB_old	sensor/include/sdt/SDT_IDEAL.hh	/^    double _WBISB_old[3];   \/* *o  (r\/s)    Angular rate of body frame relative inertial frame as described in body frame (previous time step) *\/$/;"	m	class:SDT_ideal
__SDT_IDEAL_HH	sensor/include/sdt/SDT_IDEAL.hh	2;"	d
_cross2_old	sensor/include/sdt/SDT_IDEAL.hh	/^    double _cross2_old[3];$/;"	m	class:SDT_ideal
_cross3_old	sensor/include/sdt/SDT_IDEAL.hh	/^    double _cross3_old[3];$/;"	m	class:SDT_ideal
_sculling_old	sensor/include/sdt/SDT_IDEAL.hh	/^    double _sculling_old[3];$/;"	m	class:SDT_ideal
cross2_old	sensor/include/sdt/SDT_IDEAL.hh	/^    arma::vec cross2_old;$/;"	m	class:SDT_ideal
cross3_old	sensor/include/sdt/SDT_IDEAL.hh	/^    arma::vec cross3_old;$/;"	m	class:SDT_ideal
k	sensor/include/sdt/SDT_IDEAL.hh	/^    unsigned int k;         \/* *o (--)      calculate index *\/$/;"	m	class:SDT_ideal
sculling_old	sensor/include/sdt/SDT_IDEAL.hh	/^    arma::vec sculling_old;$/;"	m	class:SDT_ideal
ALPHA	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec ALPHA;        \/* *o (r)       Alpha *\/$/;"	m	class:SDT_NONIDEAL
BETA	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec BETA;         \/* *o (r)       Beta *\/$/;"	m	class:SDT_NONIDEAL
DELTA_ALPHA	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec DELTA_ALPHA;  \/* *o  (r)      Delta theta *\/$/;"	m	class:SDT_NONIDEAL
DELTA_ALPHA_old	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec DELTA_ALPHA_old;  \/* *o (r)   Delta theta (previous time step) *\/$/;"	m	class:SDT_NONIDEAL
DELTA_BETA	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec DELTA_BETA;   \/* *o (r)       Delta beta *\/$/;"	m	class:SDT_NONIDEAL
FSPSB	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec FSPSB;        \/* *o (m\/s2)    Specific force of body frame sensed by accelerometer *\/$/;"	m	class:SDT_NONIDEAL
FSPSB_old	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec FSPSB_old;$/;"	m	class:SDT_NONIDEAL
PHI_HIGH_OLD	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec PHI_HIGH_OLD;$/;"	m	class:SDT_NONIDEAL
PHI_LOW_OLD	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec PHI_LOW_OLD;$/;"	m	class:SDT_NONIDEAL
SDT_NONIDEAL	sensor/include/sdt/SDT_NONIDEAL.hh	/^class SDT_NONIDEAL : public SDT{$/;"	c
VEL	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec VEL;$/;"	m	class:SDT_NONIDEAL
WBISB	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec WBISB;        \/* *o  (r\/s)    Angular rate of body frame relative inertial frame as described in body frame sensed by gyro *\/$/;"	m	class:SDT_NONIDEAL
WBISB_old	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec WBISB_old;    \/* *o  (r\/s)    Angular rate of body frame relative inertial frame as described in body frame (previous time step) *\/$/;"	m	class:SDT_NONIDEAL
_ALPHA	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _ALPHA[3];       \/* *o (r)       Alpha *\/$/;"	m	class:SDT_NONIDEAL
_BETA	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _BETA[3];        \/* *o (r)       Beta *\/$/;"	m	class:SDT_NONIDEAL
_DELTA_ALPHA	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _DELTA_ALPHA[3]; \/* *o  (r)      Delta theta *\/$/;"	m	class:SDT_NONIDEAL
_DELTA_ALPHA_old	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _DELTA_ALPHA_old[3]; \/* *o (r)   Delta theta (previous time step) *\/$/;"	m	class:SDT_NONIDEAL
_DELTA_BETA	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _DELTA_BETA[3];  \/* *o (r)       Delta beta *\/$/;"	m	class:SDT_NONIDEAL
_FSPSB	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _FSPSB[3];       \/* *o (m\/s2)    Specific force of body frame sensed by accelerometer *\/$/;"	m	class:SDT_NONIDEAL
_FSPSB_old	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _FSPSB_old[3];$/;"	m	class:SDT_NONIDEAL
_PHI_HIGH_OLD	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _PHI_HIGH_OLD[3];$/;"	m	class:SDT_NONIDEAL
_PHI_LOW_OLD	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _PHI_LOW_OLD[3];$/;"	m	class:SDT_NONIDEAL
_VEL	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _VEL[3];$/;"	m	class:SDT_NONIDEAL
_WBISB	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _WBISB[3];       \/* *o  (r\/s)    Angular rate of body frame relative inertial frame as described in body frame sensed by gyro *\/$/;"	m	class:SDT_NONIDEAL
_WBISB_old	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _WBISB_old[3];   \/* *o  (r\/s)    Angular rate of body frame relative inertial frame as described in body frame (previous time step) *\/$/;"	m	class:SDT_NONIDEAL
__SDT_NONIDEAL_HH	sensor/include/sdt/SDT_NONIDEAL.hh	2;"	d
_cross2_old	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _cross2_old[3];$/;"	m	class:SDT_NONIDEAL
_cross3_old	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _cross3_old[3];$/;"	m	class:SDT_NONIDEAL
_sculling_old	sensor/include/sdt/SDT_NONIDEAL.hh	/^    double _sculling_old[3];$/;"	m	class:SDT_NONIDEAL
cross2_old	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec cross2_old;$/;"	m	class:SDT_NONIDEAL
cross3_old	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec cross3_old;$/;"	m	class:SDT_NONIDEAL
k	sensor/include/sdt/SDT_NONIDEAL.hh	/^    unsigned int k;         \/* *o (--)      calculate index *\/$/;"	m	class:SDT_NONIDEAL
sculling_old	sensor/include/sdt/SDT_NONIDEAL.hh	/^    arma::vec sculling_old;$/;"	m	class:SDT_NONIDEAL
GPS_data_1	sensor/include/sdt/sdt_interface.hh	/^    NSPO_GPSR_SCI_TLM_t     GPS_data_1;$/;"	m	struct:sensor::SDT_INTERFACER_t
GPS_data_2	sensor/include/sdt/sdt_interface.hh	/^    NSPO_GPSR_SCI_TLM_t     GPS_data_2;$/;"	m	struct:sensor::SDT_INTERFACER_t
IMU_filtered_data	sensor/include/sdt/sdt_interface.hh	/^    IMU_filtered_data_t     IMU_filtered_data;$/;"	m	struct:sensor::SDT_INTERFACER_t
SDT_INTERFACER_t	sensor/include/sdt/sdt_interface.hh	/^struct SDT_INTERFACER_t {$/;"	s	namespace:sensor
__SDT_INTERFACE_HH__	sensor/include/sdt/sdt_interface.hh	2;"	d
sensor	sensor/include/sdt/sdt_interface.hh	/^namespace sensor {$/;"	n
SDT_ideal	sensor/src/SDT_ideal.cpp	/^SDT_ideal::SDT_ideal()$/;"	f	class:SDT_ideal
build_321_rotation_matrix	sensor/src/SDT_ideal.cpp	/^arma::mat33 SDT_ideal::build_321_rotation_matrix(arma::vec3 angle) {$/;"	f	class:SDT_ideal
compute	sensor/src/SDT_ideal.cpp	/^void SDT_ideal::compute(double int_step) {$/;"	f	class:SDT_ideal
SDT_NONIDEAL	sensor/src/SDT_nonideal.cpp	/^SDT_NONIDEAL::SDT_NONIDEAL()$/;"	f	class:SDT_NONIDEAL
build_321_rotation_matrix	sensor/src/SDT_nonideal.cpp	/^arma::mat33 SDT_NONIDEAL::build_321_rotation_matrix(arma::vec3 angle) {$/;"	f	class:SDT_NONIDEAL
compute	sensor/src/SDT_nonideal.cpp	/^void SDT_NONIDEAL::compute(double int_step) {$/;"	f	class:SDT_NONIDEAL
AccelerometerIdeal	sensor/src/accel/accelerometer_ideal.cpp	/^sensor::AccelerometerIdeal::AccelerometerIdeal(Newton &newt)$/;"	f	class:sensor::AccelerometerIdeal
propagate_error	sensor/src/accel/accelerometer_ideal.cpp	/^void sensor::AccelerometerIdeal::propagate_error(double int_step) {$/;"	f	class:sensor::AccelerometerIdeal
AccelerometerRocket6G	sensor/src/accel/accelerometer_rocket6g.cpp	/^sensor::AccelerometerRocket6G::AccelerometerRocket6G(double emisa[3], double escala[3], double ebiasa[3], Newton &newt)$/;"	f	class:sensor::AccelerometerRocket6G
propagate_error	sensor/src/accel/accelerometer_rocket6g.cpp	/^void sensor::AccelerometerRocket6G::propagate_error(double int_step) {$/;"	f	class:sensor::AccelerometerRocket6G
GyroIdeal	sensor/src/gyro/gyro_ideal.cpp	/^sensor::GyroIdeal::GyroIdeal(_Euler_ &eul)$/;"	f	class:sensor::GyroIdeal
propagate_error	sensor/src/gyro/gyro_ideal.cpp	/^void sensor::GyroIdeal::propagate_error(double int_step) {$/;"	f	class:sensor::GyroIdeal
GyroRocket6G	sensor/src/gyro/gyro_rocket6g.cpp	/^sensor::GyroRocket6G::GyroRocket6G(double emisg[3], double escalg[3], double ebiasg[3], Newton &newt, _Euler_ &eul, Kinematics &kine)$/;"	f	class:sensor::GyroRocket6G
propagate_error	sensor/src/gyro/gyro_rocket6g.cpp	/^void sensor::GyroRocket6G::propagate_error(double int_step) {$/;"	f	class:sensor::GyroRocket6G
