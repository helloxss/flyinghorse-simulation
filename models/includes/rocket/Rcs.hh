#ifndef __RCS_HH__
#define __RCS_HH__
/********************************* TRICK HEADER *******************************
PURPOSE:
      (Describe the RCS Module On Board)
LIBRARY DEPENDENCY:
      ((../src/rocket/Rcs.cpp))
*******************************************************************************/

#include "Newton.hh"
#include "Ins.hh"
#include "Tvc.hh"
#include "Guidance.hh"

#include "cad/schmitt_trigger.hh"

class Guidance;

class RCS {
    TRICK_INTERFACE(RCS);
    public:
        RCS(INS &i, Guidance &guia, Propulsion &plp);
        RCS(const RCS& other);

        RCS& operator=(const RCS& other);

        void initialize();

        void actuate();
        void rcs_schmitt_thrust();

        enum RCS_TYPE {
            NO_RCS = 0,
            ON_OFF_RCS = 2
        };

        enum RCS_MODE {
            NO_CONTROL = 0,
            ALL_GEODETIC_EULUR_ANGLE_CONTROL = 1,
            THRUST_VECTOR_DIRECTION_AND_ROLL_ANGLE_CONTROL = 2,
            INCIDENCE_AND_ROLL_ANGLE_CONTROL = 3,
            GEODETIC_YAW_ANGLE_CONTROL = 4
        };

        void setup_rcs_schmitt_trigger(double dead_zone, double hysteresis);

        void enable_rcs();
        void disable_rcs();

        bool isEnabled();

        void set_mode(enum RCS_MODE);
        enum RCS_MODE get_rcs_mode();

        Matrix get_FMRCS();
        Matrix get_FARCS();

        arma::vec3 get_FMRCS_();
        arma::vec3 get_FARCS_();

        /* Input File */
        void set_rcs_tau(double);
        void set_roll_mom_max(double);
        void set_pitch_mom_max(double);
        void set_yaw_mom_max(double);
        void set_thtbdcomx(double);
        void set_psibdcomx(double);
        void set_rcs_thrust(double);
        void set_rocket_r(double);
        void set_rcs_pos(double);
    private:
        /* Internal Getter */

        /* Internal Initializers */
        void default_data();

        /* Internal Propagator / Calculators */

        /* Internal Calculators */

        /* Routing references */
        INS        * ins;
        Guidance   * guidance;
        Propulsion * propulsion;

        Schmitt_Trigger roll_schi;
        Schmitt_Trigger pitch_schi;
        Schmitt_Trigger yaw_schi;

        /* Input */
        double  thtbdcomx;       /* *o  (d)    Pitch angle command */
        double  psibdcomx;       /* *o  (d)    Yaw angle command */
        double  phibdcomx;       /* *o  (d)    Roll angle command */

        /* Constants */
        enum RCS_TYPE rcs_type;  /* *o  (--)   Attitude control, see RCS_TYPE */
        enum RCS_MODE rcs_mode;  /* *o  (--)   Attitude control, see RCS_MODE */

        double  rcs_tau;         /* *o  (s)    Slope of the switching function */
        double  roll_mom_max;    /* *o  (N*m)  RCS rolling moment max value */
        double  pitch_mom_max;   /* *o  (N*m)  RCS pitching moment max value */
        double  yaw_mom_max;     /* *o  (N*m)  RCS yawing moment max value */
        double  rcs_thrust;      /* *o  (N)    rcs thrust */
        double  rocket_r;        /* *o  (m)    rocket's radius */
        double  rcs_pos;         /* *o  (m)    rcs thruster's postion from nose */

        //double  acc_gain;        [> *io  (N*s2/m) Acceleration gain of side thrusters <]
        //double  side_force_max;  [> *io  (N)    Maximum side force of thruster <]

        /* Propagative Stats */

        /* Generating Outputs */
        arma::vec  FMRCS;        /* *io  (N*m)  Moment generated by the RCS thrusters */
        double    _FMRCS[3];     /* *io  (N*m)  Moment generated by the RCS thrusters */

        arma::vec  FARCS;        /* *io  (N)    Force generated by the RCS side thrusters */
        double    _FARCS[3];     /* *io  (N)    Force generated by the RCS side thrusters */

        double  e_roll;          /* *o  (--)   Roll error signal */
        double  e_pitch;         /* *o  (--)   Pitch error signal */
        double  e_yaw;           /* *o  (--)   Yaw error signal */

        int     o_roll;          /* *o  (--)   Roll output of Schmitt trigger */
        int     o_pitch;         /* *o  (--)   Pitch output of Schmitt trigger */
        int     o_yaw;           /* *o  (--)   Yaw output of Schmitt trigger */

        int     roll_count;      /* *o  (--)   Roll thruster on/off */
        int     pitch_count;     /* *o  (--)   Pitch thruster on/off */
        int     yaw_count;       /* *o  (--)   Yaw thruster on/off */

        //double  e_right;         [> *io  (N)    Side force error signal, right <]
        //double  e_down;          [> *io  (N)    Down force error signal, down <]

        //int     o_right;         [> *io  (--)   Right output of Schmitt trigger <]
        //int     o_down;          [> *io  (--)   Down output of Schmitt trigger <]

        /* Non-propagating Diagnostic Variables */
        /* These can be deleted, but keep to remain trackable in trick simulator */

        //int     right_count;     [> *io  (--)   Right force thruster on/off <]
        //int     down_count;      [> *io  (--)   Down forece thruster on/off <]
};

#endif  // __RCS_HH__
