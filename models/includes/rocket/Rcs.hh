#ifndef __RCS_HH__
#define __RCS_HH__
/********************************* TRICK HEADER *******************************
PURPOSE:
      (Describe the RCS Module On Board)
LIBRARY DEPENDENCY:
      ((../src/rocket/Rcs.cpp))
*******************************************************************************/

#include "Newton.hh"
#include "Ins.hh"
#include "Tvc.hh"
#include "Guidance.hh"

#include "cad/schmitt_trigger.hh"

class Guidance;

class RCS {
    TRICK_INTERFACE(RCS);
    public:
        template<class Archive>
        void serialize(Archive & ar, const unsigned int version){
            ar & propulsion;

            ar & roll_schi;
            ar & pitch_schi;
            ar & yaw_schi;

            ar & roll_mom_max;
            ar & pitch_mom_max;
            ar & yaw_mom_max;
            ar & rcs_thrust;
            ar & rocket_r;
            ar & rcs_pos;

            ar & _FMRCS;
            ar & _FARCS;

            ar & o_roll;
            ar & o_pitch;
            ar & o_yaw;

            ar & roll_count;
            ar & pitch_count;
            ar & yaw_count;
        }

        RCS(Propulsion &plp);
        RCS(const RCS& other);

        RCS& operator=(const RCS& other);

        void initialize();

        void rcs_schmitt_thrust();

        void setup_rcs_schmitt_trigger(double dead_zone, double hysteresis);

        std::function<double()> grab_e_roll;
        std::function<double()> grab_e_pitch;
        std::function<double()> grab_e_yaw;

        arma::vec3 get_FMRCS();
        arma::vec3 get_FARCS();

        /* Input File */
        void set_roll_mom_max(double);
        void set_pitch_mom_max(double);
        void set_yaw_mom_max(double);
        void set_rcs_thrust(double);
        void set_rocket_r(double);
        void set_rcs_pos(double);
    private:
        /* Internal Getter */

        /* Internal Initializers */
        void default_data();

        /* Internal Propagator / Calculators */

        /* Internal Calculators */

        /* Routing references */
        Propulsion * propulsion;

        Schmitt_Trigger roll_schi;
        Schmitt_Trigger pitch_schi;
        Schmitt_Trigger yaw_schi;

        /* Input */

        /* Constants */
        double  roll_mom_max;    /* *o  (N*m)  RCS rolling moment max value */
        double  pitch_mom_max;   /* *o  (N*m)  RCS pitching moment max value */
        double  yaw_mom_max;     /* *o  (N*m)  RCS yawing moment max value */
        double  rcs_thrust;      /* *o  (N)    rcs thrust */
        double  rocket_r;        /* *o  (m)    rocket's radius */
        double  rcs_pos;         /* *o  (m)    rcs thruster's postion from nose */

        //double  acc_gain;        [> *io  (N*s2/m) Acceleration gain of side thrusters <]
        //double  side_force_max;  [> *io  (N)    Maximum side force of thruster <]

        /* Propagative Stats */

        /* Generating Outputs */
        arma::vec  FMRCS;        /* *io  (N*m)  Moment generated by the RCS thrusters */
        double    _FMRCS[3];     /* *io  (N*m)  Moment generated by the RCS thrusters */

        arma::vec  FARCS;        /* *io  (N)    Force generated by the RCS side thrusters */
        double    _FARCS[3];     /* *io  (N)    Force generated by the RCS side thrusters */

        int     o_roll;          /* *o  (--)   Roll output of Schmitt trigger */
        int     o_pitch;         /* *o  (--)   Pitch output of Schmitt trigger */
        int     o_yaw;           /* *o  (--)   Yaw output of Schmitt trigger */

        int     roll_count;      /* *o  (--)   Roll thruster on/off */
        int     pitch_count;     /* *o  (--)   Pitch thruster on/off */
        int     yaw_count;       /* *o  (--)   Yaw thruster on/off */

        //double  e_right;         [> *io  (N)    Side force error signal, right <]
        //double  e_down;          [> *io  (N)    Down force error signal, down <]

        //int     o_right;         [> *io  (--)   Right output of Schmitt trigger <]
        //int     o_down;          [> *io  (--)   Down output of Schmitt trigger <]

        /* Non-propagating Diagnostic Variables */
        /* These can be deleted, but keep to remain trackable in trick simulator */

        //int     right_count;     [> *io  (--)   Right force thruster on/off <]
        //int     down_count;      [> *io  (--)   Down forece thruster on/off <]
};

#endif  // __RCS_HH__
